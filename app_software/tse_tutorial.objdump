
C:/tse_tutorial/app_software/tse_tutorial.elf:     file format elf32-littlenios2
C:/tse_tutorial/app_software/tse_tutorial.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00080168

Program Header:
    LOAD off    0x00001000 vaddr 0x00080000 paddr 0x00080000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00080020 paddr 0x00080020 align 2**12
         filesz 0x00004354 memsz 0x00004354 flags r-x
    LOAD off    0x00005374 vaddr 0x00084374 paddr 0x00087e24 align 2**12
         filesz 0x00003ab0 memsz 0x00003ab0 flags rw-
    LOAD off    0x000098d4 vaddr 0x0008b8d4 paddr 0x0008b8d4 align 2**12
         filesz 0x00000000 memsz 0x0000215c flags rw-
    LOAD off    0x00009000 vaddr 0x00100000 paddr 0x0008da30 align 2**12
         filesz 0x00000080 memsz 0x00000080 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00080000  00080000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000148  00080020  00080020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         000040f4  00080168  00080168  00001168  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000118  0008425c  0008425c  0000525c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00003ab0  00084374  00087e24  00005374  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000215c  0008b8d4  0008b8d4  000098d4  2**2
                  ALLOC, SMALL_DATA
  6 .descriptor_memory 00000080  00100000  0008da30  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .comment      00000023  00000000  00000000  00009080  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000898  00000000  00000000  000090a8  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_pubnames 0000108c  00000000  00000000  00009940  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   000163c3  00000000  00000000  0000a9cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00005110  00000000  00000000  00020d8f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000ba93  00000000  00000000  00025e9f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00000eb0  00000000  00000000  00031934  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000022e7  00000000  00000000  000327e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00004153  00000000  00000000  00034acb  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000020  00000000  00000000  00038c20  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 000002b0  00000000  00000000  00038c40  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  0003b60d  2**0
                  CONTENTS, READONLY
 19 .cpu          00000005  00000000  00000000  0003b610  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  0003b615  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  0003b616  2**0
                  CONTENTS, READONLY
 22 .stderr_dev   00000009  00000000  00000000  0003b617  2**0
                  CONTENTS, READONLY
 23 .stdin_dev    00000009  00000000  00000000  0003b620  2**0
                  CONTENTS, READONLY
 24 .stdout_dev   00000009  00000000  00000000  0003b629  2**0
                  CONTENTS, READONLY
 25 .sopc_system_name 0000000b  00000000  00000000  0003b632  2**0
                  CONTENTS, READONLY
 26 .sopcinfo     0005f317  00000000  00000000  0003b63d  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00080000 l    d  .entry	00000000 .entry
00080020 l    d  .exceptions	00000000 .exceptions
00080168 l    d  .text	00000000 .text
0008425c l    d  .rodata	00000000 .rodata
00084374 l    d  .rwdata	00000000 .rwdata
0008b8d4 l    d  .bss	00000000 .bss
00100000 l    d  .descriptor_memory	00000000 .descriptor_memory
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
000801a0 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 tse_tutorial.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00086374 l     O .rwdata	00001060 jtag_uart
000873d4 l     O .rwdata	00000030 sgdma_rx
00087404 l     O .rwdata	00000030 sgdma_tx
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00080870 l     F .text	00000054 altera_avalon_jtag_uart_timeout
00080944 l     F .text	00000134 altera_avalon_jtag_uart_irq
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_sgdma.c
00081028 l     F .text	00000068 alt_avalon_sgdma_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_close.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
00081588 l     F .text	00000008 alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
000817b0 l     F .text	00000064 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_remap_uncached.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_dcache_flush.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 impure.c
000875dc l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 __call_atexit.c
000822f8 l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
000826dc l     F .text	00000058 std
000827e8 l     F .text	00000008 __fp_lock
000827f0 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00000000 l    df *ABS*	00000000 alt_isatty.c
00000000 l    df *ABS*	00000000 alt_lseek.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00087e20 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
00083d04 g     F .text	00000070 _isatty_r
000804c0 g     F .text	00000050 alt_main
000801a4 g     F .text	0000005c rx_ethernet_isr
0008d930 g     O .bss	00000100 alt_irq
00083d74 g     F .text	00000078 _lseek_r
00087e24 g       *ABS*	00000000 __flash_rwdata_start
0008da30 g       *ABS*	00000000 __alt_heap_start
00080ef8 g     F .text	00000094 alt_avalon_sgdma_do_sync_transfer
00083940 g     F .text	00000068 __sseek
00082744 g     F .text	000000a4 __sinit
00082070 g     F .text	00000130 __swbuf_r
00082844 g     F .text	00000068 __sfmoreglue
00084018 g     F .text	00000004 __malloc_unlock
00081090 g     F .text	0000012c alt_avalon_sgdma_construct_descriptor_burst
00082834 g     F .text	00000010 _cleanup
00000000  w      *UND*	00000000 __errno
00080000 g     F .entry	0000001c __reset
00081294 g     F .text	0000004c alt_avalon_sgdma_construct_stream_to_mem_desc_burst
00080020 g       *ABS*	00000000 __flash_exceptions_start
00083c90 g     F .text	00000074 _fstat_r
0008b8f8 g     O .bss	00000004 errno
0008b8e4 g     O .bss	00000004 alt_argv
0008fde4 g       *ABS*	00000000 _gp
0008745c g     O .rwdata	00000180 alt_fd_list
00081600 g     F .text	00000070 alt_find_dev
00081d70 g     F .text	000000a0 memcpy
00082828 g     F .text	0000000c _cleanup_r
00081814 g     F .text	00000098 alt_io_redirect
00081204 g     F .text	00000050 alt_avalon_sgdma_construct_mem_to_stream_desc_burst
00080aec g     F .text	00000168 altera_avalon_jtag_uart_read
00083ef8 g     F .text	00000084 isatty
00081c88 g     F .text	0000003c alt_icache_flush
0008b8fc g     O .bss	00000004 __malloc_top_pad
00080ec4 g     F .text	0000001c alt_avalon_sgdma_stop
000838c8 g     F .text	00000070 _sbrk_r
00083dec g     F .text	00000078 _read_r
00081b5c g     F .text	00000004 alt_dcache_flush
00087dfc g     O .rwdata	00000004 alt_max_fd
00083b6c g     F .text	00000110 _fclose_r
000826a8 g     F .text	00000034 fflush
0008b900 g     O .bss	00000004 __malloc_max_sbrked_mem
00080000 g       *ABS*	00000000 __alt_mem_main_memory
00083f7c g     F .text	00000098 lseek
00087e14 g     O .rwdata	00000004 _global_impure_ptr
0008da30 g       *ABS*	00000000 __bss_end
00081748 g     F .text	00000068 alt_iic_isr_register
00080f8c g     F .text	0000009c alt_avalon_sgdma_do_async_transfer
00081aa8 g     F .text	000000ac alt_tick
00100060 g     O .descriptor_memory	00000020 rx_descriptor_end
00082810 g     F .text	00000018 __fp_lock_all
00081690 g     F .text	00000018 alt_ic_irq_enabled
00081a74 g     F .text	00000034 alt_alarm_stop
00100000 g       *ABS*	00000000 __alt_mem_descriptor_memory
0008b8ec g     O .bss	00000004 alt_irq_active
00084374 g     O .rwdata	00002000 tx_frame
000800ec g     F .exceptions	0000007c alt_irq_handler
00087434 g     O .rwdata	00000028 alt_dev_null
000813e4 g     F .text	00000030 alt_avalon_sgdma_check_descriptor_status
00081584 g     F .text	00000004 alt_dcache_flush_all
00100040 g     O .descriptor_memory	00000020 rx_descriptor
00087e24 g       *ABS*	00000000 __ram_rwdata_end
00087df4 g     O .rwdata	00000008 alt_dev_list
00084164 g     F .text	000000f4 write
00080e94 g     F .text	00000030 alt_avalon_sgdma_enable_desc_poll
00081f14 g     F .text	000000e8 _putc_r
00084374 g       *ABS*	00000000 __ram_rodata_end
00083e78 g     F .text	00000080 fstat
00081254 g     F .text	00000040 alt_avalon_sgdma_construct_mem_to_stream_desc
00080dd0 g     F .text	00000010 alt_avalon_sgdma_register_callback
0008da30 g       *ABS*	00000000 end
000808c4 g     F .text	00000080 altera_avalon_jtag_uart_init
000c93e0 g       *ABS*	00000000 __alt_stack_pointer
00080e74 g     F .text	00000020 alt_avalon_sgdma_disable_desc_poll
00080c54 g     F .text	0000017c altera_avalon_jtag_uart_write
00081350 g     F .text	00000038 alt_avalon_sgdma_construct_mem_to_mem_desc
00082734 g     F .text	00000004 __sfp_lock_acquire
000812e0 g     F .text	00000028 alt_avalon_sgdma_construct_stream_to_mem_desc
00082ac8 g     F .text	00000314 _free_r
00080510 g     F .text	000001dc alt_printf
000822fc g     F .text	000001b0 __call_exitprocs
00087e1c g     O .rwdata	00000004 __malloc_sbrk_base
00080168 g     F .text	0000003c _start
0008b8f0 g     O .bss	00000004 _alt_tick_rate
0008b8d4 g     O .bss	00000004 sgdma_tx_dev
00081388 g     F .text	0000005c alt_avalon_sgdma_open
0008b8f4 g     O .bss	00000004 _alt_nticks
0008b8d8 g     O .bss	00000004 text_length
0008401c g     F .text	000000f8 read
00080714 g     F .text	0000006c alt_sys_init
00081a4c g     F .text	00000028 alt_remap_uncached
00080838 g     F .text	00000038 altera_avalon_jtag_uart_close
00084374 g       *ABS*	00000000 __ram_rwdata_start
0008425c g       *ABS*	00000000 __ram_rodata_start
0008d908 g     O .bss	00000028 __malloc_current_mallinfo
00080810 g     F .text	00000028 altera_avalon_jtag_uart_read_fd
00081c1c g     F .text	0000006c alt_get_fd
00083afc g     F .text	00000070 _close_r
00081cfc g     F .text	00000074 memcmp
000807c0 g     F .text	00000028 altera_avalon_jtag_uart_close_fd
0008da30 g       *ABS*	00000000 __alt_stack_base
000807a0 g     F .text	00000020 altera_avalon_jtag_uart_ioctl_fd
000821bc g     F .text	0000013c __swsetup_r
000828ac g     F .text	000000f0 __sfp
000879dc g     O .rwdata	00000408 __malloc_av_
00082740 g     F .text	00000004 __sinit_lock_release
00083a24 g     F .text	00000060 __sread
00081b60 g     F .text	000000bc alt_find_file
00081590 g     F .text	00000070 alt_dev_llist_insert
00084014 g     F .text	00000004 __malloc_lock
00084114 g     F .text	00000050 sbrk
00080ee0 g     F .text	00000018 alt_avalon_sgdma_start
000824ac g     F .text	000001fc _fflush_r
0008b8d4 g       *ABS*	00000000 __bss_start
00083830 g     F .text	00000098 memset
00080200 g     F .text	000001fc main
0008b8e8 g     O .bss	00000004 alt_envp
0008b904 g     O .bss	00000004 __malloc_max_total_mem
000807e8 g     F .text	00000028 altera_avalon_jtag_uart_write_fd
000821a0 g     F .text	0000001c __swbuf
00087de4 g     O .rwdata	00000008 alt_sgdma_list
00083938 g     F .text	00000008 __sclose
000c93e0 g       *ABS*	00000000 __alt_heap_limit
00083c7c g     F .text	00000014 fclose
000830f0 g     F .text	00000740 _malloc_r
00087e00 g     O .rwdata	00000004 alt_errno
00100000 g     O .descriptor_memory	00000020 tx_descriptor
0008b908 g     O .bss	00002000 rx_frame
00082ea4 g     F .text	000000b8 _fwalk
00081e10 g     F .text	00000104 putc
0008299c g     F .text	0000012c _malloc_trim_r
0008425c g       *ABS*	00000000 __flash_rodata_start
00080780 g     F .text	00000020 alt_irq_init
00081a28 g     F .text	00000024 alt_release_fd
00083a84 g     F .text	00000078 _write_r
00087e10 g     O .rwdata	00000004 _impure_ptr
0008b8e0 g     O .bss	00000004 alt_argc
00080020 g       .exceptions	00000000 alt_irq_entry
000827f8 g     F .text	00000018 __fp_unlock_all
00087dec g     O .rwdata	00000008 alt_fs_list
00080020 g       *ABS*	00000000 __ram_exceptions_start
00081728 g     F .text	00000020 alt_ic_isr_register
00087e24 g       *ABS*	00000000 _edata
0008da30 g       *ABS*	00000000 _end
00080168 g       *ABS*	00000000 __ram_exceptions_end
00080a78 g     F .text	00000074 altera_avalon_jtag_uart_ioctl
000816e8 g     F .text	00000040 alt_ic_irq_disable
00100020 g     O .descriptor_memory	00000020 tx_descriptor_end
000811bc g     F .text	00000048 alt_avalon_sgdma_construct_descriptor
000839a8 g     F .text	0000007c __swrite
00087e18 g     O .rwdata	00000004 __malloc_trim_threshold
00081b54 g     F .text	00000008 altera_nios2_qsys_irq_init
00081cc4 g     F .text	00000038 exit
00082ddc g     F .text	000000c8 _fwalk_reent
000c93e0 g       *ABS*	00000000 __alt_data_end
00080020 g     F .exceptions	00000000 alt_exception
00082738 g     F .text	00000004 __sfp_lock_release
0008b8dc g     O .bss	00000004 sgdma_rx_dev
00083e64 g     F .text	00000014 _exit
00081414 g     F .text	00000094 alt_alarm_start
00082f5c g     F .text	00000194 __smakebuf_r
00081ffc g     F .text	00000074 strlen
000818ac g     F .text	0000017c open
000806ec g     F .text	00000028 alt_putchar
00081670 g     F .text	00000020 alt_icache_flush_all
00087e04 g     O .rwdata	00000004 alt_priority_mask
000816a8 g     F .text	00000040 alt_ic_irq_enable
00081308 g     F .text	00000048 alt_avalon_sgdma_construct_mem_to_mem_desc_burst
00087e08 g     O .rwdata	00000008 alt_alarm_list
000814a8 g     F .text	000000dc close
000803fc g     F .text	000000c4 alt_load
00080de0 g     F .text	00000094 alt_avalon_sgdma_init
00000000  w      *UND*	00000000 free
0008273c g     F .text	00000004 __sinit_lock_acquire



Disassembly of section .entry:

00080000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   80000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   80004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   80008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   8000c:	00bffd16 	blt	zero,r2,80004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   80010:	00400234 	movhi	at,8
    ori r1, r1, %lo(_start)
   80014:	08405a14 	ori	at,at,360
    jmp r1
   80018:	0800683a 	jmp	at
   8001c:	00000000 	call	0 <__reset-0x80000>

Disassembly of section .exceptions:

00080020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
   80020:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
   80024:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
   80028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   8002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   80030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   80034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   80038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   8003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   80040:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
   80044:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
   80048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   8004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   80050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   80054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   80058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   8005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   80060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   80064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   80068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   8006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   80070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   80074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   80078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   8007c:	10000326 	beq	r2,zero,8008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   80080:	20000226 	beq	r4,zero,8008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   80084:	00800ec0 	call	800ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   80088:	00000306 	br	80098 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
   8008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
   80090:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
   80094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   80098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   8009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   800a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   800a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   800a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   800ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   800b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   800b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   800b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   800bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   800c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
   800c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   800c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   800cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   800d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   800d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   800d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   800dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   800e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
   800e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   800e8:	ef80083a 	eret

000800ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   800ec:	defffe04 	addi	sp,sp,-8
   800f0:	dfc00115 	stw	ra,4(sp)
   800f4:	dc000015 	stw	r16,0(sp)
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   800f8:	000d313a 	rdctl	r6,ipending
   800fc:	04000274 	movhi	r16,9
   80100:	84364c04 	addi	r16,r16,-9936
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   80104:	3080004c 	andi	r2,r6,1
   80108:	1005003a 	cmpeq	r2,r2,zero
   8010c:	10000a1e 	bne	r2,zero,80138 <alt_irq_handler+0x4c>
   80110:	0009883a 	mov	r4,zero
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   80114:	200490fa 	slli	r2,r4,3
   80118:	1405883a 	add	r2,r2,r16
   8011c:	10c00017 	ldw	r3,0(r2)
   80120:	11000117 	ldw	r4,4(r2)
   80124:	183ee83a 	callr	r3
   80128:	0005313a 	rdctl	r2,ipending

    } while (1);

    active = alt_irq_pending ();
    
  } while (active);
   8012c:	10000a26 	beq	r2,zero,80158 <alt_irq_handler+0x6c>
   80130:	100d883a 	mov	r6,r2
   80134:	003ff306 	br	80104 <alt_irq_handler+0x18>
   80138:	00c00044 	movi	r3,1
   8013c:	0009883a 	mov	r4,zero
   80140:	180b883a 	mov	r5,r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
   80144:	18c7883a 	add	r3,r3,r3
      i++;
   80148:	2149883a 	add	r4,r4,r5
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   8014c:	30c4703a 	and	r2,r6,r3
   80150:	103ff01e 	bne	r2,zero,80114 <alt_irq_handler+0x28>
   80154:	003ffb06 	br	80144 <alt_irq_handler+0x58>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
   80158:	dfc00117 	ldw	ra,4(sp)
   8015c:	dc000017 	ldw	r16,0(sp)
   80160:	dec00204 	addi	sp,sp,8
   80164:	f800283a 	ret

Disassembly of section .text:

00080168 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   80168:	06c00334 	movhi	sp,12
    ori sp, sp, %lo(__alt_stack_pointer)
   8016c:	dee4f814 	ori	sp,sp,37856

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
   80170:	06800234 	movhi	gp,8
    ori gp, gp, %lo(_gp)
   80174:	d6bf7914 	ori	gp,gp,64996
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   80178:	00800234 	movhi	r2,8
    ori r2, r2, %lo(__bss_start)
   8017c:	10ae3514 	ori	r2,r2,47316

    movhi r3, %hi(__bss_end)
   80180:	00c00234 	movhi	r3,8
    ori r3, r3, %lo(__bss_end)
   80184:	18f68c14 	ori	r3,r3,55856

    beq r2, r3, 1f
   80188:	10c00326 	beq	r2,r3,80198 <_start+0x30>

0:
    stw zero, (r2)
   8018c:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   80190:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   80194:	10fffd36 	bltu	r2,r3,8018c <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   80198:	00803fc0 	call	803fc <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   8019c:	00804c00 	call	804c0 <alt_main>

000801a0 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   801a0:	003fff06 	br	801a0 <alt_after_alt_main>

000801a4 <rx_ethernet_isr>:

/****************************************************************************************
 * Subroutine to read incoming Ethernet frames
****************************************************************************************/
void rx_ethernet_isr (void *context)
{
   801a4:	defffd04 	addi	sp,sp,-12
   801a8:	dfc00215 	stw	ra,8(sp)
   801ac:	dc000115 	stw	r16,4(sp)
   801b0:	04000434 	movhi	r16,16
   801b4:	84001004 	addi	r16,r16,64
	int i;

	// Wait until receive descriptor transfer is complete
	while (alt_avalon_sgdma_check_descriptor_status(&rx_descriptor) != 0)
   801b8:	8009883a 	mov	r4,r16
   801bc:	00813e40 	call	813e4 <alt_avalon_sgdma_check_descriptor_status>
   801c0:	103ffd1e 	bne	r2,zero,801b8 <rx_ethernet_isr+0x14>
	
	// Reprint current input line after the output
	// alt_printf( "send> %s", tx_frame + 16 );
	
	// Create new receive sgdma descriptor
	alt_avalon_sgdma_construct_stream_to_mem_desc( &rx_descriptor, &rx_descriptor_end, rx_frame, 0, 0 );
   801c4:	d8000015 	stw	zero,0(sp)
   801c8:	8009883a 	mov	r4,r16
   801cc:	01400434 	movhi	r5,16
   801d0:	29401804 	addi	r5,r5,96
   801d4:	01800274 	movhi	r6,9
   801d8:	31ae4204 	addi	r6,r6,-18168
   801dc:	000f883a 	mov	r7,zero
   801e0:	00812e00 	call	812e0 <alt_avalon_sgdma_construct_stream_to_mem_desc>
	
	// Set up non-blocking transfer of sgdma receive descriptor
	alt_avalon_sgdma_do_async_transfer( sgdma_rx_dev, &rx_descriptor );
   801e4:	d12ebe17 	ldw	r4,-17672(gp)
   801e8:	800b883a 	mov	r5,r16
   801ec:	0080f8c0 	call	80f8c <alt_avalon_sgdma_do_async_transfer>
}
   801f0:	dfc00217 	ldw	ra,8(sp)
   801f4:	dc000117 	ldw	r16,4(sp)
   801f8:	dec00304 	addi	sp,sp,12
   801fc:	f800283a 	ret

00080200 <main>:
 *  1. Records input text and transmits the text via Ethernet after Enter is 
 *     pressed
 *  2. Displays text received via Ethernet frame on the JTAG UART
********************************************************************************/
int main(void)
{	
   80200:	defff604 	addi	sp,sp,-40
   80204:	dfc00915 	stw	ra,36(sp)
   80208:	dc800815 	stw	r18,32(sp)
   8020c:	dc400715 	stw	r17,28(sp)
   80210:	dc000615 	stw	r16,24(sp)
	// Open the sgdma transmit device
	sgdma_tx_dev = alt_avalon_sgdma_open ("/dev/sgdma_tx");
   80214:	01000234 	movhi	r4,8
   80218:	21109704 	addi	r4,r4,16988
   8021c:	00813880 	call	81388 <alt_avalon_sgdma_open>
   80220:	d0aebc15 	stw	r2,-17680(gp)
	if (sgdma_tx_dev == NULL) {
   80224:	1000041e 	bne	r2,zero,80238 <main+0x38>
		alt_printf ("Error: could not open scatter-gather dma transmit device\n");
   80228:	01000234 	movhi	r4,8
   8022c:	21109b04 	addi	r4,r4,17004
   80230:	00805100 	call	80510 <alt_printf>
   80234:	00006a06 	br	803e0 <main+0x1e0>
		return -1;
	} else alt_printf ("Opened scatter-gather dma transmit device\n");
   80238:	01000234 	movhi	r4,8
   8023c:	2110aa04 	addi	r4,r4,17064
   80240:	00805100 	call	80510 <alt_printf>
		
	// Open the sgdma receive device
	sgdma_rx_dev = alt_avalon_sgdma_open ("/dev/sgdma_rx");
   80244:	01000234 	movhi	r4,8
   80248:	2110b504 	addi	r4,r4,17108
   8024c:	00813880 	call	81388 <alt_avalon_sgdma_open>
   80250:	d0aebe15 	stw	r2,-17672(gp)
	if (sgdma_rx_dev == NULL) {
   80254:	1000041e 	bne	r2,zero,80268 <main+0x68>
		alt_printf ("Error: could not open scatter-gather dma receive device\n");
   80258:	01000234 	movhi	r4,8
   8025c:	2110b904 	addi	r4,r4,17124
   80260:	00805100 	call	80510 <alt_printf>
   80264:	00005e06 	br	803e0 <main+0x1e0>
		return -1;
	} else alt_printf ("Opened scatter-gather dma receive device\n");
   80268:	01000234 	movhi	r4,8
   8026c:	2110c804 	addi	r4,r4,17184
   80270:	00805100 	call	80510 <alt_printf>
    // Definicion del PIOSAMPLER base address
    volatile int * piosampler = (int *) PIOSAMPLER_1_BASE;
    volatile int control, samples_to_transmit;
	
	// Initialize the MAC address 
	*(tse + 3) = 0x116E6001;
   80274:	00c45bb4 	movhi	r3,4462
   80278:	18d80044 	addi	r3,r3,24577
   8027c:	00800434 	movhi	r2,16
   80280:	10880304 	addi	r2,r2,8204
   80284:	10c00015 	stw	r3,0(r2)
	*(tse + 4) = 0x00000F02; 
   80288:	00c3c084 	movi	r3,3842
   8028c:	10800104 	addi	r2,r2,4
   80290:	10c00015 	stw	r3,0(r2)

	// Specify the addresses of the PHY devices to be accessed through MDIO interface
	*(tse + 0x0F) = 0x10;
   80294:	00c00404 	movi	r3,16
   80298:	10800b04 	addi	r2,r2,44
   8029c:	10c00015 	stw	r3,0(r2)
	*(tse + 0x10) = 0x11;
   802a0:	00c00444 	movi	r3,17
   802a4:	10800104 	addi	r2,r2,4
   802a8:	10c00015 	stw	r3,0(r2)
	
	// Write to register 20 of the PHY chip for Ethernet port 0 to set up line loopback
	*(tse + 0x94) = 0x4000;
   802ac:	00d00004 	movi	r3,16384
   802b0:	10808404 	addi	r2,r2,528
   802b4:	10c00015 	stw	r3,0(r2)
	
	// Write to register 16 of the PHY chip for Ethernet port 1 to enable automatic crossover for all modes
	*(tse + 0xB0) = *(tse + 0xB0) | 0x0060;
   802b8:	00c00434 	movhi	r3,16
   802bc:	18c8b004 	addi	r3,r3,8896
   802c0:	18800017 	ldw	r2,0(r3)
   802c4:	10801814 	ori	r2,r2,96
   802c8:	18800015 	stw	r2,0(r3)
	
	// Write to register 20 of the PHY chip for Ethernet port 2 to set up delay for input/output clk
	*(tse + 0xB4) = *(tse + 0xB4) | 0x0082;
   802cc:	18c00404 	addi	r3,r3,16
   802d0:	18800017 	ldw	r2,0(r3)
   802d4:	10802094 	ori	r2,r2,130
   802d8:	18800015 	stw	r2,0(r3)
	
	// Software reset the second PHY chip and wait
	*(tse + 0xA0) = *(tse + 0xA0) | 0x8000;
   802dc:	18ffec04 	addi	r3,r3,-80
   802e0:	18800017 	ldw	r2,0(r3)
   802e4:	10a00014 	ori	r2,r2,32768
   802e8:	18800015 	stw	r2,0(r3)
   802ec:	01200014 	movui	r4,32768
	while ( *(tse + 0xA0) & 0x8000  )
   802f0:	18800017 	ldw	r2,0(r3)
   802f4:	1104703a 	and	r2,r2,r4
   802f8:	103ffd1e 	bne	r2,zero,802f0 <main+0xf0>
	 
	// Enable read and write transfers, gigabit Ethernet operation, and CRC forwarding
    // Poner 0x0000004B para giga bit 
    // Poner 0x00000043 para 10/100
    // Bit 4 en 1 es promiscuo mode    
	*(tse + 2) = *(tse + 2) | 0x0000004B;	
   802fc:	00c00434 	movhi	r3,16
   80300:	18c80204 	addi	r3,r3,8200
   80304:	18800017 	ldw	r2,0(r3)
   80308:	108012d4 	ori	r2,r2,75
   8030c:	18800015 	stw	r2,0(r3)
	
	alt_printf( "send> " );
   80310:	01000234 	movhi	r4,8
   80314:	2110d304 	addi	r4,r4,17228
   80318:	00805100 	call	80510 <alt_printf>
	text_length = 0;
   8031c:	d02ebd15 	stw	zero,-17676(gp)
	

    // BYTES_TO_TRANSFER_REG 
    control = 5;
   80320:	00800144 	movi	r2,5
   80324:	d8800415 	stw	r2,16(sp)
    samples_to_transmit = 364;
   80328:	00805b04 	movi	r2,364
   8032c:	d8800515 	stw	r2,20(sp)
    IOWR(PIOSAMPLER_1_BASE, 1, samples_to_transmit);
   80330:	d8c00517 	ldw	r3,20(sp)
   80334:	00800474 	movhi	r2,17
   80338:	10800104 	addi	r2,r2,4
   8033c:	10c00035 	stwio	r3,0(r2)

    // ADDRESS_TO_WRITE escribirlo a los ultimo
    IOWR(PIOSAMPLER_1_BASE, 2, &tx_frame[16]);
   80340:	00c00234 	movhi	r3,8
   80344:	18d0e104 	addi	r3,r3,17284
   80348:	10800104 	addi	r2,r2,4
   8034c:	10c00035 	stwio	r3,0(r2)
    
    // CONTROL_STATUS_REG
    IOWR(PIOSAMPLER_1_BASE, 0, 0);    
   80350:	00800474 	movhi	r2,17
   80354:	10000035 	stwio	zero,0(r2)
   80358:	1021883a 	mov	r16,r2
   8035c:	04400044 	movi	r17,1
   80360:	04800434 	movhi	r18,16
   80364:	94800004 	addi	r18,r18,0
    while (1) {
        // printf( "(%u, %u, %u", (unsigned int) IORD(PIOSAMPLER_1_BASE, 0), (unsigned int) IORD(PIOSAMPLER_1_BASE, 1), (unsigned int) IORD(PIOSAMPLER_1_BASE, 2));
        // printf( ", %u, %u, %u", (unsigned int) IORD(PIOSAMPLER_1_BASE, 3), (unsigned int) IORD(PIOSAMPLER_1_BASE, 4), (unsigned int) IORD(PIOSAMPLER_1_BASE, 5));
        // printf( ", %u, %u, %u )\n", (unsigned int) IORD(PIOSAMPLER_1_BASE, 6), (unsigned int) IORD(PIOSAMPLER_1_BASE, 7), (unsigned int) IORD(PIOSAMPLER_1_BASE, 8));    
        // Comienzo la transferencia de datos escribiendo al CONTROL_STATUS_REG
        IOWR(PIOSAMPLER_1_BASE, 0, 1);    
   80368:	84400035 	stwio	r17,0(r16)
        while ((unsigned int) IORD(PIOSAMPLER_1_BASE, 0) != 0) {
   8036c:	80800037 	ldwio	r2,0(r16)
   80370:	103ffe1e 	bne	r2,zero,8036c <main+0x16c>
   80374:	00c00474 	movhi	r3,17
   80378:	18c00804 	addi	r3,r3,32
            // printf( ", %u, %u, %u", (unsigned int) IORD(PIOSAMPLER_1_BASE, 3), (unsigned int) IORD(PIOSAMPLER_1_BASE, 4), (unsigned int) IORD(PIOSAMPLER_1_BASE, 5));
            // printf( ", %u, %u, %u )\n", (unsigned int) IORD(PIOSAMPLER_1_BASE, 6), (unsigned int) IORD(PIOSAMPLER_1_BASE, 7), (unsigned int) IORD(PIOSAMPLER_1_BASE, 8));
        }
        // printf( "transferencia comenzada \n");                
        // Espero que la transferencia de datos finalice
        while ((unsigned int) IORD(PIOSAMPLER_1_BASE, 8) != 0) {
   8037c:	18800037 	ldwio	r2,0(r3)
   80380:	103ffe1e 	bne	r2,zero,8037c <main+0x17c>
        }
        // printf( "transferencia finalizada \n");    
        //************************************************************
        // Envio el frame ethernet
        //* 		// Create transmit sgdma descriptor
		alt_avalon_sgdma_construct_mem_to_stream_desc( &tx_descriptor, &tx_descriptor_end, tx_frame, samples_to_transmit * 4 + 16, 0, 1, 1, 0 );
   80384:	d9c00517 	ldw	r7,20(sp)
   80388:	39cf883a 	add	r7,r7,r7
   8038c:	39cf883a 	add	r7,r7,r7
   80390:	39c00404 	addi	r7,r7,16
   80394:	d8000015 	stw	zero,0(sp)
   80398:	dc400115 	stw	r17,4(sp)
   8039c:	dc400215 	stw	r17,8(sp)
   803a0:	d8000315 	stw	zero,12(sp)
   803a4:	9009883a 	mov	r4,r18
   803a8:	01400434 	movhi	r5,16
   803ac:	29400804 	addi	r5,r5,32
   803b0:	01800234 	movhi	r6,8
   803b4:	3190dd04 	addi	r6,r6,17268
   803b8:	39ffffcc 	andi	r7,r7,65535
   803bc:	00812540 	call	81254 <alt_avalon_sgdma_construct_mem_to_stream_desc>
		//* 
		//* // Set up non-blocking transfer of sgdma transmit descriptor
		alt_avalon_sgdma_do_async_transfer( sgdma_tx_dev, &tx_descriptor );
   803c0:	d12ebc17 	ldw	r4,-17680(gp)
   803c4:	900b883a 	mov	r5,r18
   803c8:	0080f8c0 	call	80f8c <alt_avalon_sgdma_do_async_transfer>
		//* 
		//* // Wait until transmit descriptor transfer is complete
		while (alt_avalon_sgdma_check_descriptor_status(&tx_descriptor) != 0)
   803cc:	01000434 	movhi	r4,16
   803d0:	21000004 	addi	r4,r4,0
   803d4:	00813e40 	call	813e4 <alt_avalon_sgdma_check_descriptor_status>
   803d8:	103ffc1e 	bne	r2,zero,803cc <main+0x1cc>
   803dc:	003fe206 	br	80368 <main+0x168>
		while (alt_avalon_sgdma_check_descriptor_status(&tx_descriptor) != 0)
			;
	}    
	
	return 0;
}
   803e0:	00bfffc4 	movi	r2,-1
   803e4:	dfc00917 	ldw	ra,36(sp)
   803e8:	dc800817 	ldw	r18,32(sp)
   803ec:	dc400717 	ldw	r17,28(sp)
   803f0:	dc000617 	ldw	r16,24(sp)
   803f4:	dec00a04 	addi	sp,sp,40
   803f8:	f800283a 	ret

000803fc <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   803fc:	deffff04 	addi	sp,sp,-4
   80400:	dfc00015 	stw	ra,0(sp)
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   80404:	01000234 	movhi	r4,8
   80408:	211f8904 	addi	r4,r4,32292
   8040c:	00c00234 	movhi	r3,8
   80410:	18d0dd04 	addi	r3,r3,17268

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
   80414:	20c00926 	beq	r4,r3,8043c <alt_load+0x40>
   80418:	01800234 	movhi	r6,8
   8041c:	319f8904 	addi	r6,r6,32292
  {
    while( to != end )
   80420:	19800626 	beq	r3,r6,8043c <alt_load+0x40>
   80424:	01400104 	movi	r5,4
    {
      *to++ = *from++;
   80428:	20800017 	ldw	r2,0(r4)
   8042c:	18800015 	stw	r2,0(r3)
   80430:	1947883a 	add	r3,r3,r5
   80434:	2149883a 	add	r4,r4,r5
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   80438:	30fffb1e 	bne	r6,r3,80428 <alt_load+0x2c>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   8043c:	01000234 	movhi	r4,8
   80440:	21000804 	addi	r4,r4,32
   80444:	00c00234 	movhi	r3,8
   80448:	18c00804 	addi	r3,r3,32

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
   8044c:	20c00926 	beq	r4,r3,80474 <alt_load+0x78>
   80450:	01800234 	movhi	r6,8
   80454:	31805a04 	addi	r6,r6,360
  {
    while( to != end )
   80458:	19800626 	beq	r3,r6,80474 <alt_load+0x78>
   8045c:	01400104 	movi	r5,4
    {
      *to++ = *from++;
   80460:	20800017 	ldw	r2,0(r4)
   80464:	18800015 	stw	r2,0(r3)
   80468:	1947883a 	add	r3,r3,r5
   8046c:	2149883a 	add	r4,r4,r5
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   80470:	30fffb1e 	bne	r6,r3,80460 <alt_load+0x64>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   80474:	01000234 	movhi	r4,8
   80478:	21109704 	addi	r4,r4,16988
   8047c:	00c00234 	movhi	r3,8
   80480:	18d09704 	addi	r3,r3,16988

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
   80484:	20c00926 	beq	r4,r3,804ac <alt_load+0xb0>
   80488:	01800234 	movhi	r6,8
   8048c:	3190dd04 	addi	r6,r6,17268
  {
    while( to != end )
   80490:	19800626 	beq	r3,r6,804ac <alt_load+0xb0>
   80494:	01400104 	movi	r5,4
    {
      *to++ = *from++;
   80498:	20800017 	ldw	r2,0(r4)
   8049c:	18800015 	stw	r2,0(r3)
   804a0:	1947883a 	add	r3,r3,r5
   804a4:	2149883a 	add	r4,r4,r5
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   804a8:	30fffb1e 	bne	r6,r3,80498 <alt_load+0x9c>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   804ac:	00815840 	call	81584 <alt_dcache_flush_all>
  alt_icache_flush_all();
   804b0:	00816700 	call	81670 <alt_icache_flush_all>
}
   804b4:	dfc00017 	ldw	ra,0(sp)
   804b8:	dec00104 	addi	sp,sp,4
   804bc:	f800283a 	ret

000804c0 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   804c0:	defffe04 	addi	sp,sp,-8
   804c4:	dfc00115 	stw	ra,4(sp)
   804c8:	dc000015 	stw	r16,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   804cc:	0009883a 	mov	r4,zero
   804d0:	00807800 	call	80780 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   804d4:	00807140 	call	80714 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   804d8:	01800234 	movhi	r6,8
   804dc:	3190d504 	addi	r6,r6,17236
   804e0:	3009883a 	mov	r4,r6
   804e4:	300b883a 	mov	r5,r6
   804e8:	00818140 	call	81814 <alt_io_redirect>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   804ec:	d12ebf17 	ldw	r4,-17668(gp)
   804f0:	d16ec017 	ldw	r5,-17664(gp)
   804f4:	d1aec117 	ldw	r6,-17660(gp)
   804f8:	00802000 	call	80200 <main>
   804fc:	1021883a 	mov	r16,r2
  close(STDOUT_FILENO);
   80500:	01000044 	movi	r4,1
   80504:	00814a80 	call	814a8 <close>
  exit (result);
   80508:	8009883a 	mov	r4,r16
   8050c:	0081cc40 	call	81cc4 <exit>

00080510 <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
   80510:	defff804 	addi	sp,sp,-32
   80514:	dfc00415 	stw	ra,16(sp)
   80518:	dc800315 	stw	r18,12(sp)
   8051c:	dc400215 	stw	r17,8(sp)
   80520:	dc000115 	stw	r16,4(sp)
   80524:	d9400515 	stw	r5,20(sp)
   80528:	d9800615 	stw	r6,24(sp)
   8052c:	d9c00715 	stw	r7,28(sp)
	va_list args;
	va_start(args, fmt);
   80530:	d8800504 	addi	r2,sp,20
   80534:	d8800015 	stw	r2,0(sp)
   80538:	2023883a 	mov	r17,r4
   8053c:	00005d06 	br	806b4 <alt_printf+0x1a4>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
   80540:	8c400044 	addi	r17,r17,1
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
   80544:	21003fcc 	andi	r4,r4,255
   80548:	2100201c 	xori	r4,r4,128
   8054c:	213fe004 	addi	r4,r4,-128
   80550:	00800944 	movi	r2,37
   80554:	20800226 	beq	r4,r2,80560 <alt_printf+0x50>
        {
            alt_putchar(c);
   80558:	00806ec0 	call	806ec <alt_putchar>
   8055c:	00005506 	br	806b4 <alt_printf+0x1a4>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
   80560:	89400003 	ldbu	r5,0(r17)
   80564:	8c400044 	addi	r17,r17,1
   80568:	29003fcc 	andi	r4,r5,255
   8056c:	2100201c 	xori	r4,r4,128
   80570:	213fe004 	addi	r4,r4,-128
   80574:	20005726 	beq	r4,zero,806d4 <alt_printf+0x1c4>
            {
                if (c == '%')
   80578:	00800944 	movi	r2,37
   8057c:	2080021e 	bne	r4,r2,80588 <alt_printf+0x78>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
   80580:	00806ec0 	call	806ec <alt_putchar>
   80584:	00004b06 	br	806b4 <alt_printf+0x1a4>
                } 
                else if (c == 'c')
   80588:	28c03fcc 	andi	r3,r5,255
   8058c:	18c0201c 	xori	r3,r3,128
   80590:	18ffe004 	addi	r3,r3,-128
   80594:	008018c4 	movi	r2,99
   80598:	1880061e 	bne	r3,r2,805b4 <alt_printf+0xa4>
                {
                    int v = va_arg(args, int);
   8059c:	d8c00017 	ldw	r3,0(sp)
   805a0:	18800104 	addi	r2,r3,4
   805a4:	d8800015 	stw	r2,0(sp)
                    alt_putchar(v);
   805a8:	19000017 	ldw	r4,0(r3)
   805ac:	00806ec0 	call	806ec <alt_putchar>
   805b0:	00004006 	br	806b4 <alt_printf+0x1a4>
                }
                else if (c == 'x')
   805b4:	28c03fcc 	andi	r3,r5,255
   805b8:	18c0201c 	xori	r3,r3,128
   805bc:	18ffe004 	addi	r3,r3,-128
   805c0:	00801e04 	movi	r2,120
   805c4:	1880231e 	bne	r3,r2,80654 <alt_printf+0x144>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
   805c8:	d8c00017 	ldw	r3,0(sp)
   805cc:	18800104 	addi	r2,r3,4
   805d0:	d8800015 	stw	r2,0(sp)
   805d4:	1c800017 	ldw	r18,0(r3)
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
   805d8:	90000326 	beq	r18,zero,805e8 <alt_printf+0xd8>
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
   805dc:	90bc002c 	andhi	r2,r18,61440
   805e0:	10000426 	beq	r2,zero,805f4 <alt_printf+0xe4>
   805e4:	00003906 	br	806cc <alt_printf+0x1bc>
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
                    {
                        alt_putchar('0');
   805e8:	01000c04 	movi	r4,48
   805ec:	00806ec0 	call	806ec <alt_putchar>
   805f0:	00003006 	br	806b4 <alt_printf+0x1a4>
                        continue;
   805f4:	04000704 	movi	r16,28
   805f8:	013fff04 	movi	r4,-4
   805fc:	00c003c4 	movi	r3,15
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;
   80600:	8121883a 	add	r16,r16,r4
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
   80604:	1c04983a 	sll	r2,r3,r16
   80608:	9084703a 	and	r2,r18,r2
   8060c:	103ffc26 	beq	r2,zero,80600 <alt_printf+0xf0>
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
   80610:	80002816 	blt	r16,zero,806b4 <alt_printf+0x1a4>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
   80614:	008003c4 	movi	r2,15
   80618:	1404983a 	sll	r2,r2,r16
   8061c:	9084703a 	and	r2,r18,r2
   80620:	1406d83a 	srl	r3,r2,r16
                        if (digit <= 9)
   80624:	00800244 	movi	r2,9
   80628:	10c00236 	bltu	r2,r3,80634 <alt_printf+0x124>
                            c = '0' + digit;
   8062c:	19000c04 	addi	r4,r3,48
   80630:	00000106 	br	80638 <alt_printf+0x128>
                        else
                            c = 'a' + digit - 10;
   80634:	190015c4 	addi	r4,r3,87
                        alt_putchar(c);
   80638:	21003fcc 	andi	r4,r4,255
   8063c:	2100201c 	xori	r4,r4,128
   80640:	213fe004 	addi	r4,r4,-128
   80644:	00806ec0 	call	806ec <alt_putchar>
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
   80648:	843fff04 	addi	r16,r16,-4
   8064c:	80001916 	blt	r16,zero,806b4 <alt_printf+0x1a4>
   80650:	003ff006 	br	80614 <alt_printf+0x104>
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
   80654:	28c03fcc 	andi	r3,r5,255
   80658:	18c0201c 	xori	r3,r3,128
   8065c:	18ffe004 	addi	r3,r3,-128
   80660:	00801cc4 	movi	r2,115
   80664:	1880131e 	bne	r3,r2,806b4 <alt_printf+0x1a4>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
   80668:	d8800017 	ldw	r2,0(sp)
   8066c:	10c00104 	addi	r3,r2,4
   80670:	d8c00015 	stw	r3,0(sp)
   80674:	14000017 	ldw	r16,0(r2)

                    while(*s)
   80678:	81000003 	ldbu	r4,0(r16)
   8067c:	20803fcc 	andi	r2,r4,255
   80680:	1080201c 	xori	r2,r2,128
   80684:	10bfe004 	addi	r2,r2,-128
   80688:	10000a26 	beq	r2,zero,806b4 <alt_printf+0x1a4>
                      alt_putchar(*s++);
   8068c:	84000044 	addi	r16,r16,1
   80690:	21003fcc 	andi	r4,r4,255
   80694:	2100201c 	xori	r4,r4,128
   80698:	213fe004 	addi	r4,r4,-128
   8069c:	00806ec0 	call	806ec <alt_putchar>
                else if (c == 's')
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);

                    while(*s)
   806a0:	81000003 	ldbu	r4,0(r16)
   806a4:	20803fcc 	andi	r2,r4,255
   806a8:	1080201c 	xori	r2,r2,128
   806ac:	10bfe004 	addi	r2,r2,-128
   806b0:	103ff61e 	bne	r2,zero,8068c <alt_printf+0x17c>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
   806b4:	89000003 	ldbu	r4,0(r17)
   806b8:	20803fcc 	andi	r2,r4,255
   806bc:	1080201c 	xori	r2,r2,128
   806c0:	10bfe004 	addi	r2,r2,-128
   806c4:	103f9e1e 	bne	r2,zero,80540 <alt_printf+0x30>
   806c8:	00000206 	br	806d4 <alt_printf+0x1c4>
            {
                break;
            }
        }
    }
}
   806cc:	04000704 	movi	r16,28
   806d0:	003fd006 	br	80614 <alt_printf+0x104>
   806d4:	dfc00417 	ldw	ra,16(sp)
   806d8:	dc800317 	ldw	r18,12(sp)
   806dc:	dc400217 	ldw	r17,8(sp)
   806e0:	dc000117 	ldw	r16,4(sp)
   806e4:	dec00804 	addi	sp,sp,32
   806e8:	f800283a 	ret

000806ec <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
   806ec:	deffff04 	addi	sp,sp,-4
   806f0:	dfc00015 	stw	ra,0(sp)
    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
        return -1;
    }
    return c;
#else
    return putchar(c);
   806f4:	00800234 	movhi	r2,8
   806f8:	109f8404 	addi	r2,r2,32272
   806fc:	10800017 	ldw	r2,0(r2)
   80700:	11400217 	ldw	r5,8(r2)
   80704:	0081e100 	call	81e10 <putc>
#endif
}
   80708:	dfc00017 	ldw	ra,0(sp)
   8070c:	dec00104 	addi	sp,sp,4
   80710:	f800283a 	ret

00080714 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   80714:	defffe04 	addi	sp,sp,-8
   80718:	dfc00115 	stw	ra,4(sp)
   8071c:	dc000015 	stw	r16,0(sp)
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
   80720:	04000234 	movhi	r16,8
   80724:	8418e704 	addi	r16,r16,25500
   80728:	8009883a 	mov	r4,r16
   8072c:	000b883a 	mov	r5,zero
   80730:	000d883a 	mov	r6,zero
   80734:	00808c40 	call	808c4 <altera_avalon_jtag_uart_init>

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   80738:	813ff604 	addi	r4,r16,-40
   8073c:	01400234 	movhi	r5,8
   80740:	295f7d04 	addi	r5,r5,32244
   80744:	00815900 	call	81590 <alt_dev_llist_insert>
    ALTERA_AVALON_SGDMA_INIT ( SGDMA_RX, sgdma_rx);
   80748:	01000234 	movhi	r4,8
   8074c:	211cf504 	addi	r4,r4,29652
   80750:	000b883a 	mov	r5,zero
   80754:	01800044 	movi	r6,1
   80758:	0080de00 	call	80de0 <alt_avalon_sgdma_init>
    ALTERA_AVALON_SGDMA_INIT ( SGDMA_TX, sgdma_tx);
   8075c:	01000234 	movhi	r4,8
   80760:	211d0104 	addi	r4,r4,29700
   80764:	000b883a 	mov	r5,zero
   80768:	01800084 	movi	r6,2
   8076c:	0080de00 	call	80de0 <alt_avalon_sgdma_init>
    TRIPLE_SPEED_ETHERNET_INIT ( TSE_MAC, tse_mac);
}
   80770:	dfc00117 	ldw	ra,4(sp)
   80774:	dc000017 	ldw	r16,0(sp)
   80778:	dec00204 	addi	sp,sp,8
   8077c:	f800283a 	ret

00080780 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   80780:	deffff04 	addi	sp,sp,-4
   80784:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2, nios2);
   80788:	0081b540 	call	81b54 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   8078c:	00800044 	movi	r2,1
   80790:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   80794:	dfc00017 	ldw	ra,0(sp)
   80798:	dec00104 	addi	sp,sp,4
   8079c:	f800283a 	ret

000807a0 <altera_avalon_jtag_uart_ioctl_fd>:
    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
}

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   807a0:	deffff04 	addi	sp,sp,-4
   807a4:	dfc00015 	stw	ra,0(sp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   807a8:	21000017 	ldw	r4,0(r4)
   807ac:	21000a04 	addi	r4,r4,40
   807b0:	0080a780 	call	80a78 <altera_avalon_jtag_uart_ioctl>
}
   807b4:	dfc00017 	ldw	ra,0(sp)
   807b8:	dec00104 	addi	sp,sp,4
   807bc:	f800283a 	ret

000807c0 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   807c0:	deffff04 	addi	sp,sp,-4
   807c4:	dfc00015 	stw	ra,0(sp)
   807c8:	2005883a 	mov	r2,r4
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   807cc:	21000017 	ldw	r4,0(r4)
   807d0:	21000a04 	addi	r4,r4,40
   807d4:	11400217 	ldw	r5,8(r2)
   807d8:	00808380 	call	80838 <altera_avalon_jtag_uart_close>
}
   807dc:	dfc00017 	ldw	ra,0(sp)
   807e0:	dec00104 	addi	sp,sp,4
   807e4:	f800283a 	ret

000807e8 <altera_avalon_jtag_uart_write_fd>:
      fd->fd_flags);
}

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   807e8:	deffff04 	addi	sp,sp,-4
   807ec:	dfc00015 	stw	ra,0(sp)
   807f0:	2005883a 	mov	r2,r4
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   807f4:	21000017 	ldw	r4,0(r4)
   807f8:	21000a04 	addi	r4,r4,40
   807fc:	11c00217 	ldw	r7,8(r2)
   80800:	0080c540 	call	80c54 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   80804:	dfc00017 	ldw	ra,0(sp)
   80808:	dec00104 	addi	sp,sp,4
   8080c:	f800283a 	ret

00080810 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   80810:	deffff04 	addi	sp,sp,-4
   80814:	dfc00015 	stw	ra,0(sp)
   80818:	2005883a 	mov	r2,r4
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   8081c:	21000017 	ldw	r4,0(r4)
   80820:	21000a04 	addi	r4,r4,40
   80824:	11c00217 	ldw	r7,8(r2)
   80828:	0080aec0 	call	80aec <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   8082c:	dfc00017 	ldw	ra,0(sp)
   80830:	dec00104 	addi	sp,sp,4
   80834:	f800283a 	ret

00080838 <altera_avalon_jtag_uart_close>:
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   80838:	21800c17 	ldw	r6,48(r4)
   8083c:	2950000c 	andi	r5,r5,16384
   80840:	280b003a 	cmpeq	r5,r5,zero
   80844:	00000306 	br	80854 <altera_avalon_jtag_uart_close+0x1c>
    if (flags & O_NONBLOCK) {
   80848:	2800021e 	bne	r5,zero,80854 <altera_avalon_jtag_uart_close+0x1c>
   8084c:	00bffd44 	movi	r2,-11
   80850:	f800283a 	ret
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   80854:	20800d17 	ldw	r2,52(r4)
   80858:	11800326 	beq	r2,r6,80868 <altera_avalon_jtag_uart_close+0x30>
   8085c:	20c00917 	ldw	r3,36(r4)
   80860:	20800117 	ldw	r2,4(r4)
   80864:	18bff836 	bltu	r3,r2,80848 <altera_avalon_jtag_uart_close+0x10>
   80868:	0005883a 	mov	r2,zero
      return -EWOULDBLOCK; 
    }
  }

  return 0;
}
   8086c:	f800283a 	ret

00080870 <altera_avalon_jtag_uart_timeout>:
static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   80870:	20800017 	ldw	r2,0(r4)
   80874:	10c00104 	addi	r3,r2,4
   80878:	18800037 	ldwio	r2,0(r3)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   8087c:	01410004 	movi	r5,1024
   80880:	1144703a 	and	r2,r2,r5
   80884:	10000526 	beq	r2,zero,8089c <altera_avalon_jtag_uart_timeout+0x2c>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   80888:	20800817 	ldw	r2,32(r4)
   8088c:	1144b03a 	or	r2,r2,r5
   80890:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
   80894:	20000915 	stw	zero,36(r4)
   80898:	00000606 	br	808b4 <altera_avalon_jtag_uart_timeout+0x44>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   8089c:	20c00917 	ldw	r3,36(r4)
   808a0:	00a00034 	movhi	r2,32768
   808a4:	10bfff04 	addi	r2,r2,-4
   808a8:	10c00236 	bltu	r2,r3,808b4 <altera_avalon_jtag_uart_timeout+0x44>
    sp->host_inactive++;
   808ac:	18800044 	addi	r2,r3,1
   808b0:	20800915 	stw	r2,36(r4)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   808b4:	00800274 	movhi	r2,9
   808b8:	10ae3c04 	addi	r2,r2,-18192
   808bc:	10800017 	ldw	r2,0(r2)
   808c0:	f800283a 	ret

000808c4 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   808c4:	defffd04 	addi	sp,sp,-12
   808c8:	dfc00215 	stw	ra,8(sp)
   808cc:	dc000115 	stw	r16,4(sp)
   808d0:	2021883a 	mov	r16,r4
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   808d4:	00c00044 	movi	r3,1
   808d8:	20c00815 	stw	r3,32(r4)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   808dc:	20800017 	ldw	r2,0(r4)
   808e0:	10c00135 	stwio	r3,4(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   808e4:	d8000015 	stw	zero,0(sp)
   808e8:	2809883a 	mov	r4,r5
   808ec:	300b883a 	mov	r5,r6
   808f0:	01800234 	movhi	r6,8
   808f4:	31825104 	addi	r6,r6,2372
   808f8:	800f883a 	mov	r7,r16
   808fc:	00817280 	call	81728 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   80900:	80000915 	stw	zero,36(r16)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   80904:	81000204 	addi	r4,r16,8
   80908:	00800274 	movhi	r2,9
   8090c:	10ae3c04 	addi	r2,r2,-18192
   80910:	11400017 	ldw	r5,0(r2)
   80914:	01800234 	movhi	r6,8
   80918:	31821c04 	addi	r6,r6,2160
   8091c:	800f883a 	mov	r7,r16
   80920:	00814140 	call	81414 <alt_alarm_start>
   80924:	1000030e 	bge	r2,zero,80934 <altera_avalon_jtag_uart_init+0x70>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   80928:	00a00034 	movhi	r2,32768
   8092c:	10bfffc4 	addi	r2,r2,-1
   80930:	80800115 	stw	r2,4(r16)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   80934:	dfc00217 	ldw	ra,8(sp)
   80938:	dc000117 	ldw	r16,4(sp)
   8093c:	dec00304 	addi	sp,sp,12
   80940:	f800283a 	ret

00080944 <altera_avalon_jtag_uart_irq>:
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
  unsigned int base = sp->base;
   80944:	22000017 	ldw	r8,0(r4)
   80948:	03800104 	movi	r14,4
   8094c:	4399883a 	add	r12,r8,r14
   80950:	037ffff4 	movhi	r13,65535
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   80954:	62c00037 	ldwio	r11,0(r12)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   80958:	5880c00c 	andi	r2,r11,768
   8095c:	10004526 	beq	r2,zero,80a74 <altera_avalon_jtag_uart_irq+0x130>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   80960:	5880400c 	andi	r2,r11,256
   80964:	10002126 	beq	r2,zero,809ec <altera_avalon_jtag_uart_irq+0xa8>
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   80968:	20800a17 	ldw	r2,40(r4)
        if (next == sp->rx_out)
   8096c:	10800044 	addi	r2,r2,1
   80970:	1081ffcc 	andi	r2,r2,2047
   80974:	20c00b17 	ldw	r3,44(r4)
   80978:	10c01626 	beq	r2,r3,809d4 <altera_avalon_jtag_uart_irq+0x90>
   8097c:	02a00014 	movui	r10,32768
   80980:	02400e04 	movi	r9,56
   80984:	01c00044 	movi	r7,1
   80988:	0181ffc4 	movi	r6,2047
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   8098c:	41400037 	ldwio	r5,0(r8)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   80990:	2a84703a 	and	r2,r5,r10
   80994:	10000d26 	beq	r2,zero,809cc <altera_avalon_jtag_uart_irq+0x88>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   80998:	20800a17 	ldw	r2,40(r4)
   8099c:	1105883a 	add	r2,r2,r4
   809a0:	1245883a 	add	r2,r2,r9
   809a4:	11400005 	stb	r5,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   809a8:	20800a17 	ldw	r2,40(r4)
   809ac:	11c5883a 	add	r2,r2,r7
   809b0:	1184703a 	and	r2,r2,r6
   809b4:	20800a15 	stw	r2,40(r4)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   809b8:	20800a17 	ldw	r2,40(r4)
        if (next == sp->rx_out)
   809bc:	11c5883a 	add	r2,r2,r7
   809c0:	1184703a 	and	r2,r2,r6
   809c4:	20c00b17 	ldw	r3,44(r4)
   809c8:	10fff01e 	bne	r2,r3,8098c <altera_avalon_jtag_uart_irq+0x48>

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   809cc:	2b44703a 	and	r2,r5,r13
   809d0:	10000626 	beq	r2,zero,809ec <altera_avalon_jtag_uart_irq+0xa8>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   809d4:	20800817 	ldw	r2,32(r4)
   809d8:	00ffff84 	movi	r3,-2
   809dc:	10c4703a 	and	r2,r2,r3
   809e0:	20800815 	stw	r2,32(r4)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   809e4:	60800035 	stwio	r2,0(r12)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   809e8:	60800037 	ldwio	r2,0(r12)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   809ec:	5880800c 	andi	r2,r11,512
   809f0:	103fd826 	beq	r2,zero,80954 <altera_avalon_jtag_uart_irq+0x10>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   809f4:	5b44703a 	and	r2,r11,r13
   809f8:	100ad43a 	srli	r5,r2,16

      while (space > 0 && sp->tx_out != sp->tx_in)
   809fc:	283fd526 	beq	r5,zero,80954 <altera_avalon_jtag_uart_irq+0x10>
   80a00:	20c00d17 	ldw	r3,52(r4)
   80a04:	20800c17 	ldw	r2,48(r4)
   80a08:	18801126 	beq	r3,r2,80a50 <altera_avalon_jtag_uart_irq+0x10c>
   80a0c:	02420e04 	movi	r9,2104
   80a10:	01800044 	movi	r6,1
   80a14:	01c1ffc4 	movi	r7,2047
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   80a18:	20800d17 	ldw	r2,52(r4)
   80a1c:	1105883a 	add	r2,r2,r4
   80a20:	1245883a 	add	r2,r2,r9
   80a24:	10800007 	ldb	r2,0(r2)
   80a28:	40800035 	stwio	r2,0(r8)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   80a2c:	20800d17 	ldw	r2,52(r4)
   80a30:	1185883a 	add	r2,r2,r6
   80a34:	11c4703a 	and	r2,r2,r7
   80a38:	20800d15 	stw	r2,52(r4)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   80a3c:	298bc83a 	sub	r5,r5,r6
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   80a40:	283fc426 	beq	r5,zero,80954 <altera_avalon_jtag_uart_irq+0x10>
   80a44:	20c00d17 	ldw	r3,52(r4)
   80a48:	20800c17 	ldw	r2,48(r4)
   80a4c:	18bff21e 	bne	r3,r2,80a18 <altera_avalon_jtag_uart_irq+0xd4>
      }

      if (space > 0)
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   80a50:	20c00817 	ldw	r3,32(r4)
   80a54:	00bfff44 	movi	r2,-3
   80a58:	1886703a 	and	r3,r3,r2
   80a5c:	20c00815 	stw	r3,32(r4)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   80a60:	20800017 	ldw	r2,0(r4)
   80a64:	1385883a 	add	r2,r2,r14
   80a68:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   80a6c:	60800037 	ldwio	r2,0(r12)
   80a70:	003fb806 	br	80954 <altera_avalon_jtag_uart_irq+0x10>
   80a74:	f800283a 	ret

00080a78 <altera_avalon_jtag_uart_ioctl>:
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
  int rc = -ENOTTY;

  switch (req)
   80a78:	009a8044 	movi	r2,27137
   80a7c:	28800326 	beq	r5,r2,80a8c <altera_avalon_jtag_uart_ioctl+0x14>
   80a80:	009a8084 	movi	r2,27138
   80a84:	2880171e 	bne	r5,r2,80ae4 <altera_avalon_jtag_uart_ioctl+0x6c>
   80a88:	00000d06 	br	80ac0 <altera_avalon_jtag_uart_ioctl+0x48>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   80a8c:	20c00117 	ldw	r3,4(r4)
   80a90:	00a00034 	movhi	r2,32768
   80a94:	10bfffc4 	addi	r2,r2,-1
   80a98:	18801226 	beq	r3,r2,80ae4 <altera_avalon_jtag_uart_ioctl+0x6c>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   80a9c:	31800017 	ldw	r6,0(r6)
   80aa0:	30ffff84 	addi	r3,r6,-2
   80aa4:	10bfff44 	addi	r2,r2,-3
   80aa8:	10c0022e 	bgeu	r2,r3,80ab4 <altera_avalon_jtag_uart_ioctl+0x3c>
   80aac:	01a00034 	movhi	r6,32768
   80ab0:	31bfff84 	addi	r6,r6,-2
   80ab4:	21800115 	stw	r6,4(r4)
   80ab8:	0005883a 	mov	r2,zero
   80abc:	f800283a 	ret
    }
    break;

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   80ac0:	20c00117 	ldw	r3,4(r4)
   80ac4:	00a00034 	movhi	r2,32768
   80ac8:	10bfffc4 	addi	r2,r2,-1
   80acc:	18800526 	beq	r3,r2,80ae4 <altera_avalon_jtag_uart_ioctl+0x6c>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   80ad0:	20800917 	ldw	r2,36(r4)
   80ad4:	10c5803a 	cmpltu	r2,r2,r3
   80ad8:	30800015 	stw	r2,0(r6)
   80adc:	0005883a 	mov	r2,zero
   80ae0:	f800283a 	ret
   80ae4:	00bff9c4 	movi	r2,-25
  default:
    break;
  }

  return rc;
}
   80ae8:	f800283a 	ret

00080aec <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   80aec:	defff604 	addi	sp,sp,-40
   80af0:	dfc00915 	stw	ra,36(sp)
   80af4:	df000815 	stw	fp,32(sp)
   80af8:	ddc00715 	stw	r23,28(sp)
   80afc:	dd800615 	stw	r22,24(sp)
   80b00:	dd400515 	stw	r21,20(sp)
   80b04:	dd000415 	stw	r20,16(sp)
   80b08:	dcc00315 	stw	r19,12(sp)
   80b0c:	dc800215 	stw	r18,8(sp)
   80b10:	dc400115 	stw	r17,4(sp)
   80b14:	dc000015 	stw	r16,0(sp)
   80b18:	2025883a 	mov	r18,r4
   80b1c:	282f883a 	mov	r23,r5
   80b20:	3027883a 	mov	r19,r6
   80b24:	3839883a 	mov	fp,r7
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   80b28:	0180220e 	bge	zero,r6,80bb4 <altera_avalon_jtag_uart_read+0xc8>
   80b2c:	b82b883a 	mov	r21,r23
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   80b30:	95800a17 	ldw	r22,40(r18)
      out = sp->rx_out;
   80b34:	94400b17 	ldw	r17,44(r18)

      if (in >= out)
   80b38:	b4400236 	bltu	r22,r17,80b44 <altera_avalon_jtag_uart_read+0x58>
        n = in - out;
   80b3c:	b461c83a 	sub	r16,r22,r17
   80b40:	00000206 	br	80b4c <altera_avalon_jtag_uart_read+0x60>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   80b44:	00820004 	movi	r2,2048
   80b48:	1461c83a 	sub	r16,r2,r17

      if (n == 0)
   80b4c:	80000d26 	beq	r16,zero,80b84 <altera_avalon_jtag_uart_read+0x98>
        break; /* No more data available */

      if (n > space)
   80b50:	9829883a 	mov	r20,r19
   80b54:	9c001d36 	bltu	r19,r16,80bcc <altera_avalon_jtag_uart_read+0xe0>
        n = space;

      memcpy(ptr, sp->rx_buf + out, n);
   80b58:	91400e04 	addi	r5,r18,56
   80b5c:	a809883a 	mov	r4,r21
   80b60:	2c4b883a 	add	r5,r5,r17
   80b64:	800d883a 	mov	r6,r16
   80b68:	0081d700 	call	81d70 <memcpy>
      ptr   += n;
   80b6c:	ac2b883a 	add	r21,r21,r16
      space -= n;
   80b70:	9c27c83a 	sub	r19,r19,r16

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   80b74:	8445883a 	add	r2,r16,r17
   80b78:	1081ffcc 	andi	r2,r2,2047
   80b7c:	90800b15 	stw	r2,44(r18)
    }
    while (space > 0);
   80b80:	04ffeb16 	blt	zero,r19,80b30 <altera_avalon_jtag_uart_read+0x44>

    /* If we read any data then return it */
    if (ptr != buffer)
   80b84:	adc01c1e 	bne	r21,r23,80bf8 <altera_avalon_jtag_uart_read+0x10c>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   80b88:	e090000c 	andi	r2,fp,16384
   80b8c:	10000d1e 	bne	r2,zero,80bc4 <altera_avalon_jtag_uart_read+0xd8>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   80b90:	90800a17 	ldw	r2,40(r18)
   80b94:	b080031e 	bne	r22,r2,80ba4 <altera_avalon_jtag_uart_read+0xb8>
   80b98:	90c00917 	ldw	r3,36(r18)
   80b9c:	90800117 	ldw	r2,4(r18)
   80ba0:	18bffb36 	bltu	r3,r2,80b90 <altera_avalon_jtag_uart_read+0xa4>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   80ba4:	90800a17 	ldw	r2,40(r18)
   80ba8:	b0800426 	beq	r22,r2,80bbc <altera_avalon_jtag_uart_read+0xd0>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   80bac:	04c0030e 	bge	zero,r19,80bbc <altera_avalon_jtag_uart_read+0xd0>
   80bb0:	003fde06 	br	80b2c <altera_avalon_jtag_uart_read+0x40>
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    return ptr - buffer;
  else if (flags & O_NONBLOCK)
   80bb4:	3890000c 	andi	r2,r7,16384
   80bb8:	1000021e 	bne	r2,zero,80bc4 <altera_avalon_jtag_uart_read+0xd8>
   80bbc:	00bffec4 	movi	r2,-5
   80bc0:	00001806 	br	80c24 <altera_avalon_jtag_uart_read+0x138>
   80bc4:	00bffd44 	movi	r2,-11
   80bc8:	00001606 	br	80c24 <altera_avalon_jtag_uart_read+0x138>
        break; /* No more data available */

      if (n > space)
        n = space;

      memcpy(ptr, sp->rx_buf + out, n);
   80bcc:	91400e04 	addi	r5,r18,56
   80bd0:	a809883a 	mov	r4,r21
   80bd4:	894b883a 	add	r5,r17,r5
   80bd8:	980d883a 	mov	r6,r19
   80bdc:	0081d700 	call	81d70 <memcpy>
      ptr   += n;
   80be0:	aceb883a 	add	r21,r21,r19
      space -= n;
   80be4:	0027883a 	mov	r19,zero

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   80be8:	a445883a 	add	r2,r20,r17
   80bec:	1081ffcc 	andi	r2,r2,2047
   80bf0:	90800b15 	stw	r2,44(r18)
   80bf4:	003fe306 	br	80b84 <altera_avalon_jtag_uart_read+0x98>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   80bf8:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   80bfc:	00bfff84 	movi	r2,-2
   80c00:	2084703a 	and	r2,r4,r2
   80c04:	1001703a 	wrctl	status,r2

  if (ptr != buffer)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   80c08:	90800817 	ldw	r2,32(r18)
   80c0c:	10800054 	ori	r2,r2,1
   80c10:	90800815 	stw	r2,32(r18)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   80c14:	90c00017 	ldw	r3,0(r18)
   80c18:	18800135 	stwio	r2,4(r3)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   80c1c:	2001703a 	wrctl	status,r4
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    return ptr - buffer;
   80c20:	adc5c83a 	sub	r2,r21,r23
  else if (flags & O_NONBLOCK)
    return -EWOULDBLOCK;
  else
    return -EIO;
}
   80c24:	dfc00917 	ldw	ra,36(sp)
   80c28:	df000817 	ldw	fp,32(sp)
   80c2c:	ddc00717 	ldw	r23,28(sp)
   80c30:	dd800617 	ldw	r22,24(sp)
   80c34:	dd400517 	ldw	r21,20(sp)
   80c38:	dd000417 	ldw	r20,16(sp)
   80c3c:	dcc00317 	ldw	r19,12(sp)
   80c40:	dc800217 	ldw	r18,8(sp)
   80c44:	dc400117 	ldw	r17,4(sp)
   80c48:	dc000017 	ldw	r16,0(sp)
   80c4c:	dec00a04 	addi	sp,sp,40
   80c50:	f800283a 	ret

00080c54 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   80c54:	defff804 	addi	sp,sp,-32
   80c58:	dfc00715 	stw	ra,28(sp)
   80c5c:	dd800615 	stw	r22,24(sp)
   80c60:	dd400515 	stw	r21,20(sp)
   80c64:	dd000415 	stw	r20,16(sp)
   80c68:	dcc00315 	stw	r19,12(sp)
   80c6c:	dc800215 	stw	r18,8(sp)
   80c70:	dc400115 	stw	r17,4(sp)
   80c74:	dc000015 	stw	r16,0(sp)
   80c78:	2021883a 	mov	r16,r4
   80c7c:	282d883a 	mov	r22,r5
   80c80:	3011883a 	mov	r8,r6
   80c84:	382b883a 	mov	r21,r7
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   80c88:	01800616 	blt	zero,r6,80ca4 <altera_avalon_jtag_uart_write+0x50>
   80c8c:	2829883a 	mov	r20,r5
   80c90:	00002106 	br	80d18 <altera_avalon_jtag_uart_write+0xc4>
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
    return ptr - start;
   80c94:	a585c83a 	sub	r2,r20,r22
   80c98:	00004306 	br	80da8 <altera_avalon_jtag_uart_write+0x154>
  else if (flags & O_NONBLOCK)
   80c9c:	00bffd44 	movi	r2,-11
   80ca0:	00004106 	br	80da8 <altera_avalon_jtag_uart_write+0x154>
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   80ca4:	2829883a 	mov	r20,r5
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   80ca8:	84800c17 	ldw	r18,48(r16)
      out = sp->tx_out;
   80cac:	81400d17 	ldw	r5,52(r16)

      if (in < out)
   80cb0:	9140032e 	bgeu	r18,r5,80cc0 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   80cb4:	2c85c83a 	sub	r2,r5,r18
   80cb8:	11bfffc4 	addi	r6,r2,-1
   80cbc:	00000606 	br	80cd8 <altera_avalon_jtag_uart_write+0x84>
      else if (out > 0)
   80cc0:	28000326 	beq	r5,zero,80cd0 <altera_avalon_jtag_uart_write+0x7c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   80cc4:	00820004 	movi	r2,2048
   80cc8:	148dc83a 	sub	r6,r2,r18
   80ccc:	00000206 	br	80cd8 <altera_avalon_jtag_uart_write+0x84>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   80cd0:	0081ffc4 	movi	r2,2047
   80cd4:	148dc83a 	sub	r6,r2,r18

      if (n == 0)
   80cd8:	30002626 	beq	r6,zero,80d74 <altera_avalon_jtag_uart_write+0x120>
        break;

      if (n > count)
   80cdc:	4027883a 	mov	r19,r8
   80ce0:	3023883a 	mov	r17,r6
   80ce4:	4180012e 	bgeu	r8,r6,80cec <altera_avalon_jtag_uart_write+0x98>
   80ce8:	4023883a 	mov	r17,r8
        n = count;

      memcpy(sp->tx_buf + in, ptr, n);
   80cec:	81020e04 	addi	r4,r16,2104
   80cf0:	2489883a 	add	r4,r4,r18
   80cf4:	a00b883a 	mov	r5,r20
   80cf8:	880d883a 	mov	r6,r17
   80cfc:	0081d700 	call	81d70 <memcpy>
      ptr   += n;
   80d00:	a469883a 	add	r20,r20,r17
      count -= n;
   80d04:	9c51c83a 	sub	r8,r19,r17

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   80d08:	9445883a 	add	r2,r18,r17
   80d0c:	1081ffcc 	andi	r2,r2,2047
   80d10:	80800c15 	stw	r2,48(r16)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   80d14:	023fe416 	blt	zero,r8,80ca8 <altera_avalon_jtag_uart_write+0x54>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   80d18:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   80d1c:	00bfff84 	movi	r2,-2
   80d20:	2084703a 	and	r2,r4,r2
   80d24:	1001703a 	wrctl	status,r2
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   80d28:	80800817 	ldw	r2,32(r16)
   80d2c:	10800094 	ori	r2,r2,2
   80d30:	80800815 	stw	r2,32(r16)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   80d34:	80c00017 	ldw	r3,0(r16)
   80d38:	18800135 	stwio	r2,4(r3)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   80d3c:	2001703a 	wrctl	status,r4
   80d40:	00000706 	br	80d60 <altera_avalon_jtag_uart_write+0x10c>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   80d44:	80800d17 	ldw	r2,52(r16)
   80d48:	1140031e 	bne	r2,r5,80d58 <altera_avalon_jtag_uart_write+0x104>
   80d4c:	80c00917 	ldw	r3,36(r16)
   80d50:	80800117 	ldw	r2,4(r16)
   80d54:	18bffb36 	bltu	r3,r2,80d44 <altera_avalon_jtag_uart_write+0xf0>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
   80d58:	80800d17 	ldw	r2,52(r16)
   80d5c:	117fed1e 	bne	r2,r5,80d14 <altera_avalon_jtag_uart_write+0xc0>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   80d60:	b53fcc1e 	bne	r22,r20,80c94 <altera_avalon_jtag_uart_write+0x40>
    return ptr - start;
  else if (flags & O_NONBLOCK)
   80d64:	a890000c 	andi	r2,r21,16384
   80d68:	103fcc1e 	bne	r2,zero,80c9c <altera_avalon_jtag_uart_write+0x48>
   80d6c:	00bffec4 	movi	r2,-5
   80d70:	00000d06 	br	80da8 <altera_avalon_jtag_uart_write+0x154>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   80d74:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   80d78:	00bfff84 	movi	r2,-2
   80d7c:	2084703a 	and	r2,r4,r2
   80d80:	1001703a 	wrctl	status,r2
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   80d84:	80800817 	ldw	r2,32(r16)
   80d88:	10800094 	ori	r2,r2,2
   80d8c:	80800815 	stw	r2,32(r16)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   80d90:	80c00017 	ldw	r3,0(r16)
   80d94:	18800135 	stwio	r2,4(r3)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   80d98:	2001703a 	wrctl	status,r4
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
   80d9c:	a890000c 	andi	r2,r21,16384
   80da0:	103fe826 	beq	r2,zero,80d44 <altera_avalon_jtag_uart_write+0xf0>
   80da4:	003fee06 	br	80d60 <altera_avalon_jtag_uart_write+0x10c>
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
}
   80da8:	dfc00717 	ldw	ra,28(sp)
   80dac:	dd800617 	ldw	r22,24(sp)
   80db0:	dd400517 	ldw	r21,20(sp)
   80db4:	dd000417 	ldw	r20,16(sp)
   80db8:	dcc00317 	ldw	r19,12(sp)
   80dbc:	dc800217 	ldw	r18,8(sp)
   80dc0:	dc400117 	ldw	r17,4(sp)
   80dc4:	dc000017 	ldw	r16,0(sp)
   80dc8:	dec00804 	addi	sp,sp,32
   80dcc:	f800283a 	ret

00080dd0 <alt_avalon_sgdma_register_callback>:
  alt_sgdma_dev *dev,
  alt_avalon_sgdma_callback callback,
  alt_u32 chain_control,
  void *context)
{
  dev->callback         = callback;
   80dd0:	21400915 	stw	r5,36(r4)
  dev->callback_context = context;
   80dd4:	21c00a15 	stw	r7,40(r4)
  dev->chain_control    = chain_control;
   80dd8:	21800b15 	stw	r6,44(r4)
}
   80ddc:	f800283a 	ret

00080de0 <alt_avalon_sgdma_init>:
 * This routine disables interrupts, future descriptor processing,
 * registers a specific instance of the device with the HAL,
 * and installs an interrupt handler for the device.
 */
void alt_avalon_sgdma_init (alt_sgdma_dev *dev, alt_u32 ic_id, alt_u32 irq)
{
   80de0:	defffb04 	addi	sp,sp,-20
   80de4:	dfc00415 	stw	ra,16(sp)
   80de8:	dc800315 	stw	r18,12(sp)
   80dec:	dc400215 	stw	r17,8(sp)
   80df0:	dc000115 	stw	r16,4(sp)
   80df4:	2021883a 	mov	r16,r4
   80df8:	2823883a 	mov	r17,r5
   80dfc:	3025883a 	mov	r18,r6

  /* 
   * Halt any current transactions (reset the device)
   * SW reset is written twice per SGDMA documentation 
   */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base,
   80e00:	00c00404 	movi	r3,16
   80e04:	20800317 	ldw	r2,12(r4)
   80e08:	10c5883a 	add	r2,r2,r3
   80e0c:	01400074 	movhi	r5,1
   80e10:	11400035 	stwio	r5,0(r2)
    ALTERA_AVALON_SGDMA_CONTROL_SOFTWARERESET_MSK);
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base,
   80e14:	20800317 	ldw	r2,12(r4)
   80e18:	10c5883a 	add	r2,r2,r3
   80e1c:	11400035 	stwio	r5,0(r2)

  /*
   * Disable interrupts, halt future descriptor processing,
   * and clear status register content
   */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, 0x0);
   80e20:	20800317 	ldw	r2,12(r4)
   80e24:	10c5883a 	add	r2,r2,r3
   80e28:	10000035 	stwio	zero,0(r2)
  IOWR_ALTERA_AVALON_SGDMA_STATUS(dev->base, 0xFF);
   80e2c:	20c00317 	ldw	r3,12(r4)
   80e30:	00803fc4 	movi	r2,255
   80e34:	18800035 	stwio	r2,0(r3)

  /* Register this instance of the SGDMA controller with HAL */
  alt_dev_llist_insert((alt_dev_llist*) dev, &alt_sgdma_list);
   80e38:	d1600004 	addi	r5,gp,-32768
   80e3c:	00815900 	call	81590 <alt_dev_llist_insert>

  /* Install IRQ handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(ic_id, irq, alt_avalon_sgdma_irq, dev, 0x0);
   80e40:	d8000015 	stw	zero,0(sp)
   80e44:	8809883a 	mov	r4,r17
   80e48:	900b883a 	mov	r5,r18
   80e4c:	01800234 	movhi	r6,8
   80e50:	31840a04 	addi	r6,r6,4136
   80e54:	800f883a 	mov	r7,r16
   80e58:	00817280 	call	81728 <alt_ic_isr_register>
#else
  alt_irq_register(irq, dev, alt_avalon_sgdma_irq);
#endif  
}
   80e5c:	dfc00417 	ldw	ra,16(sp)
   80e60:	dc800317 	ldw	r18,12(sp)
   80e64:	dc400217 	ldw	r17,8(sp)
   80e68:	dc000117 	ldw	r16,4(sp)
   80e6c:	dec00504 	addi	sp,sp,20
   80e70:	f800283a 	ret

00080e74 <alt_avalon_sgdma_disable_desc_poll>:
 */
void alt_avalon_sgdma_disable_desc_poll(alt_sgdma_dev *dev)
{
  alt_u32 control;

  control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
   80e74:	20800317 	ldw	r2,12(r4)
   80e78:	10800404 	addi	r2,r2,16
   80e7c:	10c00037 	ldwio	r3,0(r2)
  control &= ~ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_EN_MSK;

  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, control);
   80e80:	013fff34 	movhi	r4,65532
   80e84:	213fffc4 	addi	r4,r4,-1
   80e88:	1906703a 	and	r3,r3,r4
   80e8c:	10c00035 	stwio	r3,0(r2)
  
  return;
}
   80e90:	f800283a 	ret

00080e94 <alt_avalon_sgdma_enable_desc_poll>:
 */
void alt_avalon_sgdma_enable_desc_poll(alt_sgdma_dev *dev, alt_u32 frequency)
{
  alt_u32 control;

  control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
   80e94:	21000317 	ldw	r4,12(r4)
   80e98:	21000404 	addi	r4,r4,16
   80e9c:	20c00037 	ldwio	r3,0(r4)
  /* Clear descriptor polling frequency */
  control &= ~ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_FREQ_MSK;
   80ea0:	00a00434 	movhi	r2,32784
   80ea4:	10bfffc4 	addi	r2,r2,-1
   80ea8:	1886703a 	and	r3,r3,r2
  
  control |= ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_EN_MSK | 
            ((frequency << ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_FREQ_OFST) & 
            ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_FREQ_MSK);
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, control);
   80eac:	280a953a 	slli	r5,r5,20
   80eb0:	295ffc2c 	andhi	r5,r5,32752
   80eb4:	29400134 	orhi	r5,r5,4
   80eb8:	1946b03a 	or	r3,r3,r5
   80ebc:	20c00035 	stwio	r3,0(r4)
  
  return;
}
   80ec0:	f800283a 	ret

00080ec4 <alt_avalon_sgdma_stop>:
 */
void alt_avalon_sgdma_stop(alt_sgdma_dev *dev)
{
  alt_u32 control;

  control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
   80ec4:	20800317 	ldw	r2,12(r4)
   80ec8:	10800404 	addi	r2,r2,16
   80ecc:	10c00037 	ldwio	r3,0(r2)
  control &= ~ALTERA_AVALON_SGDMA_CONTROL_RUN_MSK;
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, control);
   80ed0:	013ff7c4 	movi	r4,-33
   80ed4:	1906703a 	and	r3,r3,r4
   80ed8:	10c00035 	stwio	r3,0(r2)
}
   80edc:	f800283a 	ret

00080ee0 <alt_avalon_sgdma_start>:
 */
void alt_avalon_sgdma_start(alt_sgdma_dev *dev)
{
  alt_u32 control;

  control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
   80ee0:	20c00317 	ldw	r3,12(r4)
   80ee4:	18c00404 	addi	r3,r3,16
   80ee8:	18800037 	ldwio	r2,0(r3)
  control |= ALTERA_AVALON_SGDMA_CONTROL_RUN_MSK;
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, control);
   80eec:	10800814 	ori	r2,r2,32
   80ef0:	18800035 	stwio	r2,0(r3)
}
   80ef4:	f800283a 	ret

00080ef8 <alt_avalon_sgdma_do_sync_transfer>:
 * - status: Content of SGDMA status register.
 */
alt_u8 alt_avalon_sgdma_do_sync_transfer(
  alt_sgdma_dev *dev,
  alt_sgdma_descriptor *desc)
{
   80ef8:	200f883a 	mov	r7,r4
   80efc:	21000317 	ldw	r4,12(r4)
   80f00:	01800404 	movi	r6,16
  alt_u8 status;

  /* Wait for any pending transfers to complete */
  while ( (IORD_ALTERA_AVALON_SGDMA_STATUS(dev->base) &
   80f04:	20800037 	ldwio	r2,0(r4)
   80f08:	1184703a 	and	r2,r2,r6
   80f0c:	103ffd1e 	bne	r2,zero,80f04 <alt_avalon_sgdma_do_sync_transfer+0xc>
           ALTERA_AVALON_SGDMA_STATUS_BUSY_MSK) );


  /* Clear Run */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base,
   80f10:	2189883a 	add	r4,r4,r6
   80f14:	20800037 	ldwio	r2,0(r4)
   80f18:	00fff7c4 	movi	r3,-33
   80f1c:	10c4703a 	and	r2,r2,r3
   80f20:	20800035 	stwio	r2,0(r4)

  /*
   * Clear any (previous) status register information
   * that might occlude our error checking later.
   */
  IOWR_ALTERA_AVALON_SGDMA_STATUS(dev->base, 0xFF);
   80f24:	38c00317 	ldw	r3,12(r7)
   80f28:	00803fc4 	movi	r2,255
   80f2c:	18800035 	stwio	r2,0(r3)

  /* Point the controller at the descriptor */
  IOWR_ALTERA_AVALON_SGDMA_NEXT_DESC_POINTER(dev->base, (alt_u32) desc);
   80f30:	38800317 	ldw	r2,12(r7)
   80f34:	11400835 	stwio	r5,32(r2)
   * Set up SGDMA controller to:
   * - Disable interrupt generation
   * - Run once a valid descriptor is written to controller
   * - Stop on an error with any particular descriptor
   */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base,
   80f38:	38c00317 	ldw	r3,12(r7)
   80f3c:	1987883a 	add	r3,r3,r6
   80f40:	18800037 	ldwio	r2,0(r3)
   80f44:	10801814 	ori	r2,r2,96
   80f48:	18800035 	stwio	r2,0(r3)
   80f4c:	39000317 	ldw	r4,12(r7)
   80f50:	00c00404 	movi	r3,16
    (ALTERA_AVALON_SGDMA_CONTROL_RUN_MSK |
     ALTERA_AVALON_SGDMA_CONTROL_STOP_DMA_ER_MSK | 
     IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base)) );

  /* Wait for the descriptor (chain) to complete */
  while ( (IORD_ALTERA_AVALON_SGDMA_STATUS(dev->base) &
   80f54:	20800037 	ldwio	r2,0(r4)
   80f58:	10c4703a 	and	r2,r2,r3
   80f5c:	103ffd1e 	bne	r2,zero,80f54 <alt_avalon_sgdma_do_sync_transfer+0x5c>
           ALTERA_AVALON_SGDMA_STATUS_BUSY_MSK) );

  /* Clear Run */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, 
   80f60:	20c9883a 	add	r4,r4,r3
   80f64:	20800037 	ldwio	r2,0(r4)
   80f68:	00fff7c4 	movi	r3,-33
   80f6c:	10c4703a 	and	r2,r2,r3
   80f70:	20800035 	stwio	r2,0(r4)
    (IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base) &
     ~ALTERA_AVALON_SGDMA_CONTROL_RUN_MSK) );

  /* Get & clear status register contents */
  status = IORD_ALTERA_AVALON_SGDMA_STATUS(dev->base);
   80f74:	39000317 	ldw	r4,12(r7)
   80f78:	20800037 	ldwio	r2,0(r4)
  IOWR_ALTERA_AVALON_SGDMA_STATUS(dev->base, 0xFF);
   80f7c:	00c03fc4 	movi	r3,255
   80f80:	20c00035 	stwio	r3,0(r4)

  return status;
}
   80f84:	10803fcc 	andi	r2,r2,255
   80f88:	f800283a 	ret

00080f8c <alt_avalon_sgdma_do_async_transfer>:
 * - 0 for success, or various errors defined in <errno.h>
 */
int alt_avalon_sgdma_do_async_transfer(
  alt_sgdma_dev *dev,
  alt_sgdma_descriptor *desc)
{
   80f8c:	200d883a 	mov	r6,r4
  alt_u32 control;

  /* Return with error immediately if controller is busy */
  if( (IORD_ALTERA_AVALON_SGDMA_STATUS(dev->base) &
   80f90:	20800317 	ldw	r2,12(r4)
   80f94:	10800037 	ldwio	r2,0(r2)
   80f98:	1080040c 	andi	r2,r2,16
   80f9c:	10000226 	beq	r2,zero,80fa8 <alt_avalon_sgdma_do_async_transfer+0x1c>
   80fa0:	00bffc04 	movi	r2,-16
   80fa4:	f800283a 	ret
           ALTERA_AVALON_SGDMA_STATUS_BUSY_MSK) ) {
    return -EBUSY;
  }

  /* Clear Run */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base,
   80fa8:	01c00404 	movi	r7,16
   80fac:	20c00317 	ldw	r3,12(r4)
   80fb0:	19c7883a 	add	r3,r3,r7
   80fb4:	18800037 	ldwio	r2,0(r3)
   80fb8:	013ff7c4 	movi	r4,-33
   80fbc:	1104703a 	and	r2,r2,r4
   80fc0:	18800035 	stwio	r2,0(r3)

  /*
   * Clear any (previous) status register information
   * that might occlude our error checking later.
   */
  IOWR_ALTERA_AVALON_SGDMA_STATUS(dev->base, 0xFF);
   80fc4:	30c00317 	ldw	r3,12(r6)
   80fc8:	00803fc4 	movi	r2,255
   80fcc:	18800035 	stwio	r2,0(r3)

  /* Point the controller at the descriptor */
  IOWR_ALTERA_AVALON_SGDMA_NEXT_DESC_POINTER(dev->base, (alt_u32) desc);
   80fd0:	30800317 	ldw	r2,12(r6)
   80fd4:	11400835 	stwio	r5,32(r2)
   *  - Stop on an error with any particular descriptor
   *  - Include any control register bits registered with along with
   *    the callback routine (effectively, interrupts are controlled
   *    via the control bits set during callback-register time).
   */
  if(dev->callback) {
   80fd8:	30800917 	ldw	r2,36(r6)
   80fdc:	10000926 	beq	r2,zero,81004 <alt_avalon_sgdma_do_async_transfer+0x78>
    control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
   80fe0:	31000317 	ldw	r4,12(r6)
   80fe4:	21c9883a 	add	r4,r4,r7
   80fe8:	20c00037 	ldwio	r3,0(r4)

    control |= (dev->chain_control                          |
                ALTERA_AVALON_SGDMA_CONTROL_RUN_MSK         |
                ALTERA_AVALON_SGDMA_CONTROL_STOP_DMA_ER_MSK  );

    IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, control);
   80fec:	30800b17 	ldw	r2,44(r6)
   80ff0:	10801814 	ori	r2,r2,96
   80ff4:	1886b03a 	or	r3,r3,r2
   80ff8:	20c00035 	stwio	r3,0(r4)
   80ffc:	0005883a 	mov	r2,zero
   81000:	f800283a 	ret
   *   - Run
   *   - Stop on an error with any particular descriptor
   *   - Disable interrupt generation
   */
  else {
    control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
   81004:	30800317 	ldw	r2,12(r6)
   81008:	10800404 	addi	r2,r2,16
   8100c:	10c00037 	ldwio	r3,0(r2)

    control |= (ALTERA_AVALON_SGDMA_CONTROL_RUN_MSK         |
   81010:	18c01814 	ori	r3,r3,96
                ALTERA_AVALON_SGDMA_CONTROL_STOP_DMA_ER_MSK );
    control &= ~ALTERA_AVALON_SGDMA_CONTROL_IE_GLOBAL_MSK;

    IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, control);
   81014:	013ffbc4 	movi	r4,-17
   81018:	1906703a 	and	r3,r3,r4
   8101c:	10c00035 	stwio	r3,0(r2)
   81020:	0005883a 	mov	r2,zero
  /*
   * Error detection/handling should be performed at the application
   * or callback level as appropriate.
   */
  return 0;
}
   81024:	f800283a 	ret

00081028 <alt_avalon_sgdma_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_sgdma_irq(void *context)
#else
static void alt_avalon_sgdma_irq(void *context, alt_u32 id)
#endif
{
   81028:	defffe04 	addi	sp,sp,-8
   8102c:	dfc00115 	stw	ra,4(sp)
   81030:	dc000015 	stw	r16,0(sp)
   81034:	200b883a 	mov	r5,r4
   * Note: This is explicitly done before calling user interrupt-handling
   * code rather than after; if user ISR code initiates another SGDMA
   * transfer which completes quickly, reading the control register after
   * the callback routine may result in a lost interrupt.
   */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, 
   81038:	01000404 	movi	r4,16
   8103c:	28c00317 	ldw	r3,12(r5)
   81040:	1907883a 	add	r3,r3,r4
   81044:	18800037 	ldwio	r2,0(r3)
   81048:	10a00034 	orhi	r2,r2,32768
   8104c:	18800035 	stwio	r2,0(r3)
    IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base) | 0x80000000);
  
  /* Dummy read to ensure IRQ is negated before the ISR returns */
  IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
   81050:	28800317 	ldw	r2,12(r5)
   81054:	1105883a 	add	r2,r2,r4
   81058:	10800037 	ldwio	r2,0(r2)
   * Other interrupts are explicitly disabled if callbacks
   * are registered because there is no guarantee that they are 
   * preemption-safe. This allows the driver to support 
   * interrupt preemption.
   */
  if(dev->callback) {
   8105c:	28c00917 	ldw	r3,36(r5)
   81060:	18000726 	beq	r3,zero,81080 <alt_avalon_sgdma_irq+0x58>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   81064:	0021303a 	rdctl	r16,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   81068:	00bfff84 	movi	r2,-2
   8106c:	8084703a 	and	r2,r16,r2
   81070:	1001703a 	wrctl	status,r2
    cpu_sr = alt_irq_disable_all();
    (dev->callback)(dev->callback_context);
   81074:	29000a17 	ldw	r4,40(r5)
   81078:	183ee83a 	callr	r3
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8107c:	8001703a 	wrctl	status,r16
    alt_irq_enable_all(cpu_sr);
  }
}
   81080:	dfc00117 	ldw	ra,4(sp)
   81084:	dc000017 	ldw	r16,0(sp)
   81088:	dec00204 	addi	sp,sp,8
   8108c:	f800283a 	ret

00081090 <alt_avalon_sgdma_construct_descriptor_burst>:
  int                   read_fixed,
  int                   write_fixed_or_sop,
  int                   read_burst,
  int                   write_burst,
  alt_u8                atlantic_channel)
{
   81090:	deffff04 	addi	sp,sp,-4
   81094:	dfc00015 	stw	ra,0(sp)
   81098:	da000703 	ldbu	r8,28(sp)
   * The SGDMA controller from continuing to process the chain. This is
   * done as a single IO write to bypass cache, without flushing
   * the entire descriptor, since only the 8-bit descriptor status must
   * be flushed.
   */
  IOWR_8DIRECT(&next->control, 0,
   8109c:	288007c3 	ldbu	r2,31(r5)
   810a0:	10801fcc 	andi	r2,r2,127
   810a4:	288007e5 	stbio	r2,31(r5)
    (next->control & ~ALTERA_AVALON_SGDMA_DESCRIPTOR_CONTROL_OWNED_BY_HW_MSK));

  desc->read_addr                = read_addr;
   810a8:	21800005 	stb	r6,0(r4)
   810ac:	3004d23a 	srli	r2,r6,8
   810b0:	20800045 	stb	r2,1(r4)
   810b4:	3004d43a 	srli	r2,r6,16
   810b8:	20800085 	stb	r2,2(r4)
   810bc:	300cd63a 	srli	r6,r6,24
   810c0:	218000c5 	stb	r6,3(r4)
  desc->write_addr               = write_addr;
   810c4:	21c00205 	stb	r7,8(r4)
   810c8:	3804d23a 	srli	r2,r7,8
   810cc:	20800245 	stb	r2,9(r4)
   810d0:	3804d43a 	srli	r2,r7,16
   810d4:	20800285 	stb	r2,10(r4)
   810d8:	380ed63a 	srli	r7,r7,24
   810dc:	21c002c5 	stb	r7,11(r4)
  desc->next                     = (alt_u32 *) next;
   810e0:	21400405 	stb	r5,16(r4)
   810e4:	2804d23a 	srli	r2,r5,8
   810e8:	20800445 	stb	r2,17(r4)
   810ec:	2804d43a 	srli	r2,r5,16
   810f0:	20800485 	stb	r2,18(r4)
   810f4:	280ad63a 	srli	r5,r5,24
   810f8:	214004c5 	stb	r5,19(r4)
  desc->read_addr_pad            = 0x0;
   810fc:	20000105 	stb	zero,4(r4)
   81100:	20000145 	stb	zero,5(r4)
   81104:	20000185 	stb	zero,6(r4)
   81108:	200001c5 	stb	zero,7(r4)
  desc->write_addr_pad           = 0x0;
   8110c:	20000305 	stb	zero,12(r4)
   81110:	20000345 	stb	zero,13(r4)
   81114:	20000385 	stb	zero,14(r4)
   81118:	200003c5 	stb	zero,15(r4)
  desc->next_pad                 = 0x0;
   8111c:	20000505 	stb	zero,20(r4)
   81120:	20000545 	stb	zero,21(r4)
   81124:	20000585 	stb	zero,22(r4)
   81128:	200005c5 	stb	zero,23(r4)
  desc->bytes_to_transfer        = length_or_eop;
   8112c:	d880010b 	ldhu	r2,4(sp)
   81130:	20800605 	stb	r2,24(r4)
   81134:	1004d23a 	srli	r2,r2,8
   81138:	20800645 	stb	r2,25(r4)
  desc->actual_bytes_transferred = 0;
   8113c:	20000705 	stb	zero,28(r4)
   81140:	20000745 	stb	zero,29(r4)
  desc->status                   = 0x0;
   81144:	20000785 	stb	zero,30(r4)

  /* SGDMA burst not currently supported */
  desc->read_burst               = read_burst;
   81148:	d8800517 	ldw	r2,20(sp)
   8114c:	20800685 	stb	r2,26(r4)
  desc->write_burst              = write_burst;
   81150:	d8800617 	ldw	r2,24(sp)
   81154:	208006c5 	stb	r2,27(r4)
   * Note that this step is performed after all other descriptor information
   * has been filled out so that, if the controller already happens to be
   * pointing at this descriptor, it will not run (via the "owned by hardware"
   * bit) until all other descriptor information has been set up.
   */
  desc->control = (
   81158:	d8800217 	ldw	r2,8(sp)
   8115c:	1005003a 	cmpeq	r2,r2,zero
   81160:	00ffe044 	movi	r3,-127
   81164:	188fc83a 	sub	r7,r3,r2
   81168:	d8800317 	ldw	r2,12(sp)
   8116c:	1004c03a 	cmpne	r2,r2,zero
   81170:	108d883a 	add	r6,r2,r2
   81174:	d8800417 	ldw	r2,16(sp)
   81178:	1004c03a 	cmpne	r2,r2,zero
   8117c:	100a90ba 	slli	r5,r2,2
   81180:	40803fcc 	andi	r2,r8,255
   81184:	1000021e 	bne	r2,zero,81190 <alt_avalon_sgdma_construct_descriptor_burst+0x100>
   81188:	0007883a 	mov	r3,zero
   8118c:	00000206 	br	81198 <alt_avalon_sgdma_construct_descriptor_burst+0x108>
   81190:	408003cc 	andi	r2,r8,15
   81194:	100690fa 	slli	r3,r2,3
   81198:	3144b03a 	or	r2,r6,r5
   8119c:	38c6b03a 	or	r3,r7,r3
   811a0:	10c4b03a 	or	r2,r2,r3
   811a4:	208007c5 	stb	r2,31(r4)
  /*
   * Flush completed buffer out of cache. This is done rather than
   * individual cache-bypassed writes to take advantage of any
   * burst-capabilities in the memory we're writing to
   */
  alt_remap_uncached(desc, sizeof(alt_sgdma_descriptor));
   811a8:	01400804 	movi	r5,32
   811ac:	0081a4c0 	call	81a4c <alt_remap_uncached>
}
   811b0:	dfc00017 	ldw	ra,0(sp)
   811b4:	dec00104 	addi	sp,sp,4
   811b8:	f800283a 	ret

000811bc <alt_avalon_sgdma_construct_descriptor>:
  alt_u16               length_or_eop,
  int                   generate_eop,
  int                   read_fixed,
  int                   write_fixed_or_sop,
  alt_u8                atlantic_channel)
{
   811bc:	defff804 	addi	sp,sp,-32
   811c0:	dfc00715 	stw	ra,28(sp)
  alt_avalon_sgdma_construct_descriptor_burst(desc, next, read_addr, 
   811c4:	d880080b 	ldhu	r2,32(sp)
   811c8:	d8800015 	stw	r2,0(sp)
   811cc:	d8800917 	ldw	r2,36(sp)
   811d0:	d8800115 	stw	r2,4(sp)
   811d4:	d8800a17 	ldw	r2,40(sp)
   811d8:	d8800215 	stw	r2,8(sp)
   811dc:	d8800b17 	ldw	r2,44(sp)
   811e0:	d8800315 	stw	r2,12(sp)
   811e4:	d8000415 	stw	zero,16(sp)
   811e8:	d8000515 	stw	zero,20(sp)
   811ec:	d8800c03 	ldbu	r2,48(sp)
   811f0:	d8800615 	stw	r2,24(sp)
   811f4:	00810900 	call	81090 <alt_avalon_sgdma_construct_descriptor_burst>
    write_addr, length_or_eop, generate_eop, read_fixed, write_fixed_or_sop, 
    0, 0, atlantic_channel);
}
   811f8:	dfc00717 	ldw	ra,28(sp)
   811fc:	dec00804 	addi	sp,sp,32
   81200:	f800283a 	ret

00081204 <alt_avalon_sgdma_construct_mem_to_stream_desc_burst>:
  int                   read_fixed,
  int                   generate_sop,
  int                   generate_eop,
  int                   read_burst,
  alt_u8                atlantic_channel)
{
   81204:	defff804 	addi	sp,sp,-32
   81208:	dfc00715 	stw	ra,28(sp)
  alt_avalon_sgdma_construct_descriptor_burst(
   8120c:	39ffffcc 	andi	r7,r7,65535
   81210:	d9c00015 	stw	r7,0(sp)
   81214:	d8800a17 	ldw	r2,40(sp)
   81218:	d8800115 	stw	r2,4(sp)
   8121c:	d8800817 	ldw	r2,32(sp)
   81220:	d8800215 	stw	r2,8(sp)
   81224:	d8800917 	ldw	r2,36(sp)
   81228:	d8800315 	stw	r2,12(sp)
   8122c:	d8800b17 	ldw	r2,44(sp)
   81230:	d8800415 	stw	r2,16(sp)
   81234:	d8000515 	stw	zero,20(sp)
   81238:	d8800c03 	ldbu	r2,48(sp)
   8123c:	d8800615 	stw	r2,24(sp)
   81240:	000f883a 	mov	r7,zero
   81244:	00810900 	call	81090 <alt_avalon_sgdma_construct_descriptor_burst>
    read_fixed,
    generate_sop,
    read_burst,
    0,                 // Write_burst : N/A in mem-to-stream mode
    atlantic_channel);
}
   81248:	dfc00717 	ldw	ra,28(sp)
   8124c:	dec00804 	addi	sp,sp,32
   81250:	f800283a 	ret

00081254 <alt_avalon_sgdma_construct_mem_to_stream_desc>:
  alt_u16               length,
  int                   read_fixed,
  int                   generate_sop,
  int                   generate_eop,
  alt_u8                atlantic_channel)
{
   81254:	defffa04 	addi	sp,sp,-24
   81258:	dfc00515 	stw	ra,20(sp)
  alt_avalon_sgdma_construct_mem_to_stream_desc_burst(desc, next, read_addr, 
   8125c:	d8800617 	ldw	r2,24(sp)
   81260:	d8800015 	stw	r2,0(sp)
   81264:	d8800717 	ldw	r2,28(sp)
   81268:	d8800115 	stw	r2,4(sp)
   8126c:	d8800817 	ldw	r2,32(sp)
   81270:	d8800215 	stw	r2,8(sp)
   81274:	d8000315 	stw	zero,12(sp)
   81278:	d8800903 	ldbu	r2,36(sp)
   8127c:	d8800415 	stw	r2,16(sp)
   81280:	39ffffcc 	andi	r7,r7,65535
   81284:	00812040 	call	81204 <alt_avalon_sgdma_construct_mem_to_stream_desc_burst>
    length, read_fixed, generate_sop, generate_eop, 0, atlantic_channel);

}
   81288:	dfc00517 	ldw	ra,20(sp)
   8128c:	dec00604 	addi	sp,sp,24
   81290:	f800283a 	ret

00081294 <alt_avalon_sgdma_construct_stream_to_mem_desc_burst>:
  alt_sgdma_descriptor *next,
  alt_u32              *write_addr,
  alt_u16               length_or_eop,
  int                   write_fixed,
  int                   write_burst)
{
   81294:	defff804 	addi	sp,sp,-32
   81298:	dfc00715 	stw	ra,28(sp)
   8129c:	3007883a 	mov	r3,r6
  alt_avalon_sgdma_construct_descriptor_burst(
   812a0:	39ffffcc 	andi	r7,r7,65535
   812a4:	d9c00015 	stw	r7,0(sp)
   812a8:	d8000115 	stw	zero,4(sp)
   812ac:	d8000215 	stw	zero,8(sp)
   812b0:	d8800817 	ldw	r2,32(sp)
   812b4:	d8800315 	stw	r2,12(sp)
   812b8:	d8000415 	stw	zero,16(sp)
   812bc:	d8800917 	ldw	r2,36(sp)
   812c0:	d8800515 	stw	r2,20(sp)
   812c4:	d8000615 	stw	zero,24(sp)
   812c8:	000d883a 	mov	r6,zero
   812cc:	180f883a 	mov	r7,r3
   812d0:	00810900 	call	81090 <alt_avalon_sgdma_construct_descriptor_burst>
    0x0,            // Read fixed: N/A in stream-to-mem mode
    write_fixed,
    0,              // Read_burst : N/A in stream-to-mem mode
    write_burst,
    (alt_u8) 0x0);  // Atlantic channel: N/A in stream-to-mem mode
}
   812d4:	dfc00717 	ldw	ra,28(sp)
   812d8:	dec00804 	addi	sp,sp,32
   812dc:	f800283a 	ret

000812e0 <alt_avalon_sgdma_construct_stream_to_mem_desc>:
  alt_sgdma_descriptor *desc,
  alt_sgdma_descriptor *next,
  alt_u32              *write_addr,
  alt_u16               length_or_eop,
  int                   write_fixed)
{
   812e0:	defffd04 	addi	sp,sp,-12
   812e4:	dfc00215 	stw	ra,8(sp)
  alt_avalon_sgdma_construct_stream_to_mem_desc_burst(desc, next, write_addr, 
   812e8:	d8800317 	ldw	r2,12(sp)
   812ec:	d8800015 	stw	r2,0(sp)
   812f0:	d8000115 	stw	zero,4(sp)
   812f4:	39ffffcc 	andi	r7,r7,65535
   812f8:	00812940 	call	81294 <alt_avalon_sgdma_construct_stream_to_mem_desc_burst>
    length_or_eop, write_fixed, 0);
}
   812fc:	dfc00217 	ldw	ra,8(sp)
   81300:	dec00304 	addi	sp,sp,12
   81304:	f800283a 	ret

00081308 <alt_avalon_sgdma_construct_mem_to_mem_desc_burst>:
  alt_u16               length,
  int                   read_fixed,
  int                   write_fixed,
  int                   read_burst,
  int                   write_burst)
{
   81308:	defff804 	addi	sp,sp,-32
   8130c:	dfc00715 	stw	ra,28(sp)
  alt_avalon_sgdma_construct_descriptor_burst(
   81310:	d880080b 	ldhu	r2,32(sp)
   81314:	d8800015 	stw	r2,0(sp)
   81318:	d8000115 	stw	zero,4(sp)
   8131c:	d8800917 	ldw	r2,36(sp)
   81320:	d8800215 	stw	r2,8(sp)
   81324:	d8800a17 	ldw	r2,40(sp)
   81328:	d8800315 	stw	r2,12(sp)
   8132c:	d8800b17 	ldw	r2,44(sp)
   81330:	d8800415 	stw	r2,16(sp)
   81334:	d8800c17 	ldw	r2,48(sp)
   81338:	d8800515 	stw	r2,20(sp)
   8133c:	d8000615 	stw	zero,24(sp)
   81340:	00810900 	call	81090 <alt_avalon_sgdma_construct_descriptor_burst>
    read_fixed,
    write_fixed,
    read_burst,
    write_burst,
    (alt_u8) 0x0);  // Atlantic channel: N/A in mem-to-mem mode
}
   81344:	dfc00717 	ldw	ra,28(sp)
   81348:	dec00804 	addi	sp,sp,32
   8134c:	f800283a 	ret

00081350 <alt_avalon_sgdma_construct_mem_to_mem_desc>:
  alt_u32              *read_addr,
  alt_u32              *write_addr,
  alt_u16               length,
  int                   read_fixed,
  int                   write_fixed)
{
   81350:	defffa04 	addi	sp,sp,-24
   81354:	dfc00515 	stw	ra,20(sp)
  alt_avalon_sgdma_construct_mem_to_mem_desc_burst(desc, next, read_addr, 
   81358:	d880060b 	ldhu	r2,24(sp)
   8135c:	d8800015 	stw	r2,0(sp)
   81360:	d8800717 	ldw	r2,28(sp)
   81364:	d8800115 	stw	r2,4(sp)
   81368:	d8800817 	ldw	r2,32(sp)
   8136c:	d8800215 	stw	r2,8(sp)
   81370:	d8000315 	stw	zero,12(sp)
   81374:	d8000415 	stw	zero,16(sp)
   81378:	00813080 	call	81308 <alt_avalon_sgdma_construct_mem_to_mem_desc_burst>
    write_addr, length, read_fixed, write_fixed, 0, 0);
}
   8137c:	dfc00517 	ldw	ra,20(sp)
   81380:	dec00604 	addi	sp,sp,24
   81384:	f800283a 	ret

00081388 <alt_avalon_sgdma_open>:
 * Returns:
 * - Pointer to SGDMA device instance struct, or null if the device
 *   could not be opened.
 */
alt_sgdma_dev* alt_avalon_sgdma_open (const char* name)
{
   81388:	defffe04 	addi	sp,sp,-8
   8138c:	dfc00115 	stw	ra,4(sp)
   81390:	dc000015 	stw	r16,0(sp)
  alt_sgdma_dev* dev;

  dev = (alt_sgdma_dev*) alt_find_dev (name, &alt_sgdma_list);
   81394:	d1600004 	addi	r5,gp,-32768
   81398:	00816000 	call	81600 <alt_find_dev>
   8139c:	1021883a 	mov	r16,r2

  if (NULL == dev) {
   813a0:	10000b1e 	bne	r2,zero,813d0 <alt_avalon_sgdma_open+0x48>

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
   813a4:	00800234 	movhi	r2,8
   813a8:	109f8004 	addi	r2,r2,32256
   813ac:	10800017 	ldw	r2,0(r2)
   813b0:	1000031e 	bne	r2,zero,813c0 <alt_avalon_sgdma_open+0x38>
   813b4:	00c00274 	movhi	r3,9
   813b8:	18ee3e04 	addi	r3,r3,-18184
   813bc:	00000206 	br	813c8 <alt_avalon_sgdma_open+0x40>
   813c0:	103ee83a 	callr	r2
   813c4:	1007883a 	mov	r3,r2
    ALT_ERRNO = ENODEV;
   813c8:	008004c4 	movi	r2,19
   813cc:	18800015 	stw	r2,0(r3)
  }

  return dev;
}
   813d0:	8005883a 	mov	r2,r16
   813d4:	dfc00117 	ldw	ra,4(sp)
   813d8:	dc000017 	ldw	r16,0(sp)
   813dc:	dec00204 	addi	sp,sp,8
   813e0:	f800283a 	ret

000813e4 <alt_avalon_sgdma_check_descriptor_status>:
 *   normally. Or, various error conditions defined in <errno.h>
 */
int alt_avalon_sgdma_check_descriptor_status(alt_sgdma_descriptor *desc)
{
  /* Errors take precedence */
  if( IORD_8DIRECT(&desc->status, 0) &
   813e4:	208007a3 	ldbuio	r2,30(r4)
   813e8:	10801fcc 	andi	r2,r2,127
   813ec:	10000226 	beq	r2,zero,813f8 <alt_avalon_sgdma_check_descriptor_status+0x14>
   813f0:	00bffec4 	movi	r2,-5
   813f4:	f800283a 	ret
        ALTERA_AVALON_SGDMA_DESCRIPTOR_STATUS_E_MEOP_MSK     |
        ALTERA_AVALON_SGDMA_DESCRIPTOR_STATUS_E_MSOP_MSK ) ) {
    return -EIO;
  }

  if( IORD_8DIRECT(&desc->control, 0) &
   813f8:	208007e3 	ldbuio	r2,31(r4)
   813fc:	1080200c 	andi	r2,r2,128
   81400:	10000226 	beq	r2,zero,8140c <alt_avalon_sgdma_check_descriptor_status+0x28>
   81404:	00bfe244 	movi	r2,-119
   81408:	f800283a 	ret
   8140c:	0005883a 	mov	r2,zero
      ALTERA_AVALON_SGDMA_DESCRIPTOR_CONTROL_OWNED_BY_HW_MSK) {
    return -EINPROGRESS;
  }

    return 0;
}
   81410:	f800283a 	ret

00081414 <alt_alarm_start>:
                     void* context)
{
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
  
  if (alt_ticks_per_second ())
   81414:	00800274 	movhi	r2,9
   81418:	10ae3c04 	addi	r2,r2,-18192
   8141c:	10800017 	ldw	r2,0(r2)
   81420:	1000021e 	bne	r2,zero,8142c <alt_alarm_start+0x18>
   81424:	00bfde84 	movi	r2,-134
   81428:	f800283a 	ret
  {
    if (alarm)
   8142c:	2000021e 	bne	r4,zero,81438 <alt_alarm_start+0x24>
   81430:	00bffa84 	movi	r2,-22
   81434:	f800283a 	ret
    {
      alarm->callback = callback;
   81438:	21800315 	stw	r6,12(r4)
      alarm->context  = context;
   8143c:	21c00515 	stw	r7,20(r4)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   81440:	000f303a 	rdctl	r7,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   81444:	00bfff84 	movi	r2,-2
   81448:	3884703a 	and	r2,r7,r2
   8144c:	1001703a 	wrctl	status,r2
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   81450:	00800274 	movhi	r2,9
   81454:	10ae3d04 	addi	r2,r2,-18188
   81458:	10c00017 	ldw	r3,0(r2)
 
      irq_context = alt_irq_disable_all ();
      
      current_nticks = alt_nticks();
      
      alarm->time = nticks + current_nticks + 1; 
   8145c:	01800044 	movi	r6,1
   81460:	1985883a 	add	r2,r3,r6
   81464:	2885883a 	add	r2,r5,r2
   81468:	20800215 	stw	r2,8(r4)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   8146c:	10c0022e 	bgeu	r2,r3,81478 <alt_alarm_start+0x64>
      {
        alarm->rollover = 1;
   81470:	21800405 	stb	r6,16(r4)
   81474:	00000106 	br	8147c <alt_alarm_start+0x68>
      }
      else
      {
        alarm->rollover = 0;
   81478:	20000405 	stb	zero,16(r4)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   8147c:	00800234 	movhi	r2,8
   81480:	109f8204 	addi	r2,r2,32264
   81484:	20800115 	stw	r2,4(r4)
  entry->next     = list->next;
   81488:	10c00017 	ldw	r3,0(r2)
   8148c:	20c00015 	stw	r3,0(r4)

  list->next->previous = entry;
   81490:	10c00017 	ldw	r3,0(r2)
   81494:	19000115 	stw	r4,4(r3)
  list->next           = entry;
   81498:	11000015 	stw	r4,0(r2)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8149c:	3801703a 	wrctl	status,r7
   814a0:	0005883a 	mov	r2,zero
  }
  else
  {
    return -ENOTSUP;
  }
}
   814a4:	f800283a 	ret

000814a8 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   814a8:	defffd04 	addi	sp,sp,-12
   814ac:	dfc00215 	stw	ra,8(sp)
   814b0:	dc400115 	stw	r17,4(sp)
   814b4:	dc000015 	stw	r16,0(sp)
   814b8:	2021883a 	mov	r16,r4
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   814bc:	20001c16 	blt	r4,zero,81530 <close+0x88>
   814c0:	20c00324 	muli	r3,r4,12
   814c4:	00800234 	movhi	r2,8
   814c8:	109d1704 	addi	r2,r2,29788
   814cc:	1889883a 	add	r4,r3,r2

  if (fd)
   814d0:	20001726 	beq	r4,zero,81530 <close+0x88>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   814d4:	20800017 	ldw	r2,0(r4)
   814d8:	10800417 	ldw	r2,16(r2)
   814dc:	10002126 	beq	r2,zero,81564 <close+0xbc>
   814e0:	103ee83a 	callr	r2
   814e4:	1023883a 	mov	r17,r2

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   814e8:	8009883a 	mov	r4,r16
   814ec:	0081a280 	call	81a28 <alt_release_fd>
    if (rval < 0)
   814f0:	88000216 	blt	r17,zero,814fc <close+0x54>
   814f4:	0005883a 	mov	r2,zero
   814f8:	00001d06 	br	81570 <close+0xc8>
   814fc:	00800234 	movhi	r2,8
   81500:	109f8004 	addi	r2,r2,32256
   81504:	10800017 	ldw	r2,0(r2)
   81508:	1000031e 	bne	r2,zero,81518 <close+0x70>
   8150c:	00c00274 	movhi	r3,9
   81510:	18ee3e04 	addi	r3,r3,-18184
   81514:	00000206 	br	81520 <close+0x78>
   81518:	103ee83a 	callr	r2
   8151c:	1007883a 	mov	r3,r2
    {
      ALT_ERRNO = -rval;
   81520:	0445c83a 	sub	r2,zero,r17
   81524:	18800015 	stw	r2,0(r3)
   81528:	00bfffc4 	movi	r2,-1
   8152c:	00001006 	br	81570 <close+0xc8>
   81530:	00800234 	movhi	r2,8
   81534:	109f8004 	addi	r2,r2,32256
   81538:	10800017 	ldw	r2,0(r2)
   8153c:	1000031e 	bne	r2,zero,8154c <close+0xa4>
   81540:	00c00274 	movhi	r3,9
   81544:	18ee3e04 	addi	r3,r3,-18184
   81548:	00000206 	br	81554 <close+0xac>
   8154c:	103ee83a 	callr	r2
   81550:	1007883a 	mov	r3,r2
    }
    return 0;
  }
  else
  {
    ALT_ERRNO = EBADFD;
   81554:	00801444 	movi	r2,81
   81558:	18800015 	stw	r2,0(r3)
   8155c:	00bfffc4 	movi	r2,-1
   81560:	00000306 	br	81570 <close+0xc8>

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   81564:	8009883a 	mov	r4,r16
   81568:	0081a280 	call	81a28 <alt_release_fd>
   8156c:	0005883a 	mov	r2,zero
  else
  {
    ALT_ERRNO = EBADFD;
    return -1;
  }
}
   81570:	dfc00217 	ldw	ra,8(sp)
   81574:	dc400117 	ldw	r17,4(sp)
   81578:	dc000017 	ldw	r16,0(sp)
   8157c:	dec00304 	addi	sp,sp,12
   81580:	f800283a 	ret

00081584 <alt_dcache_flush_all>:
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   81584:	f800283a 	ret

00081588 <alt_dev_null_write>:
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  return len;
}
   81588:	3005883a 	mov	r2,r6
   8158c:	f800283a 	ret

00081590 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   81590:	deffff04 	addi	sp,sp,-4
   81594:	dfc00015 	stw	ra,0(sp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   81598:	20000226 	beq	r4,zero,815a4 <alt_dev_llist_insert+0x14>
   8159c:	20800217 	ldw	r2,8(r4)
   815a0:	10000d1e 	bne	r2,zero,815d8 <alt_dev_llist_insert+0x48>
   815a4:	00800234 	movhi	r2,8
   815a8:	109f8004 	addi	r2,r2,32256
   815ac:	10800017 	ldw	r2,0(r2)
   815b0:	1000031e 	bne	r2,zero,815c0 <alt_dev_llist_insert+0x30>
   815b4:	00c00274 	movhi	r3,9
   815b8:	18ee3e04 	addi	r3,r3,-18184
   815bc:	00000206 	br	815c8 <alt_dev_llist_insert+0x38>
   815c0:	103ee83a 	callr	r2
   815c4:	1007883a 	mov	r3,r2
  {
    ALT_ERRNO = EINVAL;
   815c8:	00800584 	movi	r2,22
   815cc:	18800015 	stw	r2,0(r3)
   815d0:	00bffa84 	movi	r2,-22
   815d4:	00000706 	br	815f4 <alt_dev_llist_insert+0x64>
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   815d8:	21400115 	stw	r5,4(r4)
  entry->next     = list->next;
   815dc:	28800017 	ldw	r2,0(r5)
   815e0:	20800015 	stw	r2,0(r4)

  list->next->previous = entry;
   815e4:	28800017 	ldw	r2,0(r5)
   815e8:	11000115 	stw	r4,4(r2)
  list->next           = entry;
   815ec:	29000015 	stw	r4,0(r5)
   815f0:	0005883a 	mov	r2,zero
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
}
   815f4:	dfc00017 	ldw	ra,0(sp)
   815f8:	dec00104 	addi	sp,sp,4
   815fc:	f800283a 	ret

00081600 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   81600:	defffb04 	addi	sp,sp,-20
   81604:	dfc00415 	stw	ra,16(sp)
   81608:	dcc00315 	stw	r19,12(sp)
   8160c:	dc800215 	stw	r18,8(sp)
   81610:	dc400115 	stw	r17,4(sp)
   81614:	dc000015 	stw	r16,0(sp)
   81618:	2027883a 	mov	r19,r4
   8161c:	2821883a 	mov	r16,r5
  alt_dev* next = (alt_dev*) llist->next;
   81620:	2c400017 	ldw	r17,0(r5)
  alt_32 len;

  len  = strlen(name) + 1;
   81624:	0081ffc0 	call	81ffc <strlen>
   81628:	14800044 	addi	r18,r2,1
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   8162c:	8c000726 	beq	r17,r16,8164c <alt_find_dev+0x4c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   81630:	89000217 	ldw	r4,8(r17)
   81634:	980b883a 	mov	r5,r19
   81638:	900d883a 	mov	r6,r18
   8163c:	0081cfc0 	call	81cfc <memcmp>
   81640:	10000326 	beq	r2,zero,81650 <alt_find_dev+0x50>
    {
      /* match found */

      return next;
    }
    next = (alt_dev*) next->llist.next;
   81644:	8c400017 	ldw	r17,0(r17)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   81648:	847ff91e 	bne	r16,r17,81630 <alt_find_dev+0x30>
   8164c:	0023883a 	mov	r17,zero
  }
  
  /* No match found */
  
  return NULL;
}
   81650:	8805883a 	mov	r2,r17
   81654:	dfc00417 	ldw	ra,16(sp)
   81658:	dcc00317 	ldw	r19,12(sp)
   8165c:	dc800217 	ldw	r18,8(sp)
   81660:	dc400117 	ldw	r17,4(sp)
   81664:	dc000017 	ldw	r16,0(sp)
   81668:	dec00504 	addi	sp,sp,20
   8166c:	f800283a 	ret

00081670 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   81670:	deffff04 	addi	sp,sp,-4
   81674:	dfc00015 	stw	ra,0(sp)
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
   81678:	0009883a 	mov	r4,zero
   8167c:	01440004 	movi	r5,4096
   81680:	0081c880 	call	81c88 <alt_icache_flush>
#endif
}
   81684:	dfc00017 	ldw	ra,0(sp)
   81688:	dec00104 	addi	sp,sp,4
   8168c:	f800283a 	ret

00081690 <alt_ic_irq_enabled>:
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   81690:	000530fa 	rdctl	r2,ienable
   81694:	00c00044 	movi	r3,1
   81698:	1946983a 	sll	r3,r3,r5
   8169c:	10c4703a 	and	r2,r2,r3

    return (irq_enabled & (1 << irq)) ? 1: 0;
}
   816a0:	1004c03a 	cmpne	r2,r2,zero
   816a4:	f800283a 	ret

000816a8 <alt_ic_irq_enable>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   816a8:	000d303a 	rdctl	r6,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   816ac:	00bfff84 	movi	r2,-2
   816b0:	3084703a 	and	r2,r6,r2
   816b4:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active |= (1 << id);
   816b8:	00c00274 	movhi	r3,9
   816bc:	18ee3b04 	addi	r3,r3,-18196
   816c0:	19000017 	ldw	r4,0(r3)
   816c4:	00800044 	movi	r2,1
   816c8:	1144983a 	sll	r2,r2,r5
   816cc:	1104b03a 	or	r2,r2,r4
   816d0:	18800015 	stw	r2,0(r3)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   816d4:	18800017 	ldw	r2,0(r3)
   816d8:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   816dc:	3001703a 	wrctl	status,r6
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
    return alt_irq_enable(irq);
}
   816e0:	0005883a 	mov	r2,zero
   816e4:	f800283a 	ret

000816e8 <alt_ic_irq_disable>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   816e8:	000d303a 	rdctl	r6,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   816ec:	00bfff84 	movi	r2,-2
   816f0:	3084703a 	and	r2,r6,r2
   816f4:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active &= ~(1 << id);
   816f8:	00c00274 	movhi	r3,9
   816fc:	18ee3b04 	addi	r3,r3,-18196
   81700:	19000017 	ldw	r4,0(r3)
   81704:	00bfff84 	movi	r2,-2
   81708:	1144183a 	rol	r2,r2,r5
   8170c:	1104703a 	and	r2,r2,r4
   81710:	18800015 	stw	r2,0(r3)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   81714:	18800017 	ldw	r2,0(r3)
   81718:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8171c:	3001703a 	wrctl	status,r6
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
    return alt_irq_disable(irq);
}
   81720:	0005883a 	mov	r2,zero
   81724:	f800283a 	ret

00081728 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   81728:	defffe04 	addi	sp,sp,-8
   8172c:	dfc00115 	stw	ra,4(sp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   81730:	d8800217 	ldw	r2,8(sp)
   81734:	d8800015 	stw	r2,0(sp)
   81738:	00817480 	call	81748 <alt_iic_isr_register>
}  
   8173c:	dfc00117 	ldw	ra,4(sp)
   81740:	dec00204 	addi	sp,sp,8
   81744:	f800283a 	ret

00081748 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   81748:	defffe04 	addi	sp,sp,-8
   8174c:	dfc00115 	stw	ra,4(sp)
   81750:	dc000015 	stw	r16,0(sp)
  int rc = -EINVAL;  
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
  alt_irq_context status;

  if (id < ALT_NIRQ)
   81754:	008007c4 	movi	r2,31
   81758:	1140020e 	bge	r2,r5,81764 <alt_iic_isr_register+0x1c>
   8175c:	00bffa84 	movi	r2,-22
   81760:	00000f06 	br	817a0 <alt_iic_isr_register+0x58>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   81764:	0021303a 	rdctl	r16,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   81768:	00bfff84 	movi	r2,-2
   8176c:	8084703a 	and	r2,r16,r2
   81770:	1001703a 	wrctl	status,r2
     * state.
     */

    status = alt_irq_disable_all();

    alt_irq[id].handler = isr;
   81774:	280490fa 	slli	r2,r5,3
   81778:	00c00274 	movhi	r3,9
   8177c:	18f64c04 	addi	r3,r3,-9936
   81780:	10c5883a 	add	r2,r2,r3
   81784:	11800015 	stw	r6,0(r2)
    alt_irq[id].context = isr_context;
   81788:	11c00115 	stw	r7,4(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   8178c:	30000226 	beq	r6,zero,81798 <alt_iic_isr_register+0x50>
   81790:	00816a80 	call	816a8 <alt_ic_irq_enable>
   81794:	00000106 	br	8179c <alt_iic_isr_register+0x54>
   81798:	00816e80 	call	816e8 <alt_ic_irq_disable>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8179c:	8001703a 	wrctl	status,r16

    alt_irq_enable_all(status);
  }

  return rc; 
}
   817a0:	dfc00117 	ldw	ra,4(sp)
   817a4:	dc000017 	ldw	r16,0(sp)
   817a8:	dec00204 	addi	sp,sp,8
   817ac:	f800283a 	ret

000817b0 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   817b0:	defffe04 	addi	sp,sp,-8
   817b4:	dfc00115 	stw	ra,4(sp)
   817b8:	dc000015 	stw	r16,0(sp)
   817bc:	2021883a 	mov	r16,r4
  int old;

  old = open (name, flags, mode);
   817c0:	2809883a 	mov	r4,r5
   817c4:	300b883a 	mov	r5,r6
   817c8:	380d883a 	mov	r6,r7
   817cc:	00818ac0 	call	818ac <open>
   817d0:	1009883a 	mov	r4,r2

  if (old >= 0)
   817d4:	10000b16 	blt	r2,zero,81804 <alt_open_fd+0x54>
  {
    fd->dev      = alt_fd_list[old].dev;
   817d8:	10c00324 	muli	r3,r2,12
   817dc:	00800234 	movhi	r2,8
   817e0:	109d1704 	addi	r2,r2,29788
   817e4:	1887883a 	add	r3,r3,r2
   817e8:	18800017 	ldw	r2,0(r3)
   817ec:	80800015 	stw	r2,0(r16)
    fd->priv     = alt_fd_list[old].priv;
   817f0:	18800117 	ldw	r2,4(r3)
   817f4:	80800115 	stw	r2,4(r16)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   817f8:	18800217 	ldw	r2,8(r3)
   817fc:	80800215 	stw	r2,8(r16)

    alt_release_fd (old);
   81800:	0081a280 	call	81a28 <alt_release_fd>
  }
} 
   81804:	dfc00117 	ldw	ra,4(sp)
   81808:	dc000017 	ldw	r16,0(sp)
   8180c:	dec00204 	addi	sp,sp,8
   81810:	f800283a 	ret

00081814 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   81814:	defffa04 	addi	sp,sp,-24
   81818:	dfc00515 	stw	ra,20(sp)
   8181c:	dd000415 	stw	r20,16(sp)
   81820:	dcc00315 	stw	r19,12(sp)
   81824:	dc800215 	stw	r18,8(sp)
   81828:	dc400115 	stw	r17,4(sp)
   8182c:	dc000015 	stw	r16,0(sp)
   81830:	2005883a 	mov	r2,r4
   81834:	2827883a 	mov	r19,r5
   81838:	3029883a 	mov	r20,r6
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   8183c:	04000234 	movhi	r16,8
   81840:	841d1a04 	addi	r16,r16,29800
   81844:	04800044 	movi	r18,1
   81848:	04407fc4 	movi	r17,511
   8184c:	8009883a 	mov	r4,r16
   81850:	100b883a 	mov	r5,r2
   81854:	900d883a 	mov	r6,r18
   81858:	880f883a 	mov	r7,r17
   8185c:	00817b00 	call	817b0 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   81860:	843ffd04 	addi	r16,r16,-12
   81864:	8009883a 	mov	r4,r16
   81868:	980b883a 	mov	r5,r19
   8186c:	000d883a 	mov	r6,zero
   81870:	880f883a 	mov	r7,r17
   81874:	00817b00 	call	817b0 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   81878:	81000604 	addi	r4,r16,24
   8187c:	a00b883a 	mov	r5,r20
   81880:	900d883a 	mov	r6,r18
   81884:	880f883a 	mov	r7,r17
   81888:	00817b00 	call	817b0 <alt_open_fd>
}  
   8188c:	dfc00517 	ldw	ra,20(sp)
   81890:	dd000417 	ldw	r20,16(sp)
   81894:	dcc00317 	ldw	r19,12(sp)
   81898:	dc800217 	ldw	r18,8(sp)
   8189c:	dc400117 	ldw	r17,4(sp)
   818a0:	dc000017 	ldw	r16,0(sp)
   818a4:	dec00604 	addi	sp,sp,24
   818a8:	f800283a 	ret

000818ac <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   818ac:	defff904 	addi	sp,sp,-28
   818b0:	dfc00615 	stw	ra,24(sp)
   818b4:	dd400515 	stw	r21,20(sp)
   818b8:	dd000415 	stw	r20,16(sp)
   818bc:	dcc00315 	stw	r19,12(sp)
   818c0:	dc800215 	stw	r18,8(sp)
   818c4:	dc400115 	stw	r17,4(sp)
   818c8:	dc000015 	stw	r16,0(sp)
   818cc:	2029883a 	mov	r20,r4
   818d0:	2827883a 	mov	r19,r5
   818d4:	302b883a 	mov	r21,r6
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   818d8:	01400234 	movhi	r5,8
   818dc:	295f7d04 	addi	r5,r5,32244
   818e0:	00816000 	call	81600 <alt_find_dev>
   818e4:	1021883a 	mov	r16,r2
   818e8:	10000226 	beq	r2,zero,818f4 <open+0x48>
   818ec:	0025883a 	mov	r18,zero
   818f0:	00000a06 	br	8191c <open+0x70>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   818f4:	a009883a 	mov	r4,r20
   818f8:	0081b600 	call	81b60 <alt_find_file>
   818fc:	1021883a 	mov	r16,r2

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   81900:	1000051e 	bne	r2,zero,81918 <open+0x6c>
   81904:	047fffc4 	movi	r17,-1
   81908:	043ffb44 	movi	r16,-19
   8190c:	00002b06 	br	819bc <open+0x110>
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   81910:	043ffcc4 	movi	r16,-13
   81914:	00002906 	br	819bc <open+0x110>

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   81918:	04800044 	movi	r18,1
  {
    if ((index = alt_get_fd (dev)) < 0)
   8191c:	8009883a 	mov	r4,r16
   81920:	0081c1c0 	call	81c1c <alt_get_fd>
   81924:	1023883a 	mov	r17,r2
   81928:	10003316 	blt	r2,zero,819f8 <open+0x14c>
    {
      status = index;
    }
    else
    {
      fd = &alt_fd_list[index];
   8192c:	10800324 	muli	r2,r2,12
   81930:	02000234 	movhi	r8,8
   81934:	421d1704 	addi	r8,r8,29788
   81938:	1209883a 	add	r4,r2,r8
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   8193c:	00900034 	movhi	r2,16384
   81940:	10bfffc4 	addi	r2,r2,-1
   81944:	9886703a 	and	r3,r19,r2
   81948:	20c00215 	stw	r3,8(r4)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   8194c:	9004c03a 	cmpne	r2,r18,zero
   81950:	1000121e 	bne	r2,zero,8199c <open+0xf0>

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   81954:	18900034 	orhi	r2,r3,16384
   81958:	20800215 	stw	r2,8(r4)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   8195c:	00800234 	movhi	r2,8
   81960:	109f7f04 	addi	r2,r2,32252
   81964:	11c00017 	ldw	r7,0(r2)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   81968:	21800017 	ldw	r6,0(r4)
   8196c:	000b883a 	mov	r5,zero
   81970:	4007883a 	mov	r3,r8
   81974:	02400044 	movi	r9,1
   81978:	02000304 	movi	r8,12
   8197c:	18800017 	ldw	r2,0(r3)
   81980:	1180031e 	bne	r2,r6,81990 <open+0xe4>
   81984:	18800217 	ldw	r2,8(r3)
   81988:	1000010e 	bge	r2,zero,81990 <open+0xe4>
   8198c:	193fe01e 	bne	r3,r4,81910 <open+0x64>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   81990:	2a4b883a 	add	r5,r5,r9
   81994:	1a07883a 	add	r3,r3,r8
   81998:	397ff82e 	bgeu	r7,r5,8197c <open+0xd0>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   8199c:	80800317 	ldw	r2,12(r16)
   819a0:	10001726 	beq	r2,zero,81a00 <open+0x154>
   819a4:	a00b883a 	mov	r5,r20
   819a8:	980d883a 	mov	r6,r19
   819ac:	a80f883a 	mov	r7,r21
   819b0:	103ee83a 	callr	r2
   819b4:	1021883a 	mov	r16,r2
    status = -ENODEV;
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   819b8:	1000110e 	bge	r2,zero,81a00 <open+0x154>
  {
    alt_release_fd (index);  
   819bc:	8809883a 	mov	r4,r17
   819c0:	0081a280 	call	81a28 <alt_release_fd>
   819c4:	00800234 	movhi	r2,8
   819c8:	109f8004 	addi	r2,r2,32256
   819cc:	10800017 	ldw	r2,0(r2)
   819d0:	1000031e 	bne	r2,zero,819e0 <open+0x134>
   819d4:	00c00274 	movhi	r3,9
   819d8:	18ee3e04 	addi	r3,r3,-18184
   819dc:	00000206 	br	819e8 <open+0x13c>
   819e0:	103ee83a 	callr	r2
   819e4:	1007883a 	mov	r3,r2
    ALT_ERRNO = -status;
   819e8:	0405c83a 	sub	r2,zero,r16
   819ec:	18800015 	stw	r2,0(r3)
   819f0:	047fffc4 	movi	r17,-1
   819f4:	00000206 	br	81a00 <open+0x154>
   819f8:	1021883a 	mov	r16,r2
   819fc:	003fef06 	br	819bc <open+0x110>
  }
  
  /* return the reference upon success */

  return index;
}
   81a00:	8805883a 	mov	r2,r17
   81a04:	dfc00617 	ldw	ra,24(sp)
   81a08:	dd400517 	ldw	r21,20(sp)
   81a0c:	dd000417 	ldw	r20,16(sp)
   81a10:	dcc00317 	ldw	r19,12(sp)
   81a14:	dc800217 	ldw	r18,8(sp)
   81a18:	dc400117 	ldw	r17,4(sp)
   81a1c:	dc000017 	ldw	r16,0(sp)
   81a20:	dec00704 	addi	sp,sp,28
   81a24:	f800283a 	ret

00081a28 <alt_release_fd>:
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  if (fd > 2)
   81a28:	00800084 	movi	r2,2
   81a2c:	1100060e 	bge	r2,r4,81a48 <alt_release_fd+0x20>
  {
    alt_fd_list[fd].fd_flags = 0;
   81a30:	20800324 	muli	r2,r4,12
   81a34:	00c00234 	movhi	r3,8
   81a38:	18dd1704 	addi	r3,r3,29788
   81a3c:	10c5883a 	add	r2,r2,r3
   81a40:	10000215 	stw	zero,8(r2)
    alt_fd_list[fd].dev      = 0;
   81a44:	10000015 	stw	zero,0(r2)
   81a48:	f800283a 	ret

00081a4c <alt_remap_uncached>:
 * Convert a pointer to a block of cached memory, into a block of
 * uncached memory.
 */

volatile void* alt_remap_uncached (void* ptr, alt_u32 len)
{
   81a4c:	defffe04 	addi	sp,sp,-8
   81a50:	dfc00115 	stw	ra,4(sp)
   81a54:	dc000015 	stw	r16,0(sp)
   81a58:	2021883a 	mov	r16,r4
  alt_dcache_flush (ptr, len);
   81a5c:	0081b5c0 	call	81b5c <alt_dcache_flush>
  return (volatile void*) (((alt_u32) ptr) | BYPASS_DCACHE_MASK);
}
   81a60:	80a00034 	orhi	r2,r16,32768
   81a64:	dfc00117 	ldw	ra,4(sp)
   81a68:	dc000017 	ldw	r16,0(sp)
   81a6c:	dec00204 	addi	sp,sp,8
   81a70:	f800283a 	ret

00081a74 <alt_alarm_stop>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   81a74:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   81a78:	00bfff84 	movi	r2,-2
   81a7c:	2884703a 	and	r2,r5,r2
   81a80:	1001703a 	wrctl	status,r2
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   81a84:	20c00017 	ldw	r3,0(r4)
   81a88:	20800117 	ldw	r2,4(r4)
   81a8c:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
   81a90:	20800117 	ldw	r2,4(r4)
   81a94:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   81a98:	21000115 	stw	r4,4(r4)
  entry->next     = entry;
   81a9c:	21000015 	stw	r4,0(r4)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   81aa0:	2801703a 	wrctl	status,r5
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
  alt_llist_remove (&alarm->llist);
  alt_irq_enable_all (irq_context);
}
   81aa4:	f800283a 	ret

00081aa8 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   81aa8:	defffd04 	addi	sp,sp,-12
   81aac:	dfc00215 	stw	ra,8(sp)
   81ab0:	dc400115 	stw	r17,4(sp)
   81ab4:	dc000015 	stw	r16,0(sp)
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   81ab8:	d4200917 	ldw	r16,-32732(gp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   81abc:	d0aec417 	ldw	r2,-17648(gp)
   81ac0:	10800044 	addi	r2,r2,1
   81ac4:	d0aec415 	stw	r2,-17648(gp)
   81ac8:	00001b06 	br	81b38 <alt_tick+0x90>

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  {
    next = (alt_alarm*) alarm->llist.next;
   81acc:	84400017 	ldw	r17,0(r16)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   81ad0:	80800403 	ldbu	r2,16(r16)
   81ad4:	10000326 	beq	r2,zero,81ae4 <alt_tick+0x3c>
   81ad8:	d0aec417 	ldw	r2,-17648(gp)
   81adc:	1000011e 	bne	r2,zero,81ae4 <alt_tick+0x3c>
    {
      alarm->rollover = 0;
   81ae0:	80000405 	stb	zero,16(r16)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   81ae4:	d0eec417 	ldw	r3,-17648(gp)
   81ae8:	80800217 	ldw	r2,8(r16)
   81aec:	18801136 	bltu	r3,r2,81b34 <alt_tick+0x8c>
   81af0:	80800403 	ldbu	r2,16(r16)
   81af4:	10000f1e 	bne	r2,zero,81b34 <alt_tick+0x8c>
    {
      next_callback = alarm->callback (alarm->context);
   81af8:	80800317 	ldw	r2,12(r16)
   81afc:	81000517 	ldw	r4,20(r16)
   81b00:	103ee83a 	callr	r2
   81b04:	1007883a 	mov	r3,r2

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   81b08:	1000031e 	bne	r2,zero,81b18 <alt_tick+0x70>
      {
        alt_alarm_stop (alarm);
   81b0c:	8009883a 	mov	r4,r16
   81b10:	0081a740 	call	81a74 <alt_alarm_stop>
   81b14:	00000706 	br	81b34 <alt_tick+0x8c>
      }
      else
      {
        alarm->time += next_callback;
   81b18:	80800217 	ldw	r2,8(r16)
   81b1c:	1885883a 	add	r2,r3,r2
   81b20:	80800215 	stw	r2,8(r16)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   81b24:	d0eec417 	ldw	r3,-17648(gp)
   81b28:	10c0022e 	bgeu	r2,r3,81b34 <alt_tick+0x8c>
        {
          alarm->rollover = 1;
   81b2c:	00800044 	movi	r2,1
   81b30:	80800405 	stb	r2,16(r16)
   81b34:	8821883a 	mov	r16,r17

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   81b38:	d0a00904 	addi	r2,gp,-32732
   81b3c:	80bfe31e 	bne	r16,r2,81acc <alt_tick+0x24>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
   81b40:	dfc00217 	ldw	ra,8(sp)
   81b44:	dc400117 	ldw	r17,4(sp)
   81b48:	dc000017 	ldw	r16,0(sp)
   81b4c:	dec00304 	addi	sp,sp,12
   81b50:	f800283a 	ret

00081b54 <altera_nios2_qsys_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
   81b54:	000170fa 	wrctl	ienable,zero
}
   81b58:	f800283a 	ret

00081b5c <alt_dcache_flush>:
  {
    ALT_FLUSH_DATA(i);
  }

#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   81b5c:	f800283a 	ret

00081b60 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   81b60:	defff904 	addi	sp,sp,-28
   81b64:	dfc00615 	stw	ra,24(sp)
   81b68:	dd400515 	stw	r21,20(sp)
   81b6c:	dd000415 	stw	r20,16(sp)
   81b70:	dcc00315 	stw	r19,12(sp)
   81b74:	dc800215 	stw	r18,8(sp)
   81b78:	dc400115 	stw	r17,4(sp)
   81b7c:	dc000015 	stw	r16,0(sp)
   81b80:	2025883a 	mov	r18,r4
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   81b84:	00800234 	movhi	r2,8
   81b88:	109f7b04 	addi	r2,r2,32236
   81b8c:	14400017 	ldw	r17,0(r2)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   81b90:	102b883a 	mov	r21,r2
   81b94:	88801626 	beq	r17,r2,81bf0 <alt_find_file+0x90>
   81b98:	053fffc4 	movi	r20,-1
   81b9c:	04c00bc4 	movi	r19,47
  {
    len = strlen(next->name);
   81ba0:	8c000217 	ldw	r16,8(r17)
   81ba4:	8009883a 	mov	r4,r16
   81ba8:	0081ffc0 	call	81ffc <strlen>
   81bac:	1007883a 	mov	r3,r2
    
    if (next->name[len-1] == '/')
   81bb0:	8085883a 	add	r2,r16,r2
   81bb4:	1505883a 	add	r2,r2,r20
   81bb8:	10800007 	ldb	r2,0(r2)
   81bbc:	14c0011e 	bne	r2,r19,81bc4 <alt_find_file+0x64>
    {
      len -= 1;
   81bc0:	1d07883a 	add	r3,r3,r20
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   81bc4:	1c85883a 	add	r2,r3,r18
   81bc8:	10800007 	ldb	r2,0(r2)
   81bcc:	14c00126 	beq	r2,r19,81bd4 <alt_find_file+0x74>
   81bd0:	1000051e 	bne	r2,zero,81be8 <alt_find_file+0x88>
   81bd4:	8009883a 	mov	r4,r16
   81bd8:	900b883a 	mov	r5,r18
   81bdc:	180d883a 	mov	r6,r3
   81be0:	0081cfc0 	call	81cfc <memcmp>
   81be4:	10000326 	beq	r2,zero,81bf4 <alt_find_file+0x94>
    {
      /* match found */

      return next;
    }
    next = (alt_dev*) next->llist.next;
   81be8:	8c400017 	ldw	r17,0(r17)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   81bec:	8d7fec1e 	bne	r17,r21,81ba0 <alt_find_file+0x40>
   81bf0:	0023883a 	mov	r17,zero
  }
  
  /* No match found */
  
  return NULL;     
}
   81bf4:	8805883a 	mov	r2,r17
   81bf8:	dfc00617 	ldw	ra,24(sp)
   81bfc:	dd400517 	ldw	r21,20(sp)
   81c00:	dd000417 	ldw	r20,16(sp)
   81c04:	dcc00317 	ldw	r19,12(sp)
   81c08:	dc800217 	ldw	r18,8(sp)
   81c0c:	dc400117 	ldw	r17,4(sp)
   81c10:	dc000017 	ldw	r16,0(sp)
   81c14:	dec00704 	addi	sp,sp,28
   81c18:	f800283a 	ret

00081c1c <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   81c1c:	000b883a 	mov	r5,zero
   81c20:	00c00234 	movhi	r3,8
   81c24:	18dd1704 	addi	r3,r3,29788
   81c28:	02000304 	movi	r8,12
   81c2c:	02400234 	movhi	r9,8
   81c30:	4a5f7f04 	addi	r9,r9,32252
   81c34:	01c00044 	movi	r7,1
   81c38:	01800804 	movi	r6,32
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  {
    if (!alt_fd_list[i].dev)
   81c3c:	18800017 	ldw	r2,0(r3)
   81c40:	10000c1e 	bne	r2,zero,81c74 <alt_get_fd+0x58>
    {
      alt_fd_list[i].dev = dev;
   81c44:	2a05383a 	mul	r2,r5,r8
   81c48:	00c00234 	movhi	r3,8
   81c4c:	18dd1704 	addi	r3,r3,29788
   81c50:	10c5883a 	add	r2,r2,r3
   81c54:	11000015 	stw	r4,0(r2)
      if (i > alt_max_fd)
   81c58:	48800017 	ldw	r2,0(r9)
   81c5c:	11400216 	blt	r2,r5,81c68 <alt_get_fd+0x4c>
   81c60:	2805883a 	mov	r2,r5
   81c64:	f800283a 	ret
      {
        alt_max_fd = i;
   81c68:	49400015 	stw	r5,0(r9)
   81c6c:	2805883a 	mov	r2,r5
   81c70:	f800283a 	ret
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   81c74:	29cb883a 	add	r5,r5,r7
   81c78:	1a07883a 	add	r3,r3,r8
   81c7c:	29bfef1e 	bne	r5,r6,81c3c <alt_get_fd+0x20>
   81c80:	00bffa04 	movi	r2,-24
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
}
   81c84:	f800283a 	ret

00081c88 <alt_icache_flush>:
  if (len > NIOS2_ICACHE_SIZE)
  {
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;
   81c88:	2007883a 	mov	r3,r4
   81c8c:	00840004 	movi	r2,4096
   81c90:	1140012e 	bgeu	r2,r5,81c98 <alt_icache_flush+0x10>
   81c94:	100b883a 	mov	r5,r2
   81c98:	194b883a 	add	r5,r3,r5

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   81c9c:	1940042e 	bgeu	r3,r5,81cb0 <alt_icache_flush+0x28>
   81ca0:	00800804 	movi	r2,32
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   81ca4:	1800603a 	flushi	r3
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   81ca8:	1887883a 	add	r3,r3,r2
   81cac:	197ffd36 	bltu	r3,r5,81ca4 <alt_icache_flush+0x1c>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   81cb0:	208007cc 	andi	r2,r4,31
   81cb4:	10000126 	beq	r2,zero,81cbc <alt_icache_flush+0x34>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   81cb8:	1800603a 	flushi	r3
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   81cbc:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
   81cc0:	f800283a 	ret

00081cc4 <exit>:
   81cc4:	defffe04 	addi	sp,sp,-8
   81cc8:	000b883a 	mov	r5,zero
   81ccc:	dc000015 	stw	r16,0(sp)
   81cd0:	dfc00115 	stw	ra,4(sp)
   81cd4:	2021883a 	mov	r16,r4
   81cd8:	00822fc0 	call	822fc <__call_exitprocs>
   81cdc:	00800234 	movhi	r2,8
   81ce0:	109f8504 	addi	r2,r2,32276
   81ce4:	11000017 	ldw	r4,0(r2)
   81ce8:	20800f17 	ldw	r2,60(r4)
   81cec:	10000126 	beq	r2,zero,81cf4 <exit+0x30>
   81cf0:	103ee83a 	callr	r2
   81cf4:	8009883a 	mov	r4,r16
   81cf8:	0083e640 	call	83e64 <_exit>

00081cfc <memcmp>:
   81cfc:	00c000c4 	movi	r3,3
   81d00:	1980032e 	bgeu	r3,r6,81d10 <memcmp+0x14>
   81d04:	2144b03a 	or	r2,r4,r5
   81d08:	10c4703a 	and	r2,r2,r3
   81d0c:	10000f26 	beq	r2,zero,81d4c <memcmp+0x50>
   81d10:	31ffffc4 	addi	r7,r6,-1
   81d14:	3000061e 	bne	r6,zero,81d30 <memcmp+0x34>
   81d18:	00000a06 	br	81d44 <memcmp+0x48>
   81d1c:	39ffffc4 	addi	r7,r7,-1
   81d20:	00bfffc4 	movi	r2,-1
   81d24:	21000044 	addi	r4,r4,1
   81d28:	29400044 	addi	r5,r5,1
   81d2c:	38800526 	beq	r7,r2,81d44 <memcmp+0x48>
   81d30:	20c00003 	ldbu	r3,0(r4)
   81d34:	28800003 	ldbu	r2,0(r5)
   81d38:	18bff826 	beq	r3,r2,81d1c <memcmp+0x20>
   81d3c:	1885c83a 	sub	r2,r3,r2
   81d40:	f800283a 	ret
   81d44:	0005883a 	mov	r2,zero
   81d48:	f800283a 	ret
   81d4c:	180f883a 	mov	r7,r3
   81d50:	20c00017 	ldw	r3,0(r4)
   81d54:	28800017 	ldw	r2,0(r5)
   81d58:	18bfed1e 	bne	r3,r2,81d10 <memcmp+0x14>
   81d5c:	31bfff04 	addi	r6,r6,-4
   81d60:	21000104 	addi	r4,r4,4
   81d64:	29400104 	addi	r5,r5,4
   81d68:	39bff936 	bltu	r7,r6,81d50 <memcmp+0x54>
   81d6c:	003fe806 	br	81d10 <memcmp+0x14>

00081d70 <memcpy>:
   81d70:	01c003c4 	movi	r7,15
   81d74:	2007883a 	mov	r3,r4
   81d78:	3980032e 	bgeu	r7,r6,81d88 <memcpy+0x18>
   81d7c:	2904b03a 	or	r2,r5,r4
   81d80:	108000cc 	andi	r2,r2,3
   81d84:	10000926 	beq	r2,zero,81dac <memcpy+0x3c>
   81d88:	30000626 	beq	r6,zero,81da4 <memcpy+0x34>
   81d8c:	30cd883a 	add	r6,r6,r3
   81d90:	28800003 	ldbu	r2,0(r5)
   81d94:	29400044 	addi	r5,r5,1
   81d98:	18800005 	stb	r2,0(r3)
   81d9c:	18c00044 	addi	r3,r3,1
   81da0:	30fffb1e 	bne	r6,r3,81d90 <memcpy+0x20>
   81da4:	2005883a 	mov	r2,r4
   81da8:	f800283a 	ret
   81dac:	3811883a 	mov	r8,r7
   81db0:	200f883a 	mov	r7,r4
   81db4:	28c00017 	ldw	r3,0(r5)
   81db8:	31bffc04 	addi	r6,r6,-16
   81dbc:	38c00015 	stw	r3,0(r7)
   81dc0:	28800117 	ldw	r2,4(r5)
   81dc4:	38800115 	stw	r2,4(r7)
   81dc8:	28c00217 	ldw	r3,8(r5)
   81dcc:	38c00215 	stw	r3,8(r7)
   81dd0:	28800317 	ldw	r2,12(r5)
   81dd4:	29400404 	addi	r5,r5,16
   81dd8:	38800315 	stw	r2,12(r7)
   81ddc:	39c00404 	addi	r7,r7,16
   81de0:	41bff436 	bltu	r8,r6,81db4 <memcpy+0x44>
   81de4:	008000c4 	movi	r2,3
   81de8:	1180072e 	bgeu	r2,r6,81e08 <memcpy+0x98>
   81dec:	1007883a 	mov	r3,r2
   81df0:	28800017 	ldw	r2,0(r5)
   81df4:	31bfff04 	addi	r6,r6,-4
   81df8:	29400104 	addi	r5,r5,4
   81dfc:	38800015 	stw	r2,0(r7)
   81e00:	39c00104 	addi	r7,r7,4
   81e04:	19bffa36 	bltu	r3,r6,81df0 <memcpy+0x80>
   81e08:	3807883a 	mov	r3,r7
   81e0c:	003fde06 	br	81d88 <memcpy+0x18>

00081e10 <putc>:
   81e10:	defffc04 	addi	sp,sp,-16
   81e14:	dc800215 	stw	r18,8(sp)
   81e18:	04800234 	movhi	r18,8
   81e1c:	949f8404 	addi	r18,r18,32272
   81e20:	90c00017 	ldw	r3,0(r18)
   81e24:	dc400115 	stw	r17,4(sp)
   81e28:	dc000015 	stw	r16,0(sp)
   81e2c:	dfc00315 	stw	ra,12(sp)
   81e30:	2023883a 	mov	r17,r4
   81e34:	2821883a 	mov	r16,r5
   81e38:	18000226 	beq	r3,zero,81e44 <putc+0x34>
   81e3c:	18800e17 	ldw	r2,56(r3)
   81e40:	10001126 	beq	r2,zero,81e88 <putc+0x78>
   81e44:	80800217 	ldw	r2,8(r16)
   81e48:	10ffffc4 	addi	r3,r2,-1
   81e4c:	80c00215 	stw	r3,8(r16)
   81e50:	18001316 	blt	r3,zero,81ea0 <putc+0x90>
   81e54:	80800017 	ldw	r2,0(r16)
   81e58:	14400005 	stb	r17,0(r2)
   81e5c:	80c00017 	ldw	r3,0(r16)
   81e60:	18800044 	addi	r2,r3,1
   81e64:	18c00003 	ldbu	r3,0(r3)
   81e68:	80800015 	stw	r2,0(r16)
   81e6c:	1805883a 	mov	r2,r3
   81e70:	dfc00317 	ldw	ra,12(sp)
   81e74:	dc800217 	ldw	r18,8(sp)
   81e78:	dc400117 	ldw	r17,4(sp)
   81e7c:	dc000017 	ldw	r16,0(sp)
   81e80:	dec00404 	addi	sp,sp,16
   81e84:	f800283a 	ret
   81e88:	1809883a 	mov	r4,r3
   81e8c:	00827440 	call	82744 <__sinit>
   81e90:	80800217 	ldw	r2,8(r16)
   81e94:	10ffffc4 	addi	r3,r2,-1
   81e98:	80c00215 	stw	r3,8(r16)
   81e9c:	183fed0e 	bge	r3,zero,81e54 <putc+0x44>
   81ea0:	80800617 	ldw	r2,24(r16)
   81ea4:	18800f16 	blt	r3,r2,81ee4 <putc+0xd4>
   81ea8:	80800017 	ldw	r2,0(r16)
   81eac:	14400005 	stb	r17,0(r2)
   81eb0:	81000017 	ldw	r4,0(r16)
   81eb4:	00800284 	movi	r2,10
   81eb8:	20c00003 	ldbu	r3,0(r4)
   81ebc:	18801226 	beq	r3,r2,81f08 <putc+0xf8>
   81ec0:	20800044 	addi	r2,r4,1
   81ec4:	80800015 	stw	r2,0(r16)
   81ec8:	1805883a 	mov	r2,r3
   81ecc:	dfc00317 	ldw	ra,12(sp)
   81ed0:	dc800217 	ldw	r18,8(sp)
   81ed4:	dc400117 	ldw	r17,4(sp)
   81ed8:	dc000017 	ldw	r16,0(sp)
   81edc:	dec00404 	addi	sp,sp,16
   81ee0:	f800283a 	ret
   81ee4:	91000017 	ldw	r4,0(r18)
   81ee8:	880b883a 	mov	r5,r17
   81eec:	800d883a 	mov	r6,r16
   81ef0:	dfc00317 	ldw	ra,12(sp)
   81ef4:	dc800217 	ldw	r18,8(sp)
   81ef8:	dc400117 	ldw	r17,4(sp)
   81efc:	dc000017 	ldw	r16,0(sp)
   81f00:	dec00404 	addi	sp,sp,16
   81f04:	00820701 	jmpi	82070 <__swbuf_r>
   81f08:	91000017 	ldw	r4,0(r18)
   81f0c:	180b883a 	mov	r5,r3
   81f10:	003ff606 	br	81eec <putc+0xdc>

00081f14 <_putc_r>:
   81f14:	defffc04 	addi	sp,sp,-16
   81f18:	dc400215 	stw	r17,8(sp)
   81f1c:	dc000115 	stw	r16,4(sp)
   81f20:	dfc00315 	stw	ra,12(sp)
   81f24:	2021883a 	mov	r16,r4
   81f28:	2823883a 	mov	r17,r5
   81f2c:	20000226 	beq	r4,zero,81f38 <_putc_r+0x24>
   81f30:	20800e17 	ldw	r2,56(r4)
   81f34:	10001026 	beq	r2,zero,81f78 <_putc_r+0x64>
   81f38:	30800217 	ldw	r2,8(r6)
   81f3c:	10ffffc4 	addi	r3,r2,-1
   81f40:	30c00215 	stw	r3,8(r6)
   81f44:	18001316 	blt	r3,zero,81f94 <_putc_r+0x80>
   81f48:	30800017 	ldw	r2,0(r6)
   81f4c:	14400005 	stb	r17,0(r2)
   81f50:	30c00017 	ldw	r3,0(r6)
   81f54:	18800044 	addi	r2,r3,1
   81f58:	18c00003 	ldbu	r3,0(r3)
   81f5c:	30800015 	stw	r2,0(r6)
   81f60:	1805883a 	mov	r2,r3
   81f64:	dfc00317 	ldw	ra,12(sp)
   81f68:	dc400217 	ldw	r17,8(sp)
   81f6c:	dc000117 	ldw	r16,4(sp)
   81f70:	dec00404 	addi	sp,sp,16
   81f74:	f800283a 	ret
   81f78:	d9800015 	stw	r6,0(sp)
   81f7c:	00827440 	call	82744 <__sinit>
   81f80:	d9800017 	ldw	r6,0(sp)
   81f84:	30800217 	ldw	r2,8(r6)
   81f88:	10ffffc4 	addi	r3,r2,-1
   81f8c:	30c00215 	stw	r3,8(r6)
   81f90:	183fed0e 	bge	r3,zero,81f48 <_putc_r+0x34>
   81f94:	30800617 	ldw	r2,24(r6)
   81f98:	18800e16 	blt	r3,r2,81fd4 <_putc_r+0xc0>
   81f9c:	30800017 	ldw	r2,0(r6)
   81fa0:	14400005 	stb	r17,0(r2)
   81fa4:	31000017 	ldw	r4,0(r6)
   81fa8:	00800284 	movi	r2,10
   81fac:	20c00003 	ldbu	r3,0(r4)
   81fb0:	18800f26 	beq	r3,r2,81ff0 <_putc_r+0xdc>
   81fb4:	20800044 	addi	r2,r4,1
   81fb8:	30800015 	stw	r2,0(r6)
   81fbc:	1805883a 	mov	r2,r3
   81fc0:	dfc00317 	ldw	ra,12(sp)
   81fc4:	dc400217 	ldw	r17,8(sp)
   81fc8:	dc000117 	ldw	r16,4(sp)
   81fcc:	dec00404 	addi	sp,sp,16
   81fd0:	f800283a 	ret
   81fd4:	8009883a 	mov	r4,r16
   81fd8:	880b883a 	mov	r5,r17
   81fdc:	dfc00317 	ldw	ra,12(sp)
   81fe0:	dc400217 	ldw	r17,8(sp)
   81fe4:	dc000117 	ldw	r16,4(sp)
   81fe8:	dec00404 	addi	sp,sp,16
   81fec:	00820701 	jmpi	82070 <__swbuf_r>
   81ff0:	8009883a 	mov	r4,r16
   81ff4:	180b883a 	mov	r5,r3
   81ff8:	003ff806 	br	81fdc <_putc_r+0xc8>

00081ffc <strlen>:
   81ffc:	208000cc 	andi	r2,r4,3
   82000:	2011883a 	mov	r8,r4
   82004:	1000161e 	bne	r2,zero,82060 <strlen+0x64>
   82008:	20c00017 	ldw	r3,0(r4)
   8200c:	017fbff4 	movhi	r5,65279
   82010:	297fbfc4 	addi	r5,r5,-257
   82014:	01e02074 	movhi	r7,32897
   82018:	39e02004 	addi	r7,r7,-32640
   8201c:	1945883a 	add	r2,r3,r5
   82020:	11c4703a 	and	r2,r2,r7
   82024:	00c6303a 	nor	r3,zero,r3
   82028:	1886703a 	and	r3,r3,r2
   8202c:	18000c1e 	bne	r3,zero,82060 <strlen+0x64>
   82030:	280d883a 	mov	r6,r5
   82034:	380b883a 	mov	r5,r7
   82038:	21000104 	addi	r4,r4,4
   8203c:	20800017 	ldw	r2,0(r4)
   82040:	1187883a 	add	r3,r2,r6
   82044:	1946703a 	and	r3,r3,r5
   82048:	0084303a 	nor	r2,zero,r2
   8204c:	10c4703a 	and	r2,r2,r3
   82050:	103ff926 	beq	r2,zero,82038 <strlen+0x3c>
   82054:	20800007 	ldb	r2,0(r4)
   82058:	10000326 	beq	r2,zero,82068 <strlen+0x6c>
   8205c:	21000044 	addi	r4,r4,1
   82060:	20800007 	ldb	r2,0(r4)
   82064:	103ffd1e 	bne	r2,zero,8205c <strlen+0x60>
   82068:	2205c83a 	sub	r2,r4,r8
   8206c:	f800283a 	ret

00082070 <__swbuf_r>:
   82070:	defffc04 	addi	sp,sp,-16
   82074:	dc400215 	stw	r17,8(sp)
   82078:	dc000115 	stw	r16,4(sp)
   8207c:	dfc00315 	stw	ra,12(sp)
   82080:	2023883a 	mov	r17,r4
   82084:	2821883a 	mov	r16,r5
   82088:	20000226 	beq	r4,zero,82094 <__swbuf_r+0x24>
   8208c:	20800e17 	ldw	r2,56(r4)
   82090:	10002f26 	beq	r2,zero,82150 <__swbuf_r+0xe0>
   82094:	3080030b 	ldhu	r2,12(r6)
   82098:	30c00617 	ldw	r3,24(r6)
   8209c:	1080020c 	andi	r2,r2,8
   820a0:	30c00215 	stw	r3,8(r6)
   820a4:	10002226 	beq	r2,zero,82130 <__swbuf_r+0xc0>
   820a8:	30c00417 	ldw	r3,16(r6)
   820ac:	18002026 	beq	r3,zero,82130 <__swbuf_r+0xc0>
   820b0:	31000017 	ldw	r4,0(r6)
   820b4:	30800517 	ldw	r2,20(r6)
   820b8:	20c7c83a 	sub	r3,r4,r3
   820bc:	18802f0e 	bge	r3,r2,8217c <__swbuf_r+0x10c>
   820c0:	19400044 	addi	r5,r3,1
   820c4:	30800217 	ldw	r2,8(r6)
   820c8:	84003fcc 	andi	r16,r16,255
   820cc:	20c00044 	addi	r3,r4,1
   820d0:	10bfffc4 	addi	r2,r2,-1
   820d4:	30800215 	stw	r2,8(r6)
   820d8:	24000005 	stb	r16,0(r4)
   820dc:	30800517 	ldw	r2,20(r6)
   820e0:	30c00015 	stw	r3,0(r6)
   820e4:	11400c26 	beq	r2,r5,82118 <__swbuf_r+0xa8>
   820e8:	3080030b 	ldhu	r2,12(r6)
   820ec:	1080004c 	andi	r2,r2,1
   820f0:	1005003a 	cmpeq	r2,r2,zero
   820f4:	10000626 	beq	r2,zero,82110 <__swbuf_r+0xa0>
   820f8:	8005883a 	mov	r2,r16
   820fc:	dfc00317 	ldw	ra,12(sp)
   82100:	dc400217 	ldw	r17,8(sp)
   82104:	dc000117 	ldw	r16,4(sp)
   82108:	dec00404 	addi	sp,sp,16
   8210c:	f800283a 	ret
   82110:	00800284 	movi	r2,10
   82114:	80bff81e 	bne	r16,r2,820f8 <__swbuf_r+0x88>
   82118:	8809883a 	mov	r4,r17
   8211c:	300b883a 	mov	r5,r6
   82120:	00824ac0 	call	824ac <_fflush_r>
   82124:	103ff426 	beq	r2,zero,820f8 <__swbuf_r+0x88>
   82128:	043fffc4 	movi	r16,-1
   8212c:	003ff206 	br	820f8 <__swbuf_r+0x88>
   82130:	300b883a 	mov	r5,r6
   82134:	8809883a 	mov	r4,r17
   82138:	d9800015 	stw	r6,0(sp)
   8213c:	00821bc0 	call	821bc <__swsetup_r>
   82140:	d9800017 	ldw	r6,0(sp)
   82144:	1000061e 	bne	r2,zero,82160 <__swbuf_r+0xf0>
   82148:	30c00417 	ldw	r3,16(r6)
   8214c:	003fd806 	br	820b0 <__swbuf_r+0x40>
   82150:	d9800015 	stw	r6,0(sp)
   82154:	00827440 	call	82744 <__sinit>
   82158:	d9800017 	ldw	r6,0(sp)
   8215c:	003fcd06 	br	82094 <__swbuf_r+0x24>
   82160:	3080030b 	ldhu	r2,12(r6)
   82164:	00c00244 	movi	r3,9
   82168:	043fffc4 	movi	r16,-1
   8216c:	10801014 	ori	r2,r2,64
   82170:	3080030d 	sth	r2,12(r6)
   82174:	88c00015 	stw	r3,0(r17)
   82178:	003fdf06 	br	820f8 <__swbuf_r+0x88>
   8217c:	300b883a 	mov	r5,r6
   82180:	8809883a 	mov	r4,r17
   82184:	d9800015 	stw	r6,0(sp)
   82188:	00824ac0 	call	824ac <_fflush_r>
   8218c:	d9800017 	ldw	r6,0(sp)
   82190:	103fe51e 	bne	r2,zero,82128 <__swbuf_r+0xb8>
   82194:	31000017 	ldw	r4,0(r6)
   82198:	01400044 	movi	r5,1
   8219c:	003fc906 	br	820c4 <__swbuf_r+0x54>

000821a0 <__swbuf>:
   821a0:	01800234 	movhi	r6,8
   821a4:	319f8404 	addi	r6,r6,32272
   821a8:	2007883a 	mov	r3,r4
   821ac:	31000017 	ldw	r4,0(r6)
   821b0:	280d883a 	mov	r6,r5
   821b4:	180b883a 	mov	r5,r3
   821b8:	00820701 	jmpi	82070 <__swbuf_r>

000821bc <__swsetup_r>:
   821bc:	00800234 	movhi	r2,8
   821c0:	109f8404 	addi	r2,r2,32272
   821c4:	10c00017 	ldw	r3,0(r2)
   821c8:	defffd04 	addi	sp,sp,-12
   821cc:	dc400115 	stw	r17,4(sp)
   821d0:	dc000015 	stw	r16,0(sp)
   821d4:	dfc00215 	stw	ra,8(sp)
   821d8:	2023883a 	mov	r17,r4
   821dc:	2821883a 	mov	r16,r5
   821e0:	18000226 	beq	r3,zero,821ec <__swsetup_r+0x30>
   821e4:	18800e17 	ldw	r2,56(r3)
   821e8:	10001f26 	beq	r2,zero,82268 <__swsetup_r+0xac>
   821ec:	8100030b 	ldhu	r4,12(r16)
   821f0:	2080020c 	andi	r2,r4,8
   821f4:	10002826 	beq	r2,zero,82298 <__swsetup_r+0xdc>
   821f8:	81400417 	ldw	r5,16(r16)
   821fc:	28001d26 	beq	r5,zero,82274 <__swsetup_r+0xb8>
   82200:	2080004c 	andi	r2,r4,1
   82204:	1005003a 	cmpeq	r2,r2,zero
   82208:	10000b26 	beq	r2,zero,82238 <__swsetup_r+0x7c>
   8220c:	2080008c 	andi	r2,r4,2
   82210:	10001226 	beq	r2,zero,8225c <__swsetup_r+0xa0>
   82214:	0005883a 	mov	r2,zero
   82218:	80800215 	stw	r2,8(r16)
   8221c:	28000b26 	beq	r5,zero,8224c <__swsetup_r+0x90>
   82220:	0005883a 	mov	r2,zero
   82224:	dfc00217 	ldw	ra,8(sp)
   82228:	dc400117 	ldw	r17,4(sp)
   8222c:	dc000017 	ldw	r16,0(sp)
   82230:	dec00304 	addi	sp,sp,12
   82234:	f800283a 	ret
   82238:	80800517 	ldw	r2,20(r16)
   8223c:	80000215 	stw	zero,8(r16)
   82240:	0085c83a 	sub	r2,zero,r2
   82244:	80800615 	stw	r2,24(r16)
   82248:	283ff51e 	bne	r5,zero,82220 <__swsetup_r+0x64>
   8224c:	2080200c 	andi	r2,r4,128
   82250:	103ff326 	beq	r2,zero,82220 <__swsetup_r+0x64>
   82254:	00bfffc4 	movi	r2,-1
   82258:	003ff206 	br	82224 <__swsetup_r+0x68>
   8225c:	80800517 	ldw	r2,20(r16)
   82260:	80800215 	stw	r2,8(r16)
   82264:	003fed06 	br	8221c <__swsetup_r+0x60>
   82268:	1809883a 	mov	r4,r3
   8226c:	00827440 	call	82744 <__sinit>
   82270:	003fde06 	br	821ec <__swsetup_r+0x30>
   82274:	20c0a00c 	andi	r3,r4,640
   82278:	00808004 	movi	r2,512
   8227c:	18bfe026 	beq	r3,r2,82200 <__swsetup_r+0x44>
   82280:	8809883a 	mov	r4,r17
   82284:	800b883a 	mov	r5,r16
   82288:	0082f5c0 	call	82f5c <__smakebuf_r>
   8228c:	8100030b 	ldhu	r4,12(r16)
   82290:	81400417 	ldw	r5,16(r16)
   82294:	003fda06 	br	82200 <__swsetup_r+0x44>
   82298:	2080040c 	andi	r2,r4,16
   8229c:	103fed26 	beq	r2,zero,82254 <__swsetup_r+0x98>
   822a0:	2080010c 	andi	r2,r4,4
   822a4:	10001226 	beq	r2,zero,822f0 <__swsetup_r+0x134>
   822a8:	81400c17 	ldw	r5,48(r16)
   822ac:	28000526 	beq	r5,zero,822c4 <__swsetup_r+0x108>
   822b0:	80801004 	addi	r2,r16,64
   822b4:	28800226 	beq	r5,r2,822c0 <__swsetup_r+0x104>
   822b8:	8809883a 	mov	r4,r17
   822bc:	0082ac80 	call	82ac8 <_free_r>
   822c0:	80000c15 	stw	zero,48(r16)
   822c4:	8080030b 	ldhu	r2,12(r16)
   822c8:	81400417 	ldw	r5,16(r16)
   822cc:	80000115 	stw	zero,4(r16)
   822d0:	10bff6cc 	andi	r2,r2,65499
   822d4:	8080030d 	sth	r2,12(r16)
   822d8:	81400015 	stw	r5,0(r16)
   822dc:	8080030b 	ldhu	r2,12(r16)
   822e0:	10800214 	ori	r2,r2,8
   822e4:	113fffcc 	andi	r4,r2,65535
   822e8:	8080030d 	sth	r2,12(r16)
   822ec:	003fc306 	br	821fc <__swsetup_r+0x40>
   822f0:	81400417 	ldw	r5,16(r16)
   822f4:	003ff906 	br	822dc <__swsetup_r+0x120>

000822f8 <register_fini>:
   822f8:	f800283a 	ret

000822fc <__call_exitprocs>:
   822fc:	00800234 	movhi	r2,8
   82300:	109f8504 	addi	r2,r2,32276
   82304:	10800017 	ldw	r2,0(r2)
   82308:	defff304 	addi	sp,sp,-52
   8230c:	df000b15 	stw	fp,44(sp)
   82310:	d8800115 	stw	r2,4(sp)
   82314:	00800034 	movhi	r2,0
   82318:	10800004 	addi	r2,r2,0
   8231c:	1005003a 	cmpeq	r2,r2,zero
   82320:	d8800215 	stw	r2,8(sp)
   82324:	d8800117 	ldw	r2,4(sp)
   82328:	dd400815 	stw	r21,32(sp)
   8232c:	dd000715 	stw	r20,28(sp)
   82330:	10805204 	addi	r2,r2,328
   82334:	dfc00c15 	stw	ra,48(sp)
   82338:	ddc00a15 	stw	r23,40(sp)
   8233c:	dd800915 	stw	r22,36(sp)
   82340:	dcc00615 	stw	r19,24(sp)
   82344:	dc800515 	stw	r18,20(sp)
   82348:	dc400415 	stw	r17,16(sp)
   8234c:	dc000315 	stw	r16,12(sp)
   82350:	282b883a 	mov	r21,r5
   82354:	2039883a 	mov	fp,r4
   82358:	d8800015 	stw	r2,0(sp)
   8235c:	2829003a 	cmpeq	r20,r5,zero
   82360:	d8800117 	ldw	r2,4(sp)
   82364:	14405217 	ldw	r17,328(r2)
   82368:	88001026 	beq	r17,zero,823ac <__call_exitprocs+0xb0>
   8236c:	ddc00017 	ldw	r23,0(sp)
   82370:	88800117 	ldw	r2,4(r17)
   82374:	8c802204 	addi	r18,r17,136
   82378:	143fffc4 	addi	r16,r2,-1
   8237c:	80000916 	blt	r16,zero,823a4 <__call_exitprocs+0xa8>
   82380:	05bfffc4 	movi	r22,-1
   82384:	a000151e 	bne	r20,zero,823dc <__call_exitprocs+0xe0>
   82388:	8409883a 	add	r4,r16,r16
   8238c:	2105883a 	add	r2,r4,r4
   82390:	1485883a 	add	r2,r2,r18
   82394:	10c02017 	ldw	r3,128(r2)
   82398:	a8c01126 	beq	r21,r3,823e0 <__call_exitprocs+0xe4>
   8239c:	843fffc4 	addi	r16,r16,-1
   823a0:	85bff81e 	bne	r16,r22,82384 <__call_exitprocs+0x88>
   823a4:	d8800217 	ldw	r2,8(sp)
   823a8:	10003126 	beq	r2,zero,82470 <__call_exitprocs+0x174>
   823ac:	dfc00c17 	ldw	ra,48(sp)
   823b0:	df000b17 	ldw	fp,44(sp)
   823b4:	ddc00a17 	ldw	r23,40(sp)
   823b8:	dd800917 	ldw	r22,36(sp)
   823bc:	dd400817 	ldw	r21,32(sp)
   823c0:	dd000717 	ldw	r20,28(sp)
   823c4:	dcc00617 	ldw	r19,24(sp)
   823c8:	dc800517 	ldw	r18,20(sp)
   823cc:	dc400417 	ldw	r17,16(sp)
   823d0:	dc000317 	ldw	r16,12(sp)
   823d4:	dec00d04 	addi	sp,sp,52
   823d8:	f800283a 	ret
   823dc:	8409883a 	add	r4,r16,r16
   823e0:	88c00117 	ldw	r3,4(r17)
   823e4:	2105883a 	add	r2,r4,r4
   823e8:	1445883a 	add	r2,r2,r17
   823ec:	18ffffc4 	addi	r3,r3,-1
   823f0:	11800217 	ldw	r6,8(r2)
   823f4:	1c001526 	beq	r3,r16,8244c <__call_exitprocs+0x150>
   823f8:	10000215 	stw	zero,8(r2)
   823fc:	303fe726 	beq	r6,zero,8239c <__call_exitprocs+0xa0>
   82400:	00c00044 	movi	r3,1
   82404:	1c06983a 	sll	r3,r3,r16
   82408:	90804017 	ldw	r2,256(r18)
   8240c:	8cc00117 	ldw	r19,4(r17)
   82410:	1884703a 	and	r2,r3,r2
   82414:	10001426 	beq	r2,zero,82468 <__call_exitprocs+0x16c>
   82418:	90804117 	ldw	r2,260(r18)
   8241c:	1884703a 	and	r2,r3,r2
   82420:	10000c1e 	bne	r2,zero,82454 <__call_exitprocs+0x158>
   82424:	2105883a 	add	r2,r4,r4
   82428:	1485883a 	add	r2,r2,r18
   8242c:	11400017 	ldw	r5,0(r2)
   82430:	e009883a 	mov	r4,fp
   82434:	303ee83a 	callr	r6
   82438:	88800117 	ldw	r2,4(r17)
   8243c:	98bfc81e 	bne	r19,r2,82360 <__call_exitprocs+0x64>
   82440:	b8800017 	ldw	r2,0(r23)
   82444:	147fd526 	beq	r2,r17,8239c <__call_exitprocs+0xa0>
   82448:	003fc506 	br	82360 <__call_exitprocs+0x64>
   8244c:	8c000115 	stw	r16,4(r17)
   82450:	003fea06 	br	823fc <__call_exitprocs+0x100>
   82454:	2105883a 	add	r2,r4,r4
   82458:	1485883a 	add	r2,r2,r18
   8245c:	11000017 	ldw	r4,0(r2)
   82460:	303ee83a 	callr	r6
   82464:	003ff406 	br	82438 <__call_exitprocs+0x13c>
   82468:	303ee83a 	callr	r6
   8246c:	003ff206 	br	82438 <__call_exitprocs+0x13c>
   82470:	88800117 	ldw	r2,4(r17)
   82474:	1000081e 	bne	r2,zero,82498 <__call_exitprocs+0x19c>
   82478:	89000017 	ldw	r4,0(r17)
   8247c:	20000726 	beq	r4,zero,8249c <__call_exitprocs+0x1a0>
   82480:	b9000015 	stw	r4,0(r23)
   82484:	8809883a 	mov	r4,r17
   82488:	00000000 	call	0 <__reset-0x80000>
   8248c:	bc400017 	ldw	r17,0(r23)
   82490:	883fb71e 	bne	r17,zero,82370 <__call_exitprocs+0x74>
   82494:	003fc506 	br	823ac <__call_exitprocs+0xb0>
   82498:	89000017 	ldw	r4,0(r17)
   8249c:	882f883a 	mov	r23,r17
   824a0:	2023883a 	mov	r17,r4
   824a4:	883fb21e 	bne	r17,zero,82370 <__call_exitprocs+0x74>
   824a8:	003fc006 	br	823ac <__call_exitprocs+0xb0>

000824ac <_fflush_r>:
   824ac:	defffb04 	addi	sp,sp,-20
   824b0:	dcc00315 	stw	r19,12(sp)
   824b4:	dc800215 	stw	r18,8(sp)
   824b8:	dfc00415 	stw	ra,16(sp)
   824bc:	dc400115 	stw	r17,4(sp)
   824c0:	dc000015 	stw	r16,0(sp)
   824c4:	2027883a 	mov	r19,r4
   824c8:	2825883a 	mov	r18,r5
   824cc:	20000226 	beq	r4,zero,824d8 <_fflush_r+0x2c>
   824d0:	20800e17 	ldw	r2,56(r4)
   824d4:	10005626 	beq	r2,zero,82630 <_fflush_r+0x184>
   824d8:	9100030b 	ldhu	r4,12(r18)
   824dc:	20ffffcc 	andi	r3,r4,65535
   824e0:	18e0001c 	xori	r3,r3,32768
   824e4:	18e00004 	addi	r3,r3,-32768
   824e8:	1880020c 	andi	r2,r3,8
   824ec:	1000261e 	bne	r2,zero,82588 <_fflush_r+0xdc>
   824f0:	90c00117 	ldw	r3,4(r18)
   824f4:	20820014 	ori	r2,r4,2048
   824f8:	9080030d 	sth	r2,12(r18)
   824fc:	1009883a 	mov	r4,r2
   82500:	00c0400e 	bge	zero,r3,82604 <_fflush_r+0x158>
   82504:	92000a17 	ldw	r8,40(r18)
   82508:	40004026 	beq	r8,zero,8260c <_fflush_r+0x160>
   8250c:	2084000c 	andi	r2,r4,4096
   82510:	10005326 	beq	r2,zero,82660 <_fflush_r+0x1b4>
   82514:	94001417 	ldw	r16,80(r18)
   82518:	9080030b 	ldhu	r2,12(r18)
   8251c:	1080010c 	andi	r2,r2,4
   82520:	1000481e 	bne	r2,zero,82644 <_fflush_r+0x198>
   82524:	91400717 	ldw	r5,28(r18)
   82528:	9809883a 	mov	r4,r19
   8252c:	800d883a 	mov	r6,r16
   82530:	000f883a 	mov	r7,zero
   82534:	403ee83a 	callr	r8
   82538:	8080261e 	bne	r16,r2,825d4 <_fflush_r+0x128>
   8253c:	9080030b 	ldhu	r2,12(r18)
   82540:	91000417 	ldw	r4,16(r18)
   82544:	90000115 	stw	zero,4(r18)
   82548:	10bdffcc 	andi	r2,r2,63487
   8254c:	10ffffcc 	andi	r3,r2,65535
   82550:	18c4000c 	andi	r3,r3,4096
   82554:	9080030d 	sth	r2,12(r18)
   82558:	91000015 	stw	r4,0(r18)
   8255c:	18002b26 	beq	r3,zero,8260c <_fflush_r+0x160>
   82560:	0007883a 	mov	r3,zero
   82564:	1805883a 	mov	r2,r3
   82568:	94001415 	stw	r16,80(r18)
   8256c:	dfc00417 	ldw	ra,16(sp)
   82570:	dcc00317 	ldw	r19,12(sp)
   82574:	dc800217 	ldw	r18,8(sp)
   82578:	dc400117 	ldw	r17,4(sp)
   8257c:	dc000017 	ldw	r16,0(sp)
   82580:	dec00504 	addi	sp,sp,20
   82584:	f800283a 	ret
   82588:	94400417 	ldw	r17,16(r18)
   8258c:	88001f26 	beq	r17,zero,8260c <_fflush_r+0x160>
   82590:	90800017 	ldw	r2,0(r18)
   82594:	18c000cc 	andi	r3,r3,3
   82598:	94400015 	stw	r17,0(r18)
   8259c:	1461c83a 	sub	r16,r2,r17
   825a0:	18002526 	beq	r3,zero,82638 <_fflush_r+0x18c>
   825a4:	0005883a 	mov	r2,zero
   825a8:	90800215 	stw	r2,8(r18)
   825ac:	0400170e 	bge	zero,r16,8260c <_fflush_r+0x160>
   825b0:	90c00917 	ldw	r3,36(r18)
   825b4:	91400717 	ldw	r5,28(r18)
   825b8:	880d883a 	mov	r6,r17
   825bc:	800f883a 	mov	r7,r16
   825c0:	9809883a 	mov	r4,r19
   825c4:	183ee83a 	callr	r3
   825c8:	88a3883a 	add	r17,r17,r2
   825cc:	80a1c83a 	sub	r16,r16,r2
   825d0:	00bff616 	blt	zero,r2,825ac <_fflush_r+0x100>
   825d4:	9080030b 	ldhu	r2,12(r18)
   825d8:	00ffffc4 	movi	r3,-1
   825dc:	10801014 	ori	r2,r2,64
   825e0:	9080030d 	sth	r2,12(r18)
   825e4:	1805883a 	mov	r2,r3
   825e8:	dfc00417 	ldw	ra,16(sp)
   825ec:	dcc00317 	ldw	r19,12(sp)
   825f0:	dc800217 	ldw	r18,8(sp)
   825f4:	dc400117 	ldw	r17,4(sp)
   825f8:	dc000017 	ldw	r16,0(sp)
   825fc:	dec00504 	addi	sp,sp,20
   82600:	f800283a 	ret
   82604:	90800f17 	ldw	r2,60(r18)
   82608:	00bfbe16 	blt	zero,r2,82504 <_fflush_r+0x58>
   8260c:	0007883a 	mov	r3,zero
   82610:	1805883a 	mov	r2,r3
   82614:	dfc00417 	ldw	ra,16(sp)
   82618:	dcc00317 	ldw	r19,12(sp)
   8261c:	dc800217 	ldw	r18,8(sp)
   82620:	dc400117 	ldw	r17,4(sp)
   82624:	dc000017 	ldw	r16,0(sp)
   82628:	dec00504 	addi	sp,sp,20
   8262c:	f800283a 	ret
   82630:	00827440 	call	82744 <__sinit>
   82634:	003fa806 	br	824d8 <_fflush_r+0x2c>
   82638:	90800517 	ldw	r2,20(r18)
   8263c:	90800215 	stw	r2,8(r18)
   82640:	003fda06 	br	825ac <_fflush_r+0x100>
   82644:	90800117 	ldw	r2,4(r18)
   82648:	90c00c17 	ldw	r3,48(r18)
   8264c:	80a1c83a 	sub	r16,r16,r2
   82650:	183fb426 	beq	r3,zero,82524 <_fflush_r+0x78>
   82654:	90800f17 	ldw	r2,60(r18)
   82658:	80a1c83a 	sub	r16,r16,r2
   8265c:	003fb106 	br	82524 <_fflush_r+0x78>
   82660:	91400717 	ldw	r5,28(r18)
   82664:	9809883a 	mov	r4,r19
   82668:	000d883a 	mov	r6,zero
   8266c:	01c00044 	movi	r7,1
   82670:	403ee83a 	callr	r8
   82674:	1021883a 	mov	r16,r2
   82678:	00bfffc4 	movi	r2,-1
   8267c:	80800226 	beq	r16,r2,82688 <_fflush_r+0x1dc>
   82680:	92000a17 	ldw	r8,40(r18)
   82684:	003fa406 	br	82518 <_fflush_r+0x6c>
   82688:	98c00017 	ldw	r3,0(r19)
   8268c:	00800744 	movi	r2,29
   82690:	18bfde26 	beq	r3,r2,8260c <_fflush_r+0x160>
   82694:	9080030b 	ldhu	r2,12(r18)
   82698:	8007883a 	mov	r3,r16
   8269c:	10801014 	ori	r2,r2,64
   826a0:	9080030d 	sth	r2,12(r18)
   826a4:	003fcf06 	br	825e4 <_fflush_r+0x138>

000826a8 <fflush>:
   826a8:	01400234 	movhi	r5,8
   826ac:	29492b04 	addi	r5,r5,9388
   826b0:	2007883a 	mov	r3,r4
   826b4:	20000526 	beq	r4,zero,826cc <fflush+0x24>
   826b8:	00800234 	movhi	r2,8
   826bc:	109f8404 	addi	r2,r2,32272
   826c0:	11000017 	ldw	r4,0(r2)
   826c4:	180b883a 	mov	r5,r3
   826c8:	00824ac1 	jmpi	824ac <_fflush_r>
   826cc:	00800234 	movhi	r2,8
   826d0:	109f8504 	addi	r2,r2,32276
   826d4:	11000017 	ldw	r4,0(r2)
   826d8:	0082ddc1 	jmpi	82ddc <_fwalk_reent>

000826dc <std>:
   826dc:	00800234 	movhi	r2,8
   826e0:	108e4e04 	addi	r2,r2,14648
   826e4:	20800b15 	stw	r2,44(r4)
   826e8:	00800234 	movhi	r2,8
   826ec:	108e8904 	addi	r2,r2,14884
   826f0:	20800815 	stw	r2,32(r4)
   826f4:	00c00234 	movhi	r3,8
   826f8:	18ce6a04 	addi	r3,r3,14760
   826fc:	00800234 	movhi	r2,8
   82700:	108e5004 	addi	r2,r2,14656
   82704:	2140030d 	sth	r5,12(r4)
   82708:	2180038d 	sth	r6,14(r4)
   8270c:	20c00915 	stw	r3,36(r4)
   82710:	20800a15 	stw	r2,40(r4)
   82714:	20000015 	stw	zero,0(r4)
   82718:	20000115 	stw	zero,4(r4)
   8271c:	20000215 	stw	zero,8(r4)
   82720:	20000415 	stw	zero,16(r4)
   82724:	20000515 	stw	zero,20(r4)
   82728:	20000615 	stw	zero,24(r4)
   8272c:	21000715 	stw	r4,28(r4)
   82730:	f800283a 	ret

00082734 <__sfp_lock_acquire>:
   82734:	f800283a 	ret

00082738 <__sfp_lock_release>:
   82738:	f800283a 	ret

0008273c <__sinit_lock_acquire>:
   8273c:	f800283a 	ret

00082740 <__sinit_lock_release>:
   82740:	f800283a 	ret

00082744 <__sinit>:
   82744:	20800e17 	ldw	r2,56(r4)
   82748:	defffd04 	addi	sp,sp,-12
   8274c:	dc400115 	stw	r17,4(sp)
   82750:	dc000015 	stw	r16,0(sp)
   82754:	dfc00215 	stw	ra,8(sp)
   82758:	04400044 	movi	r17,1
   8275c:	01400104 	movi	r5,4
   82760:	000d883a 	mov	r6,zero
   82764:	2021883a 	mov	r16,r4
   82768:	2200bb04 	addi	r8,r4,748
   8276c:	200f883a 	mov	r7,r4
   82770:	10000526 	beq	r2,zero,82788 <__sinit+0x44>
   82774:	dfc00217 	ldw	ra,8(sp)
   82778:	dc400117 	ldw	r17,4(sp)
   8277c:	dc000017 	ldw	r16,0(sp)
   82780:	dec00304 	addi	sp,sp,12
   82784:	f800283a 	ret
   82788:	21000117 	ldw	r4,4(r4)
   8278c:	00800234 	movhi	r2,8
   82790:	108a0a04 	addi	r2,r2,10280
   82794:	00c000c4 	movi	r3,3
   82798:	80800f15 	stw	r2,60(r16)
   8279c:	80c0b915 	stw	r3,740(r16)
   827a0:	8200ba15 	stw	r8,744(r16)
   827a4:	84400e15 	stw	r17,56(r16)
   827a8:	8000b815 	stw	zero,736(r16)
   827ac:	00826dc0 	call	826dc <std>
   827b0:	81000217 	ldw	r4,8(r16)
   827b4:	880d883a 	mov	r6,r17
   827b8:	800f883a 	mov	r7,r16
   827bc:	01400284 	movi	r5,10
   827c0:	00826dc0 	call	826dc <std>
   827c4:	81000317 	ldw	r4,12(r16)
   827c8:	800f883a 	mov	r7,r16
   827cc:	01400484 	movi	r5,18
   827d0:	01800084 	movi	r6,2
   827d4:	dfc00217 	ldw	ra,8(sp)
   827d8:	dc400117 	ldw	r17,4(sp)
   827dc:	dc000017 	ldw	r16,0(sp)
   827e0:	dec00304 	addi	sp,sp,12
   827e4:	00826dc1 	jmpi	826dc <std>

000827e8 <__fp_lock>:
   827e8:	0005883a 	mov	r2,zero
   827ec:	f800283a 	ret

000827f0 <__fp_unlock>:
   827f0:	0005883a 	mov	r2,zero
   827f4:	f800283a 	ret

000827f8 <__fp_unlock_all>:
   827f8:	00800234 	movhi	r2,8
   827fc:	109f8404 	addi	r2,r2,32272
   82800:	11000017 	ldw	r4,0(r2)
   82804:	01400234 	movhi	r5,8
   82808:	2949fc04 	addi	r5,r5,10224
   8280c:	0082ea41 	jmpi	82ea4 <_fwalk>

00082810 <__fp_lock_all>:
   82810:	00800234 	movhi	r2,8
   82814:	109f8404 	addi	r2,r2,32272
   82818:	11000017 	ldw	r4,0(r2)
   8281c:	01400234 	movhi	r5,8
   82820:	2949fa04 	addi	r5,r5,10216
   82824:	0082ea41 	jmpi	82ea4 <_fwalk>

00082828 <_cleanup_r>:
   82828:	01400234 	movhi	r5,8
   8282c:	294f1f04 	addi	r5,r5,15484
   82830:	0082ea41 	jmpi	82ea4 <_fwalk>

00082834 <_cleanup>:
   82834:	00800234 	movhi	r2,8
   82838:	109f8504 	addi	r2,r2,32276
   8283c:	11000017 	ldw	r4,0(r2)
   82840:	00828281 	jmpi	82828 <_cleanup_r>

00082844 <__sfmoreglue>:
   82844:	defffc04 	addi	sp,sp,-16
   82848:	dc400115 	stw	r17,4(sp)
   8284c:	2c401724 	muli	r17,r5,92
   82850:	dc800215 	stw	r18,8(sp)
   82854:	2825883a 	mov	r18,r5
   82858:	89400304 	addi	r5,r17,12
   8285c:	dc000015 	stw	r16,0(sp)
   82860:	dfc00315 	stw	ra,12(sp)
   82864:	00830f00 	call	830f0 <_malloc_r>
   82868:	0021883a 	mov	r16,zero
   8286c:	880d883a 	mov	r6,r17
   82870:	000b883a 	mov	r5,zero
   82874:	10000626 	beq	r2,zero,82890 <__sfmoreglue+0x4c>
   82878:	11000304 	addi	r4,r2,12
   8287c:	14800115 	stw	r18,4(r2)
   82880:	10000015 	stw	zero,0(r2)
   82884:	11000215 	stw	r4,8(r2)
   82888:	1021883a 	mov	r16,r2
   8288c:	00838300 	call	83830 <memset>
   82890:	8005883a 	mov	r2,r16
   82894:	dfc00317 	ldw	ra,12(sp)
   82898:	dc800217 	ldw	r18,8(sp)
   8289c:	dc400117 	ldw	r17,4(sp)
   828a0:	dc000017 	ldw	r16,0(sp)
   828a4:	dec00404 	addi	sp,sp,16
   828a8:	f800283a 	ret

000828ac <__sfp>:
   828ac:	defffd04 	addi	sp,sp,-12
   828b0:	00800234 	movhi	r2,8
   828b4:	109f8504 	addi	r2,r2,32276
   828b8:	dc000015 	stw	r16,0(sp)
   828bc:	14000017 	ldw	r16,0(r2)
   828c0:	dc400115 	stw	r17,4(sp)
   828c4:	dfc00215 	stw	ra,8(sp)
   828c8:	80800e17 	ldw	r2,56(r16)
   828cc:	2023883a 	mov	r17,r4
   828d0:	10002626 	beq	r2,zero,8296c <__sfp+0xc0>
   828d4:	8400b804 	addi	r16,r16,736
   828d8:	80800117 	ldw	r2,4(r16)
   828dc:	81000217 	ldw	r4,8(r16)
   828e0:	10ffffc4 	addi	r3,r2,-1
   828e4:	18000916 	blt	r3,zero,8290c <__sfp+0x60>
   828e8:	2080030f 	ldh	r2,12(r4)
   828ec:	10000b26 	beq	r2,zero,8291c <__sfp+0x70>
   828f0:	017fffc4 	movi	r5,-1
   828f4:	00000206 	br	82900 <__sfp+0x54>
   828f8:	2080030f 	ldh	r2,12(r4)
   828fc:	10000726 	beq	r2,zero,8291c <__sfp+0x70>
   82900:	18ffffc4 	addi	r3,r3,-1
   82904:	21001704 	addi	r4,r4,92
   82908:	197ffb1e 	bne	r3,r5,828f8 <__sfp+0x4c>
   8290c:	80800017 	ldw	r2,0(r16)
   82910:	10001926 	beq	r2,zero,82978 <__sfp+0xcc>
   82914:	1021883a 	mov	r16,r2
   82918:	003fef06 	br	828d8 <__sfp+0x2c>
   8291c:	00bfffc4 	movi	r2,-1
   82920:	00c00044 	movi	r3,1
   82924:	2080038d 	sth	r2,14(r4)
   82928:	20c0030d 	sth	r3,12(r4)
   8292c:	20000015 	stw	zero,0(r4)
   82930:	20000215 	stw	zero,8(r4)
   82934:	20000115 	stw	zero,4(r4)
   82938:	20000415 	stw	zero,16(r4)
   8293c:	20000515 	stw	zero,20(r4)
   82940:	20000615 	stw	zero,24(r4)
   82944:	20000c15 	stw	zero,48(r4)
   82948:	20000d15 	stw	zero,52(r4)
   8294c:	20001115 	stw	zero,68(r4)
   82950:	20001215 	stw	zero,72(r4)
   82954:	2005883a 	mov	r2,r4
   82958:	dfc00217 	ldw	ra,8(sp)
   8295c:	dc400117 	ldw	r17,4(sp)
   82960:	dc000017 	ldw	r16,0(sp)
   82964:	dec00304 	addi	sp,sp,12
   82968:	f800283a 	ret
   8296c:	8009883a 	mov	r4,r16
   82970:	00827440 	call	82744 <__sinit>
   82974:	003fd706 	br	828d4 <__sfp+0x28>
   82978:	8809883a 	mov	r4,r17
   8297c:	01400104 	movi	r5,4
   82980:	00828440 	call	82844 <__sfmoreglue>
   82984:	80800015 	stw	r2,0(r16)
   82988:	103fe21e 	bne	r2,zero,82914 <__sfp+0x68>
   8298c:	00800304 	movi	r2,12
   82990:	0009883a 	mov	r4,zero
   82994:	88800015 	stw	r2,0(r17)
   82998:	003fee06 	br	82954 <__sfp+0xa8>

0008299c <_malloc_trim_r>:
   8299c:	defffb04 	addi	sp,sp,-20
   829a0:	dcc00315 	stw	r19,12(sp)
   829a4:	04c00234 	movhi	r19,8
   829a8:	9cde7704 	addi	r19,r19,31196
   829ac:	dc800215 	stw	r18,8(sp)
   829b0:	dc400115 	stw	r17,4(sp)
   829b4:	dc000015 	stw	r16,0(sp)
   829b8:	2823883a 	mov	r17,r5
   829bc:	2025883a 	mov	r18,r4
   829c0:	dfc00415 	stw	ra,16(sp)
   829c4:	00840140 	call	84014 <__malloc_lock>
   829c8:	98800217 	ldw	r2,8(r19)
   829cc:	9009883a 	mov	r4,r18
   829d0:	000b883a 	mov	r5,zero
   829d4:	10c00117 	ldw	r3,4(r2)
   829d8:	00bfff04 	movi	r2,-4
   829dc:	18a0703a 	and	r16,r3,r2
   829e0:	8463c83a 	sub	r17,r16,r17
   829e4:	8c43fbc4 	addi	r17,r17,4079
   829e8:	8822d33a 	srli	r17,r17,12
   829ec:	0083ffc4 	movi	r2,4095
   829f0:	8c7fffc4 	addi	r17,r17,-1
   829f4:	8822933a 	slli	r17,r17,12
   829f8:	1440060e 	bge	r2,r17,82a14 <_malloc_trim_r+0x78>
   829fc:	00838c80 	call	838c8 <_sbrk_r>
   82a00:	98c00217 	ldw	r3,8(r19)
   82a04:	9009883a 	mov	r4,r18
   82a08:	044bc83a 	sub	r5,zero,r17
   82a0c:	80c7883a 	add	r3,r16,r3
   82a10:	10c00926 	beq	r2,r3,82a38 <_malloc_trim_r+0x9c>
   82a14:	00840180 	call	84018 <__malloc_unlock>
   82a18:	0005883a 	mov	r2,zero
   82a1c:	dfc00417 	ldw	ra,16(sp)
   82a20:	dcc00317 	ldw	r19,12(sp)
   82a24:	dc800217 	ldw	r18,8(sp)
   82a28:	dc400117 	ldw	r17,4(sp)
   82a2c:	dc000017 	ldw	r16,0(sp)
   82a30:	dec00504 	addi	sp,sp,20
   82a34:	f800283a 	ret
   82a38:	9009883a 	mov	r4,r18
   82a3c:	00838c80 	call	838c8 <_sbrk_r>
   82a40:	844dc83a 	sub	r6,r16,r17
   82a44:	00ffffc4 	movi	r3,-1
   82a48:	9009883a 	mov	r4,r18
   82a4c:	000b883a 	mov	r5,zero
   82a50:	01c00274 	movhi	r7,9
   82a54:	39f64204 	addi	r7,r7,-9976
   82a58:	31800054 	ori	r6,r6,1
   82a5c:	10c00926 	beq	r2,r3,82a84 <_malloc_trim_r+0xe8>
   82a60:	38800017 	ldw	r2,0(r7)
   82a64:	98c00217 	ldw	r3,8(r19)
   82a68:	9009883a 	mov	r4,r18
   82a6c:	1445c83a 	sub	r2,r2,r17
   82a70:	38800015 	stw	r2,0(r7)
   82a74:	19800115 	stw	r6,4(r3)
   82a78:	00840180 	call	84018 <__malloc_unlock>
   82a7c:	00800044 	movi	r2,1
   82a80:	003fe606 	br	82a1c <_malloc_trim_r+0x80>
   82a84:	00838c80 	call	838c8 <_sbrk_r>
   82a88:	99800217 	ldw	r6,8(r19)
   82a8c:	100f883a 	mov	r7,r2
   82a90:	9009883a 	mov	r4,r18
   82a94:	1187c83a 	sub	r3,r2,r6
   82a98:	008003c4 	movi	r2,15
   82a9c:	19400054 	ori	r5,r3,1
   82aa0:	10ffdc0e 	bge	r2,r3,82a14 <_malloc_trim_r+0x78>
   82aa4:	00800234 	movhi	r2,8
   82aa8:	109f8704 	addi	r2,r2,32284
   82aac:	10c00017 	ldw	r3,0(r2)
   82ab0:	00800274 	movhi	r2,9
   82ab4:	10b64204 	addi	r2,r2,-9976
   82ab8:	31400115 	stw	r5,4(r6)
   82abc:	38c7c83a 	sub	r3,r7,r3
   82ac0:	10c00015 	stw	r3,0(r2)
   82ac4:	003fd306 	br	82a14 <_malloc_trim_r+0x78>

00082ac8 <_free_r>:
   82ac8:	defffd04 	addi	sp,sp,-12
   82acc:	dc400115 	stw	r17,4(sp)
   82ad0:	dc000015 	stw	r16,0(sp)
   82ad4:	dfc00215 	stw	ra,8(sp)
   82ad8:	2821883a 	mov	r16,r5
   82adc:	2023883a 	mov	r17,r4
   82ae0:	28005a26 	beq	r5,zero,82c4c <_free_r+0x184>
   82ae4:	00840140 	call	84014 <__malloc_lock>
   82ae8:	823ffe04 	addi	r8,r16,-8
   82aec:	41400117 	ldw	r5,4(r8)
   82af0:	00bfff84 	movi	r2,-2
   82af4:	02800234 	movhi	r10,8
   82af8:	529e7704 	addi	r10,r10,31196
   82afc:	288e703a 	and	r7,r5,r2
   82b00:	41cd883a 	add	r6,r8,r7
   82b04:	30c00117 	ldw	r3,4(r6)
   82b08:	51000217 	ldw	r4,8(r10)
   82b0c:	00bfff04 	movi	r2,-4
   82b10:	1892703a 	and	r9,r3,r2
   82b14:	5017883a 	mov	r11,r10
   82b18:	31006726 	beq	r6,r4,82cb8 <_free_r+0x1f0>
   82b1c:	2880004c 	andi	r2,r5,1
   82b20:	1005003a 	cmpeq	r2,r2,zero
   82b24:	32400115 	stw	r9,4(r6)
   82b28:	10001a1e 	bne	r2,zero,82b94 <_free_r+0xcc>
   82b2c:	000b883a 	mov	r5,zero
   82b30:	3247883a 	add	r3,r6,r9
   82b34:	18800117 	ldw	r2,4(r3)
   82b38:	1080004c 	andi	r2,r2,1
   82b3c:	1000231e 	bne	r2,zero,82bcc <_free_r+0x104>
   82b40:	280ac03a 	cmpne	r5,r5,zero
   82b44:	3a4f883a 	add	r7,r7,r9
   82b48:	2800451e 	bne	r5,zero,82c60 <_free_r+0x198>
   82b4c:	31000217 	ldw	r4,8(r6)
   82b50:	00800234 	movhi	r2,8
   82b54:	109e7904 	addi	r2,r2,31204
   82b58:	20807b26 	beq	r4,r2,82d48 <_free_r+0x280>
   82b5c:	30800317 	ldw	r2,12(r6)
   82b60:	3a07883a 	add	r3,r7,r8
   82b64:	19c00015 	stw	r7,0(r3)
   82b68:	11000215 	stw	r4,8(r2)
   82b6c:	20800315 	stw	r2,12(r4)
   82b70:	38800054 	ori	r2,r7,1
   82b74:	40800115 	stw	r2,4(r8)
   82b78:	28001a26 	beq	r5,zero,82be4 <_free_r+0x11c>
   82b7c:	8809883a 	mov	r4,r17
   82b80:	dfc00217 	ldw	ra,8(sp)
   82b84:	dc400117 	ldw	r17,4(sp)
   82b88:	dc000017 	ldw	r16,0(sp)
   82b8c:	dec00304 	addi	sp,sp,12
   82b90:	00840181 	jmpi	84018 <__malloc_unlock>
   82b94:	80bffe17 	ldw	r2,-8(r16)
   82b98:	50c00204 	addi	r3,r10,8
   82b9c:	4091c83a 	sub	r8,r8,r2
   82ba0:	41000217 	ldw	r4,8(r8)
   82ba4:	388f883a 	add	r7,r7,r2
   82ba8:	20c06126 	beq	r4,r3,82d30 <_free_r+0x268>
   82bac:	40800317 	ldw	r2,12(r8)
   82bb0:	3247883a 	add	r3,r6,r9
   82bb4:	000b883a 	mov	r5,zero
   82bb8:	11000215 	stw	r4,8(r2)
   82bbc:	20800315 	stw	r2,12(r4)
   82bc0:	18800117 	ldw	r2,4(r3)
   82bc4:	1080004c 	andi	r2,r2,1
   82bc8:	103fdd26 	beq	r2,zero,82b40 <_free_r+0x78>
   82bcc:	38800054 	ori	r2,r7,1
   82bd0:	3a07883a 	add	r3,r7,r8
   82bd4:	280ac03a 	cmpne	r5,r5,zero
   82bd8:	40800115 	stw	r2,4(r8)
   82bdc:	19c00015 	stw	r7,0(r3)
   82be0:	283fe61e 	bne	r5,zero,82b7c <_free_r+0xb4>
   82be4:	00807fc4 	movi	r2,511
   82be8:	11c01f2e 	bgeu	r2,r7,82c68 <_free_r+0x1a0>
   82bec:	3806d27a 	srli	r3,r7,9
   82bf0:	1800481e 	bne	r3,zero,82d14 <_free_r+0x24c>
   82bf4:	3804d0fa 	srli	r2,r7,3
   82bf8:	100690fa 	slli	r3,r2,3
   82bfc:	1acd883a 	add	r6,r3,r11
   82c00:	31400217 	ldw	r5,8(r6)
   82c04:	31405926 	beq	r6,r5,82d6c <_free_r+0x2a4>
   82c08:	28800117 	ldw	r2,4(r5)
   82c0c:	00ffff04 	movi	r3,-4
   82c10:	10c4703a 	and	r2,r2,r3
   82c14:	3880022e 	bgeu	r7,r2,82c20 <_free_r+0x158>
   82c18:	29400217 	ldw	r5,8(r5)
   82c1c:	317ffa1e 	bne	r6,r5,82c08 <_free_r+0x140>
   82c20:	29800317 	ldw	r6,12(r5)
   82c24:	41800315 	stw	r6,12(r8)
   82c28:	41400215 	stw	r5,8(r8)
   82c2c:	8809883a 	mov	r4,r17
   82c30:	2a000315 	stw	r8,12(r5)
   82c34:	32000215 	stw	r8,8(r6)
   82c38:	dfc00217 	ldw	ra,8(sp)
   82c3c:	dc400117 	ldw	r17,4(sp)
   82c40:	dc000017 	ldw	r16,0(sp)
   82c44:	dec00304 	addi	sp,sp,12
   82c48:	00840181 	jmpi	84018 <__malloc_unlock>
   82c4c:	dfc00217 	ldw	ra,8(sp)
   82c50:	dc400117 	ldw	r17,4(sp)
   82c54:	dc000017 	ldw	r16,0(sp)
   82c58:	dec00304 	addi	sp,sp,12
   82c5c:	f800283a 	ret
   82c60:	31000217 	ldw	r4,8(r6)
   82c64:	003fbd06 	br	82b5c <_free_r+0x94>
   82c68:	3806d0fa 	srli	r3,r7,3
   82c6c:	00800044 	movi	r2,1
   82c70:	51400117 	ldw	r5,4(r10)
   82c74:	180890fa 	slli	r4,r3,3
   82c78:	1807d0ba 	srai	r3,r3,2
   82c7c:	22c9883a 	add	r4,r4,r11
   82c80:	21800217 	ldw	r6,8(r4)
   82c84:	10c4983a 	sll	r2,r2,r3
   82c88:	41000315 	stw	r4,12(r8)
   82c8c:	41800215 	stw	r6,8(r8)
   82c90:	288ab03a 	or	r5,r5,r2
   82c94:	22000215 	stw	r8,8(r4)
   82c98:	8809883a 	mov	r4,r17
   82c9c:	51400115 	stw	r5,4(r10)
   82ca0:	32000315 	stw	r8,12(r6)
   82ca4:	dfc00217 	ldw	ra,8(sp)
   82ca8:	dc400117 	ldw	r17,4(sp)
   82cac:	dc000017 	ldw	r16,0(sp)
   82cb0:	dec00304 	addi	sp,sp,12
   82cb4:	00840181 	jmpi	84018 <__malloc_unlock>
   82cb8:	2880004c 	andi	r2,r5,1
   82cbc:	3a4d883a 	add	r6,r7,r9
   82cc0:	1000071e 	bne	r2,zero,82ce0 <_free_r+0x218>
   82cc4:	80bffe17 	ldw	r2,-8(r16)
   82cc8:	4091c83a 	sub	r8,r8,r2
   82ccc:	41000317 	ldw	r4,12(r8)
   82cd0:	40c00217 	ldw	r3,8(r8)
   82cd4:	308d883a 	add	r6,r6,r2
   82cd8:	20c00215 	stw	r3,8(r4)
   82cdc:	19000315 	stw	r4,12(r3)
   82ce0:	00800234 	movhi	r2,8
   82ce4:	109f8604 	addi	r2,r2,32280
   82ce8:	11000017 	ldw	r4,0(r2)
   82cec:	30c00054 	ori	r3,r6,1
   82cf0:	52000215 	stw	r8,8(r10)
   82cf4:	40c00115 	stw	r3,4(r8)
   82cf8:	313fa036 	bltu	r6,r4,82b7c <_free_r+0xb4>
   82cfc:	00800274 	movhi	r2,9
   82d00:	10ae3f04 	addi	r2,r2,-18180
   82d04:	11400017 	ldw	r5,0(r2)
   82d08:	8809883a 	mov	r4,r17
   82d0c:	008299c0 	call	8299c <_malloc_trim_r>
   82d10:	003f9a06 	br	82b7c <_free_r+0xb4>
   82d14:	00800104 	movi	r2,4
   82d18:	10c0072e 	bgeu	r2,r3,82d38 <_free_r+0x270>
   82d1c:	00800504 	movi	r2,20
   82d20:	10c01936 	bltu	r2,r3,82d88 <_free_r+0x2c0>
   82d24:	188016c4 	addi	r2,r3,91
   82d28:	100690fa 	slli	r3,r2,3
   82d2c:	003fb306 	br	82bfc <_free_r+0x134>
   82d30:	01400044 	movi	r5,1
   82d34:	003f7e06 	br	82b30 <_free_r+0x68>
   82d38:	3804d1ba 	srli	r2,r7,6
   82d3c:	10800e04 	addi	r2,r2,56
   82d40:	100690fa 	slli	r3,r2,3
   82d44:	003fad06 	br	82bfc <_free_r+0x134>
   82d48:	22000315 	stw	r8,12(r4)
   82d4c:	22000215 	stw	r8,8(r4)
   82d50:	3a05883a 	add	r2,r7,r8
   82d54:	38c00054 	ori	r3,r7,1
   82d58:	11c00015 	stw	r7,0(r2)
   82d5c:	41000215 	stw	r4,8(r8)
   82d60:	40c00115 	stw	r3,4(r8)
   82d64:	41000315 	stw	r4,12(r8)
   82d68:	003f8406 	br	82b7c <_free_r+0xb4>
   82d6c:	1005d0ba 	srai	r2,r2,2
   82d70:	00c00044 	movi	r3,1
   82d74:	51000117 	ldw	r4,4(r10)
   82d78:	1886983a 	sll	r3,r3,r2
   82d7c:	20c8b03a 	or	r4,r4,r3
   82d80:	51000115 	stw	r4,4(r10)
   82d84:	003fa706 	br	82c24 <_free_r+0x15c>
   82d88:	00801504 	movi	r2,84
   82d8c:	10c00436 	bltu	r2,r3,82da0 <_free_r+0x2d8>
   82d90:	3804d33a 	srli	r2,r7,12
   82d94:	10801b84 	addi	r2,r2,110
   82d98:	100690fa 	slli	r3,r2,3
   82d9c:	003f9706 	br	82bfc <_free_r+0x134>
   82da0:	00805504 	movi	r2,340
   82da4:	10c00436 	bltu	r2,r3,82db8 <_free_r+0x2f0>
   82da8:	3804d3fa 	srli	r2,r7,15
   82dac:	10801dc4 	addi	r2,r2,119
   82db0:	100690fa 	slli	r3,r2,3
   82db4:	003f9106 	br	82bfc <_free_r+0x134>
   82db8:	00815504 	movi	r2,1364
   82dbc:	10c0032e 	bgeu	r2,r3,82dcc <_free_r+0x304>
   82dc0:	00801f84 	movi	r2,126
   82dc4:	00c0fc04 	movi	r3,1008
   82dc8:	003f8c06 	br	82bfc <_free_r+0x134>
   82dcc:	3804d4ba 	srli	r2,r7,18
   82dd0:	10801f04 	addi	r2,r2,124
   82dd4:	100690fa 	slli	r3,r2,3
   82dd8:	003f8806 	br	82bfc <_free_r+0x134>

00082ddc <_fwalk_reent>:
   82ddc:	defff704 	addi	sp,sp,-36
   82de0:	dcc00315 	stw	r19,12(sp)
   82de4:	24c0b804 	addi	r19,r4,736
   82de8:	dd800615 	stw	r22,24(sp)
   82dec:	dd400515 	stw	r21,20(sp)
   82df0:	dfc00815 	stw	ra,32(sp)
   82df4:	ddc00715 	stw	r23,28(sp)
   82df8:	dd000415 	stw	r20,16(sp)
   82dfc:	dc800215 	stw	r18,8(sp)
   82e00:	dc400115 	stw	r17,4(sp)
   82e04:	dc000015 	stw	r16,0(sp)
   82e08:	202b883a 	mov	r21,r4
   82e0c:	282d883a 	mov	r22,r5
   82e10:	00827340 	call	82734 <__sfp_lock_acquire>
   82e14:	98002126 	beq	r19,zero,82e9c <_fwalk_reent+0xc0>
   82e18:	002f883a 	mov	r23,zero
   82e1c:	9c800117 	ldw	r18,4(r19)
   82e20:	9c000217 	ldw	r16,8(r19)
   82e24:	90bfffc4 	addi	r2,r18,-1
   82e28:	10000d16 	blt	r2,zero,82e60 <_fwalk_reent+0x84>
   82e2c:	0023883a 	mov	r17,zero
   82e30:	053fffc4 	movi	r20,-1
   82e34:	8080030f 	ldh	r2,12(r16)
   82e38:	8c400044 	addi	r17,r17,1
   82e3c:	10000626 	beq	r2,zero,82e58 <_fwalk_reent+0x7c>
   82e40:	8080038f 	ldh	r2,14(r16)
   82e44:	800b883a 	mov	r5,r16
   82e48:	a809883a 	mov	r4,r21
   82e4c:	15000226 	beq	r2,r20,82e58 <_fwalk_reent+0x7c>
   82e50:	b03ee83a 	callr	r22
   82e54:	b8aeb03a 	or	r23,r23,r2
   82e58:	84001704 	addi	r16,r16,92
   82e5c:	947ff51e 	bne	r18,r17,82e34 <_fwalk_reent+0x58>
   82e60:	9cc00017 	ldw	r19,0(r19)
   82e64:	983fed1e 	bne	r19,zero,82e1c <_fwalk_reent+0x40>
   82e68:	00827380 	call	82738 <__sfp_lock_release>
   82e6c:	b805883a 	mov	r2,r23
   82e70:	dfc00817 	ldw	ra,32(sp)
   82e74:	ddc00717 	ldw	r23,28(sp)
   82e78:	dd800617 	ldw	r22,24(sp)
   82e7c:	dd400517 	ldw	r21,20(sp)
   82e80:	dd000417 	ldw	r20,16(sp)
   82e84:	dcc00317 	ldw	r19,12(sp)
   82e88:	dc800217 	ldw	r18,8(sp)
   82e8c:	dc400117 	ldw	r17,4(sp)
   82e90:	dc000017 	ldw	r16,0(sp)
   82e94:	dec00904 	addi	sp,sp,36
   82e98:	f800283a 	ret
   82e9c:	002f883a 	mov	r23,zero
   82ea0:	003ff106 	br	82e68 <_fwalk_reent+0x8c>

00082ea4 <_fwalk>:
   82ea4:	defff804 	addi	sp,sp,-32
   82ea8:	dcc00315 	stw	r19,12(sp)
   82eac:	24c0b804 	addi	r19,r4,736
   82eb0:	dd400515 	stw	r21,20(sp)
   82eb4:	dfc00715 	stw	ra,28(sp)
   82eb8:	dd800615 	stw	r22,24(sp)
   82ebc:	dd000415 	stw	r20,16(sp)
   82ec0:	dc800215 	stw	r18,8(sp)
   82ec4:	dc400115 	stw	r17,4(sp)
   82ec8:	dc000015 	stw	r16,0(sp)
   82ecc:	282b883a 	mov	r21,r5
   82ed0:	00827340 	call	82734 <__sfp_lock_acquire>
   82ed4:	98001f26 	beq	r19,zero,82f54 <_fwalk+0xb0>
   82ed8:	002d883a 	mov	r22,zero
   82edc:	9c800117 	ldw	r18,4(r19)
   82ee0:	9c000217 	ldw	r16,8(r19)
   82ee4:	90bfffc4 	addi	r2,r18,-1
   82ee8:	10000c16 	blt	r2,zero,82f1c <_fwalk+0x78>
   82eec:	0023883a 	mov	r17,zero
   82ef0:	053fffc4 	movi	r20,-1
   82ef4:	8080030f 	ldh	r2,12(r16)
   82ef8:	8c400044 	addi	r17,r17,1
   82efc:	10000526 	beq	r2,zero,82f14 <_fwalk+0x70>
   82f00:	8080038f 	ldh	r2,14(r16)
   82f04:	8009883a 	mov	r4,r16
   82f08:	15000226 	beq	r2,r20,82f14 <_fwalk+0x70>
   82f0c:	a83ee83a 	callr	r21
   82f10:	b0acb03a 	or	r22,r22,r2
   82f14:	84001704 	addi	r16,r16,92
   82f18:	947ff61e 	bne	r18,r17,82ef4 <_fwalk+0x50>
   82f1c:	9cc00017 	ldw	r19,0(r19)
   82f20:	983fee1e 	bne	r19,zero,82edc <_fwalk+0x38>
   82f24:	00827380 	call	82738 <__sfp_lock_release>
   82f28:	b005883a 	mov	r2,r22
   82f2c:	dfc00717 	ldw	ra,28(sp)
   82f30:	dd800617 	ldw	r22,24(sp)
   82f34:	dd400517 	ldw	r21,20(sp)
   82f38:	dd000417 	ldw	r20,16(sp)
   82f3c:	dcc00317 	ldw	r19,12(sp)
   82f40:	dc800217 	ldw	r18,8(sp)
   82f44:	dc400117 	ldw	r17,4(sp)
   82f48:	dc000017 	ldw	r16,0(sp)
   82f4c:	dec00804 	addi	sp,sp,32
   82f50:	f800283a 	ret
   82f54:	002d883a 	mov	r22,zero
   82f58:	003ff206 	br	82f24 <_fwalk+0x80>

00082f5c <__smakebuf_r>:
   82f5c:	2880030b 	ldhu	r2,12(r5)
   82f60:	deffed04 	addi	sp,sp,-76
   82f64:	dc401015 	stw	r17,64(sp)
   82f68:	1080008c 	andi	r2,r2,2
   82f6c:	dc000f15 	stw	r16,60(sp)
   82f70:	dfc01215 	stw	ra,72(sp)
   82f74:	dc801115 	stw	r18,68(sp)
   82f78:	2821883a 	mov	r16,r5
   82f7c:	2023883a 	mov	r17,r4
   82f80:	10000b26 	beq	r2,zero,82fb0 <__smakebuf_r+0x54>
   82f84:	28c010c4 	addi	r3,r5,67
   82f88:	00800044 	movi	r2,1
   82f8c:	28800515 	stw	r2,20(r5)
   82f90:	28c00415 	stw	r3,16(r5)
   82f94:	28c00015 	stw	r3,0(r5)
   82f98:	dfc01217 	ldw	ra,72(sp)
   82f9c:	dc801117 	ldw	r18,68(sp)
   82fa0:	dc401017 	ldw	r17,64(sp)
   82fa4:	dc000f17 	ldw	r16,60(sp)
   82fa8:	dec01304 	addi	sp,sp,76
   82fac:	f800283a 	ret
   82fb0:	2940038f 	ldh	r5,14(r5)
   82fb4:	28002116 	blt	r5,zero,8303c <__smakebuf_r+0xe0>
   82fb8:	d80d883a 	mov	r6,sp
   82fbc:	0083c900 	call	83c90 <_fstat_r>
   82fc0:	10001e16 	blt	r2,zero,8303c <__smakebuf_r+0xe0>
   82fc4:	d8800117 	ldw	r2,4(sp)
   82fc8:	00e00014 	movui	r3,32768
   82fcc:	113c000c 	andi	r4,r2,61440
   82fd0:	20c03126 	beq	r4,r3,83098 <__smakebuf_r+0x13c>
   82fd4:	8080030b 	ldhu	r2,12(r16)
   82fd8:	00c80004 	movi	r3,8192
   82fdc:	10820014 	ori	r2,r2,2048
   82fe0:	8080030d 	sth	r2,12(r16)
   82fe4:	20c01e26 	beq	r4,r3,83060 <__smakebuf_r+0x104>
   82fe8:	04810004 	movi	r18,1024
   82fec:	8809883a 	mov	r4,r17
   82ff0:	900b883a 	mov	r5,r18
   82ff4:	00830f00 	call	830f0 <_malloc_r>
   82ff8:	1009883a 	mov	r4,r2
   82ffc:	10003126 	beq	r2,zero,830c4 <__smakebuf_r+0x168>
   83000:	80c0030b 	ldhu	r3,12(r16)
   83004:	00800234 	movhi	r2,8
   83008:	108a0a04 	addi	r2,r2,10280
   8300c:	88800f15 	stw	r2,60(r17)
   83010:	18c02014 	ori	r3,r3,128
   83014:	84800515 	stw	r18,20(r16)
   83018:	80c0030d 	sth	r3,12(r16)
   8301c:	81000415 	stw	r4,16(r16)
   83020:	81000015 	stw	r4,0(r16)
   83024:	dfc01217 	ldw	ra,72(sp)
   83028:	dc801117 	ldw	r18,68(sp)
   8302c:	dc401017 	ldw	r17,64(sp)
   83030:	dc000f17 	ldw	r16,60(sp)
   83034:	dec01304 	addi	sp,sp,76
   83038:	f800283a 	ret
   8303c:	80c0030b 	ldhu	r3,12(r16)
   83040:	1880200c 	andi	r2,r3,128
   83044:	10000426 	beq	r2,zero,83058 <__smakebuf_r+0xfc>
   83048:	04801004 	movi	r18,64
   8304c:	18820014 	ori	r2,r3,2048
   83050:	8080030d 	sth	r2,12(r16)
   83054:	003fe506 	br	82fec <__smakebuf_r+0x90>
   83058:	04810004 	movi	r18,1024
   8305c:	003ffb06 	br	8304c <__smakebuf_r+0xf0>
   83060:	8140038f 	ldh	r5,14(r16)
   83064:	8809883a 	mov	r4,r17
   83068:	0083d040 	call	83d04 <_isatty_r>
   8306c:	103fde26 	beq	r2,zero,82fe8 <__smakebuf_r+0x8c>
   83070:	8080030b 	ldhu	r2,12(r16)
   83074:	80c010c4 	addi	r3,r16,67
   83078:	04810004 	movi	r18,1024
   8307c:	10800054 	ori	r2,r2,1
   83080:	8080030d 	sth	r2,12(r16)
   83084:	00800044 	movi	r2,1
   83088:	80c00415 	stw	r3,16(r16)
   8308c:	80800515 	stw	r2,20(r16)
   83090:	80c00015 	stw	r3,0(r16)
   83094:	003fd506 	br	82fec <__smakebuf_r+0x90>
   83098:	80c00a17 	ldw	r3,40(r16)
   8309c:	00800234 	movhi	r2,8
   830a0:	108e5004 	addi	r2,r2,14656
   830a4:	18bfcb1e 	bne	r3,r2,82fd4 <__smakebuf_r+0x78>
   830a8:	8080030b 	ldhu	r2,12(r16)
   830ac:	00c10004 	movi	r3,1024
   830b0:	1825883a 	mov	r18,r3
   830b4:	10c4b03a 	or	r2,r2,r3
   830b8:	8080030d 	sth	r2,12(r16)
   830bc:	80c01315 	stw	r3,76(r16)
   830c0:	003fca06 	br	82fec <__smakebuf_r+0x90>
   830c4:	8100030b 	ldhu	r4,12(r16)
   830c8:	2080800c 	andi	r2,r4,512
   830cc:	103fb21e 	bne	r2,zero,82f98 <__smakebuf_r+0x3c>
   830d0:	80c010c4 	addi	r3,r16,67
   830d4:	21000094 	ori	r4,r4,2
   830d8:	00800044 	movi	r2,1
   830dc:	80800515 	stw	r2,20(r16)
   830e0:	8100030d 	sth	r4,12(r16)
   830e4:	80c00415 	stw	r3,16(r16)
   830e8:	80c00015 	stw	r3,0(r16)
   830ec:	003faa06 	br	82f98 <__smakebuf_r+0x3c>

000830f0 <_malloc_r>:
   830f0:	defff604 	addi	sp,sp,-40
   830f4:	28c002c4 	addi	r3,r5,11
   830f8:	00800584 	movi	r2,22
   830fc:	dc800215 	stw	r18,8(sp)
   83100:	dfc00915 	stw	ra,36(sp)
   83104:	df000815 	stw	fp,32(sp)
   83108:	ddc00715 	stw	r23,28(sp)
   8310c:	dd800615 	stw	r22,24(sp)
   83110:	dd400515 	stw	r21,20(sp)
   83114:	dd000415 	stw	r20,16(sp)
   83118:	dcc00315 	stw	r19,12(sp)
   8311c:	dc400115 	stw	r17,4(sp)
   83120:	dc000015 	stw	r16,0(sp)
   83124:	2025883a 	mov	r18,r4
   83128:	10c01236 	bltu	r2,r3,83174 <_malloc_r+0x84>
   8312c:	04400404 	movi	r17,16
   83130:	8940142e 	bgeu	r17,r5,83184 <_malloc_r+0x94>
   83134:	00800304 	movi	r2,12
   83138:	0007883a 	mov	r3,zero
   8313c:	90800015 	stw	r2,0(r18)
   83140:	1805883a 	mov	r2,r3
   83144:	dfc00917 	ldw	ra,36(sp)
   83148:	df000817 	ldw	fp,32(sp)
   8314c:	ddc00717 	ldw	r23,28(sp)
   83150:	dd800617 	ldw	r22,24(sp)
   83154:	dd400517 	ldw	r21,20(sp)
   83158:	dd000417 	ldw	r20,16(sp)
   8315c:	dcc00317 	ldw	r19,12(sp)
   83160:	dc800217 	ldw	r18,8(sp)
   83164:	dc400117 	ldw	r17,4(sp)
   83168:	dc000017 	ldw	r16,0(sp)
   8316c:	dec00a04 	addi	sp,sp,40
   83170:	f800283a 	ret
   83174:	00bffe04 	movi	r2,-8
   83178:	18a2703a 	and	r17,r3,r2
   8317c:	883fed16 	blt	r17,zero,83134 <_malloc_r+0x44>
   83180:	897fec36 	bltu	r17,r5,83134 <_malloc_r+0x44>
   83184:	9009883a 	mov	r4,r18
   83188:	00840140 	call	84014 <__malloc_lock>
   8318c:	00807dc4 	movi	r2,503
   83190:	14402b2e 	bgeu	r2,r17,83240 <_malloc_r+0x150>
   83194:	8806d27a 	srli	r3,r17,9
   83198:	18003f1e 	bne	r3,zero,83298 <_malloc_r+0x1a8>
   8319c:	880cd0fa 	srli	r6,r17,3
   831a0:	300490fa 	slli	r2,r6,3
   831a4:	02c00234 	movhi	r11,8
   831a8:	5ade7704 	addi	r11,r11,31196
   831ac:	12cb883a 	add	r5,r2,r11
   831b0:	2c000317 	ldw	r16,12(r5)
   831b4:	580f883a 	mov	r7,r11
   831b8:	2c00041e 	bne	r5,r16,831cc <_malloc_r+0xdc>
   831bc:	00000a06 	br	831e8 <_malloc_r+0xf8>
   831c0:	1800860e 	bge	r3,zero,833dc <_malloc_r+0x2ec>
   831c4:	84000317 	ldw	r16,12(r16)
   831c8:	2c000726 	beq	r5,r16,831e8 <_malloc_r+0xf8>
   831cc:	80800117 	ldw	r2,4(r16)
   831d0:	00ffff04 	movi	r3,-4
   831d4:	10c8703a 	and	r4,r2,r3
   831d8:	2447c83a 	sub	r3,r4,r17
   831dc:	008003c4 	movi	r2,15
   831e0:	10fff70e 	bge	r2,r3,831c0 <_malloc_r+0xd0>
   831e4:	31bfffc4 	addi	r6,r6,-1
   831e8:	32400044 	addi	r9,r6,1
   831ec:	02800234 	movhi	r10,8
   831f0:	529e7904 	addi	r10,r10,31204
   831f4:	54000217 	ldw	r16,8(r10)
   831f8:	8280a026 	beq	r16,r10,8347c <_malloc_r+0x38c>
   831fc:	80800117 	ldw	r2,4(r16)
   83200:	00ffff04 	movi	r3,-4
   83204:	10ca703a 	and	r5,r2,r3
   83208:	2c4dc83a 	sub	r6,r5,r17
   8320c:	008003c4 	movi	r2,15
   83210:	11808316 	blt	r2,r6,83420 <_malloc_r+0x330>
   83214:	52800315 	stw	r10,12(r10)
   83218:	52800215 	stw	r10,8(r10)
   8321c:	30002916 	blt	r6,zero,832c4 <_malloc_r+0x1d4>
   83220:	8147883a 	add	r3,r16,r5
   83224:	18800117 	ldw	r2,4(r3)
   83228:	9009883a 	mov	r4,r18
   8322c:	10800054 	ori	r2,r2,1
   83230:	18800115 	stw	r2,4(r3)
   83234:	00840180 	call	84018 <__malloc_unlock>
   83238:	80c00204 	addi	r3,r16,8
   8323c:	003fc006 	br	83140 <_malloc_r+0x50>
   83240:	02c00234 	movhi	r11,8
   83244:	5ade7704 	addi	r11,r11,31196
   83248:	8ac5883a 	add	r2,r17,r11
   8324c:	14000317 	ldw	r16,12(r2)
   83250:	580f883a 	mov	r7,r11
   83254:	8806d0fa 	srli	r3,r17,3
   83258:	14006c26 	beq	r2,r16,8340c <_malloc_r+0x31c>
   8325c:	80c00117 	ldw	r3,4(r16)
   83260:	00bfff04 	movi	r2,-4
   83264:	81800317 	ldw	r6,12(r16)
   83268:	1886703a 	and	r3,r3,r2
   8326c:	80c7883a 	add	r3,r16,r3
   83270:	18800117 	ldw	r2,4(r3)
   83274:	81400217 	ldw	r5,8(r16)
   83278:	9009883a 	mov	r4,r18
   8327c:	10800054 	ori	r2,r2,1
   83280:	18800115 	stw	r2,4(r3)
   83284:	31400215 	stw	r5,8(r6)
   83288:	29800315 	stw	r6,12(r5)
   8328c:	00840180 	call	84018 <__malloc_unlock>
   83290:	80c00204 	addi	r3,r16,8
   83294:	003faa06 	br	83140 <_malloc_r+0x50>
   83298:	00800104 	movi	r2,4
   8329c:	10c0052e 	bgeu	r2,r3,832b4 <_malloc_r+0x1c4>
   832a0:	00800504 	movi	r2,20
   832a4:	10c07836 	bltu	r2,r3,83488 <_malloc_r+0x398>
   832a8:	198016c4 	addi	r6,r3,91
   832ac:	300490fa 	slli	r2,r6,3
   832b0:	003fbc06 	br	831a4 <_malloc_r+0xb4>
   832b4:	8804d1ba 	srli	r2,r17,6
   832b8:	11800e04 	addi	r6,r2,56
   832bc:	300490fa 	slli	r2,r6,3
   832c0:	003fb806 	br	831a4 <_malloc_r+0xb4>
   832c4:	00807fc4 	movi	r2,511
   832c8:	1140bb36 	bltu	r2,r5,835b8 <_malloc_r+0x4c8>
   832cc:	2806d0fa 	srli	r3,r5,3
   832d0:	573ffe04 	addi	fp,r10,-8
   832d4:	00800044 	movi	r2,1
   832d8:	180890fa 	slli	r4,r3,3
   832dc:	1807d0ba 	srai	r3,r3,2
   832e0:	e1c00117 	ldw	r7,4(fp)
   832e4:	5909883a 	add	r4,r11,r4
   832e8:	21400217 	ldw	r5,8(r4)
   832ec:	10c4983a 	sll	r2,r2,r3
   832f0:	81000315 	stw	r4,12(r16)
   832f4:	81400215 	stw	r5,8(r16)
   832f8:	388eb03a 	or	r7,r7,r2
   832fc:	2c000315 	stw	r16,12(r5)
   83300:	24000215 	stw	r16,8(r4)
   83304:	e1c00115 	stw	r7,4(fp)
   83308:	4807883a 	mov	r3,r9
   8330c:	4800cd16 	blt	r9,zero,83644 <_malloc_r+0x554>
   83310:	1807d0ba 	srai	r3,r3,2
   83314:	00800044 	movi	r2,1
   83318:	10c8983a 	sll	r4,r2,r3
   8331c:	39004436 	bltu	r7,r4,83430 <_malloc_r+0x340>
   83320:	21c4703a 	and	r2,r4,r7
   83324:	10000a1e 	bne	r2,zero,83350 <_malloc_r+0x260>
   83328:	2109883a 	add	r4,r4,r4
   8332c:	00bfff04 	movi	r2,-4
   83330:	4884703a 	and	r2,r9,r2
   83334:	3906703a 	and	r3,r7,r4
   83338:	12400104 	addi	r9,r2,4
   8333c:	1800041e 	bne	r3,zero,83350 <_malloc_r+0x260>
   83340:	2109883a 	add	r4,r4,r4
   83344:	3904703a 	and	r2,r7,r4
   83348:	4a400104 	addi	r9,r9,4
   8334c:	103ffc26 	beq	r2,zero,83340 <_malloc_r+0x250>
   83350:	480490fa 	slli	r2,r9,3
   83354:	4819883a 	mov	r12,r9
   83358:	023fff04 	movi	r8,-4
   8335c:	589b883a 	add	r13,r11,r2
   83360:	6807883a 	mov	r3,r13
   83364:	014003c4 	movi	r5,15
   83368:	1c000317 	ldw	r16,12(r3)
   8336c:	1c00041e 	bne	r3,r16,83380 <_malloc_r+0x290>
   83370:	0000a706 	br	83610 <_malloc_r+0x520>
   83374:	3000ab0e 	bge	r6,zero,83624 <_malloc_r+0x534>
   83378:	84000317 	ldw	r16,12(r16)
   8337c:	1c00a426 	beq	r3,r16,83610 <_malloc_r+0x520>
   83380:	80800117 	ldw	r2,4(r16)
   83384:	1204703a 	and	r2,r2,r8
   83388:	144dc83a 	sub	r6,r2,r17
   8338c:	29bff90e 	bge	r5,r6,83374 <_malloc_r+0x284>
   83390:	81000317 	ldw	r4,12(r16)
   83394:	80c00217 	ldw	r3,8(r16)
   83398:	89400054 	ori	r5,r17,1
   8339c:	8445883a 	add	r2,r16,r17
   833a0:	20c00215 	stw	r3,8(r4)
   833a4:	19000315 	stw	r4,12(r3)
   833a8:	81400115 	stw	r5,4(r16)
   833ac:	1187883a 	add	r3,r2,r6
   833b0:	31000054 	ori	r4,r6,1
   833b4:	50800315 	stw	r2,12(r10)
   833b8:	50800215 	stw	r2,8(r10)
   833bc:	19800015 	stw	r6,0(r3)
   833c0:	11000115 	stw	r4,4(r2)
   833c4:	12800215 	stw	r10,8(r2)
   833c8:	12800315 	stw	r10,12(r2)
   833cc:	9009883a 	mov	r4,r18
   833d0:	00840180 	call	84018 <__malloc_unlock>
   833d4:	80c00204 	addi	r3,r16,8
   833d8:	003f5906 	br	83140 <_malloc_r+0x50>
   833dc:	8109883a 	add	r4,r16,r4
   833e0:	20800117 	ldw	r2,4(r4)
   833e4:	80c00217 	ldw	r3,8(r16)
   833e8:	81400317 	ldw	r5,12(r16)
   833ec:	10800054 	ori	r2,r2,1
   833f0:	20800115 	stw	r2,4(r4)
   833f4:	28c00215 	stw	r3,8(r5)
   833f8:	19400315 	stw	r5,12(r3)
   833fc:	9009883a 	mov	r4,r18
   83400:	00840180 	call	84018 <__malloc_unlock>
   83404:	80c00204 	addi	r3,r16,8
   83408:	003f4d06 	br	83140 <_malloc_r+0x50>
   8340c:	80800204 	addi	r2,r16,8
   83410:	14000317 	ldw	r16,12(r2)
   83414:	143f911e 	bne	r2,r16,8325c <_malloc_r+0x16c>
   83418:	1a400084 	addi	r9,r3,2
   8341c:	003f7306 	br	831ec <_malloc_r+0xfc>
   83420:	88c00054 	ori	r3,r17,1
   83424:	8445883a 	add	r2,r16,r17
   83428:	80c00115 	stw	r3,4(r16)
   8342c:	003fdf06 	br	833ac <_malloc_r+0x2bc>
   83430:	e4000217 	ldw	r16,8(fp)
   83434:	00bfff04 	movi	r2,-4
   83438:	80c00117 	ldw	r3,4(r16)
   8343c:	802d883a 	mov	r22,r16
   83440:	18aa703a 	and	r21,r3,r2
   83444:	ac401636 	bltu	r21,r17,834a0 <_malloc_r+0x3b0>
   83448:	ac49c83a 	sub	r4,r21,r17
   8344c:	008003c4 	movi	r2,15
   83450:	1100130e 	bge	r2,r4,834a0 <_malloc_r+0x3b0>
   83454:	88800054 	ori	r2,r17,1
   83458:	8447883a 	add	r3,r16,r17
   8345c:	80800115 	stw	r2,4(r16)
   83460:	20800054 	ori	r2,r4,1
   83464:	18800115 	stw	r2,4(r3)
   83468:	e0c00215 	stw	r3,8(fp)
   8346c:	9009883a 	mov	r4,r18
   83470:	00840180 	call	84018 <__malloc_unlock>
   83474:	80c00204 	addi	r3,r16,8
   83478:	003f3106 	br	83140 <_malloc_r+0x50>
   8347c:	39c00117 	ldw	r7,4(r7)
   83480:	573ffe04 	addi	fp,r10,-8
   83484:	003fa006 	br	83308 <_malloc_r+0x218>
   83488:	00801504 	movi	r2,84
   8348c:	10c06736 	bltu	r2,r3,8362c <_malloc_r+0x53c>
   83490:	8804d33a 	srli	r2,r17,12
   83494:	11801b84 	addi	r6,r2,110
   83498:	300490fa 	slli	r2,r6,3
   8349c:	003f4106 	br	831a4 <_malloc_r+0xb4>
   834a0:	d0aec617 	ldw	r2,-17640(gp)
   834a4:	d0e00e17 	ldw	r3,-32712(gp)
   834a8:	053fffc4 	movi	r20,-1
   834ac:	10800404 	addi	r2,r2,16
   834b0:	88a7883a 	add	r19,r17,r2
   834b4:	1d000326 	beq	r3,r20,834c4 <_malloc_r+0x3d4>
   834b8:	98c3ffc4 	addi	r3,r19,4095
   834bc:	00bc0004 	movi	r2,-4096
   834c0:	18a6703a 	and	r19,r3,r2
   834c4:	9009883a 	mov	r4,r18
   834c8:	980b883a 	mov	r5,r19
   834cc:	00838c80 	call	838c8 <_sbrk_r>
   834d0:	1009883a 	mov	r4,r2
   834d4:	15000426 	beq	r2,r20,834e8 <_malloc_r+0x3f8>
   834d8:	854b883a 	add	r5,r16,r21
   834dc:	1029883a 	mov	r20,r2
   834e0:	11405a2e 	bgeu	r2,r5,8364c <_malloc_r+0x55c>
   834e4:	87000c26 	beq	r16,fp,83518 <_malloc_r+0x428>
   834e8:	e4000217 	ldw	r16,8(fp)
   834ec:	80c00117 	ldw	r3,4(r16)
   834f0:	00bfff04 	movi	r2,-4
   834f4:	1884703a 	and	r2,r3,r2
   834f8:	14400336 	bltu	r2,r17,83508 <_malloc_r+0x418>
   834fc:	1449c83a 	sub	r4,r2,r17
   83500:	008003c4 	movi	r2,15
   83504:	113fd316 	blt	r2,r4,83454 <_malloc_r+0x364>
   83508:	9009883a 	mov	r4,r18
   8350c:	00840180 	call	84018 <__malloc_unlock>
   83510:	0007883a 	mov	r3,zero
   83514:	003f0a06 	br	83140 <_malloc_r+0x50>
   83518:	05c00274 	movhi	r23,9
   8351c:	bdf64204 	addi	r23,r23,-9976
   83520:	b8800017 	ldw	r2,0(r23)
   83524:	988d883a 	add	r6,r19,r2
   83528:	b9800015 	stw	r6,0(r23)
   8352c:	d0e00e17 	ldw	r3,-32712(gp)
   83530:	00bfffc4 	movi	r2,-1
   83534:	18808e26 	beq	r3,r2,83770 <_malloc_r+0x680>
   83538:	2145c83a 	sub	r2,r4,r5
   8353c:	3085883a 	add	r2,r6,r2
   83540:	b8800015 	stw	r2,0(r23)
   83544:	20c001cc 	andi	r3,r4,7
   83548:	18005f1e 	bne	r3,zero,836c8 <_malloc_r+0x5d8>
   8354c:	000b883a 	mov	r5,zero
   83550:	a4c5883a 	add	r2,r20,r19
   83554:	1083ffcc 	andi	r2,r2,4095
   83558:	00c40004 	movi	r3,4096
   8355c:	1887c83a 	sub	r3,r3,r2
   83560:	28e7883a 	add	r19,r5,r3
   83564:	9009883a 	mov	r4,r18
   83568:	980b883a 	mov	r5,r19
   8356c:	00838c80 	call	838c8 <_sbrk_r>
   83570:	1007883a 	mov	r3,r2
   83574:	00bfffc4 	movi	r2,-1
   83578:	18807a26 	beq	r3,r2,83764 <_malloc_r+0x674>
   8357c:	1d05c83a 	sub	r2,r3,r20
   83580:	9885883a 	add	r2,r19,r2
   83584:	10c00054 	ori	r3,r2,1
   83588:	b8800017 	ldw	r2,0(r23)
   8358c:	a021883a 	mov	r16,r20
   83590:	a0c00115 	stw	r3,4(r20)
   83594:	9885883a 	add	r2,r19,r2
   83598:	b8800015 	stw	r2,0(r23)
   8359c:	e5000215 	stw	r20,8(fp)
   835a0:	b7003626 	beq	r22,fp,8367c <_malloc_r+0x58c>
   835a4:	018003c4 	movi	r6,15
   835a8:	35404b36 	bltu	r6,r21,836d8 <_malloc_r+0x5e8>
   835ac:	00800044 	movi	r2,1
   835b0:	a0800115 	stw	r2,4(r20)
   835b4:	003fcd06 	br	834ec <_malloc_r+0x3fc>
   835b8:	2808d27a 	srli	r4,r5,9
   835bc:	2000371e 	bne	r4,zero,8369c <_malloc_r+0x5ac>
   835c0:	2808d0fa 	srli	r4,r5,3
   835c4:	200690fa 	slli	r3,r4,3
   835c8:	1ad1883a 	add	r8,r3,r11
   835cc:	41800217 	ldw	r6,8(r8)
   835d0:	41805b26 	beq	r8,r6,83740 <_malloc_r+0x650>
   835d4:	30800117 	ldw	r2,4(r6)
   835d8:	00ffff04 	movi	r3,-4
   835dc:	10c4703a 	and	r2,r2,r3
   835e0:	2880022e 	bgeu	r5,r2,835ec <_malloc_r+0x4fc>
   835e4:	31800217 	ldw	r6,8(r6)
   835e8:	41bffa1e 	bne	r8,r6,835d4 <_malloc_r+0x4e4>
   835ec:	32000317 	ldw	r8,12(r6)
   835f0:	39c00117 	ldw	r7,4(r7)
   835f4:	82000315 	stw	r8,12(r16)
   835f8:	81800215 	stw	r6,8(r16)
   835fc:	07000234 	movhi	fp,8
   83600:	e71e7704 	addi	fp,fp,31196
   83604:	34000315 	stw	r16,12(r6)
   83608:	44000215 	stw	r16,8(r8)
   8360c:	003f3e06 	br	83308 <_malloc_r+0x218>
   83610:	63000044 	addi	r12,r12,1
   83614:	608000cc 	andi	r2,r12,3
   83618:	10005d26 	beq	r2,zero,83790 <_malloc_r+0x6a0>
   8361c:	18c00204 	addi	r3,r3,8
   83620:	003f5106 	br	83368 <_malloc_r+0x278>
   83624:	8089883a 	add	r4,r16,r2
   83628:	003f6d06 	br	833e0 <_malloc_r+0x2f0>
   8362c:	00805504 	movi	r2,340
   83630:	10c02036 	bltu	r2,r3,836b4 <_malloc_r+0x5c4>
   83634:	8804d3fa 	srli	r2,r17,15
   83638:	11801dc4 	addi	r6,r2,119
   8363c:	300490fa 	slli	r2,r6,3
   83640:	003ed806 	br	831a4 <_malloc_r+0xb4>
   83644:	48c000c4 	addi	r3,r9,3
   83648:	003f3106 	br	83310 <_malloc_r+0x220>
   8364c:	05c00274 	movhi	r23,9
   83650:	bdf64204 	addi	r23,r23,-9976
   83654:	b8800017 	ldw	r2,0(r23)
   83658:	988d883a 	add	r6,r19,r2
   8365c:	b9800015 	stw	r6,0(r23)
   83660:	293fb21e 	bne	r5,r4,8352c <_malloc_r+0x43c>
   83664:	2083ffcc 	andi	r2,r4,4095
   83668:	103fb01e 	bne	r2,zero,8352c <_malloc_r+0x43c>
   8366c:	e4000217 	ldw	r16,8(fp)
   83670:	9d45883a 	add	r2,r19,r21
   83674:	10800054 	ori	r2,r2,1
   83678:	80800115 	stw	r2,4(r16)
   8367c:	b8c00017 	ldw	r3,0(r23)
   83680:	d0aec717 	ldw	r2,-17636(gp)
   83684:	10c0012e 	bgeu	r2,r3,8368c <_malloc_r+0x59c>
   83688:	d0eec715 	stw	r3,-17636(gp)
   8368c:	d0aec817 	ldw	r2,-17632(gp)
   83690:	10ff962e 	bgeu	r2,r3,834ec <_malloc_r+0x3fc>
   83694:	d0eec815 	stw	r3,-17632(gp)
   83698:	003f9406 	br	834ec <_malloc_r+0x3fc>
   8369c:	00800104 	movi	r2,4
   836a0:	11001e36 	bltu	r2,r4,8371c <_malloc_r+0x62c>
   836a4:	2804d1ba 	srli	r2,r5,6
   836a8:	11000e04 	addi	r4,r2,56
   836ac:	200690fa 	slli	r3,r4,3
   836b0:	003fc506 	br	835c8 <_malloc_r+0x4d8>
   836b4:	00815504 	movi	r2,1364
   836b8:	10c01d2e 	bgeu	r2,r3,83730 <_malloc_r+0x640>
   836bc:	01801f84 	movi	r6,126
   836c0:	0080fc04 	movi	r2,1008
   836c4:	003eb706 	br	831a4 <_malloc_r+0xb4>
   836c8:	00800204 	movi	r2,8
   836cc:	10cbc83a 	sub	r5,r2,r3
   836d0:	2169883a 	add	r20,r4,r5
   836d4:	003f9e06 	br	83550 <_malloc_r+0x460>
   836d8:	00bffe04 	movi	r2,-8
   836dc:	a93ffd04 	addi	r4,r21,-12
   836e0:	2088703a 	and	r4,r4,r2
   836e4:	b10b883a 	add	r5,r22,r4
   836e8:	00c00144 	movi	r3,5
   836ec:	28c00215 	stw	r3,8(r5)
   836f0:	28c00115 	stw	r3,4(r5)
   836f4:	b0800117 	ldw	r2,4(r22)
   836f8:	1080004c 	andi	r2,r2,1
   836fc:	2084b03a 	or	r2,r4,r2
   83700:	b0800115 	stw	r2,4(r22)
   83704:	313fdd2e 	bgeu	r6,r4,8367c <_malloc_r+0x58c>
   83708:	b1400204 	addi	r5,r22,8
   8370c:	9009883a 	mov	r4,r18
   83710:	0082ac80 	call	82ac8 <_free_r>
   83714:	e4000217 	ldw	r16,8(fp)
   83718:	003fd806 	br	8367c <_malloc_r+0x58c>
   8371c:	00800504 	movi	r2,20
   83720:	11001536 	bltu	r2,r4,83778 <_malloc_r+0x688>
   83724:	210016c4 	addi	r4,r4,91
   83728:	200690fa 	slli	r3,r4,3
   8372c:	003fa606 	br	835c8 <_malloc_r+0x4d8>
   83730:	8804d4ba 	srli	r2,r17,18
   83734:	11801f04 	addi	r6,r2,124
   83738:	300490fa 	slli	r2,r6,3
   8373c:	003e9906 	br	831a4 <_malloc_r+0xb4>
   83740:	2009d0ba 	srai	r4,r4,2
   83744:	01400234 	movhi	r5,8
   83748:	295e7704 	addi	r5,r5,31196
   8374c:	00c00044 	movi	r3,1
   83750:	28800117 	ldw	r2,4(r5)
   83754:	1906983a 	sll	r3,r3,r4
   83758:	10c4b03a 	or	r2,r2,r3
   8375c:	28800115 	stw	r2,4(r5)
   83760:	003fa306 	br	835f0 <_malloc_r+0x500>
   83764:	0027883a 	mov	r19,zero
   83768:	00c00044 	movi	r3,1
   8376c:	003f8606 	br	83588 <_malloc_r+0x498>
   83770:	d1200e15 	stw	r4,-32712(gp)
   83774:	003f7306 	br	83544 <_malloc_r+0x454>
   83778:	00801504 	movi	r2,84
   8377c:	11001936 	bltu	r2,r4,837e4 <_malloc_r+0x6f4>
   83780:	2804d33a 	srli	r2,r5,12
   83784:	11001b84 	addi	r4,r2,110
   83788:	200690fa 	slli	r3,r4,3
   8378c:	003f8e06 	br	835c8 <_malloc_r+0x4d8>
   83790:	480b883a 	mov	r5,r9
   83794:	6807883a 	mov	r3,r13
   83798:	288000cc 	andi	r2,r5,3
   8379c:	18fffe04 	addi	r3,r3,-8
   837a0:	297fffc4 	addi	r5,r5,-1
   837a4:	10001526 	beq	r2,zero,837fc <_malloc_r+0x70c>
   837a8:	18800217 	ldw	r2,8(r3)
   837ac:	10fffa26 	beq	r2,r3,83798 <_malloc_r+0x6a8>
   837b0:	2109883a 	add	r4,r4,r4
   837b4:	393f1e36 	bltu	r7,r4,83430 <_malloc_r+0x340>
   837b8:	203f1d26 	beq	r4,zero,83430 <_malloc_r+0x340>
   837bc:	21c4703a 	and	r2,r4,r7
   837c0:	10000226 	beq	r2,zero,837cc <_malloc_r+0x6dc>
   837c4:	6013883a 	mov	r9,r12
   837c8:	003ee106 	br	83350 <_malloc_r+0x260>
   837cc:	2109883a 	add	r4,r4,r4
   837d0:	3904703a 	and	r2,r7,r4
   837d4:	63000104 	addi	r12,r12,4
   837d8:	103ffc26 	beq	r2,zero,837cc <_malloc_r+0x6dc>
   837dc:	6013883a 	mov	r9,r12
   837e0:	003edb06 	br	83350 <_malloc_r+0x260>
   837e4:	00805504 	movi	r2,340
   837e8:	11000836 	bltu	r2,r4,8380c <_malloc_r+0x71c>
   837ec:	2804d3fa 	srli	r2,r5,15
   837f0:	11001dc4 	addi	r4,r2,119
   837f4:	200690fa 	slli	r3,r4,3
   837f8:	003f7306 	br	835c8 <_malloc_r+0x4d8>
   837fc:	0104303a 	nor	r2,zero,r4
   83800:	388e703a 	and	r7,r7,r2
   83804:	e1c00115 	stw	r7,4(fp)
   83808:	003fe906 	br	837b0 <_malloc_r+0x6c0>
   8380c:	00815504 	movi	r2,1364
   83810:	1100032e 	bgeu	r2,r4,83820 <_malloc_r+0x730>
   83814:	01001f84 	movi	r4,126
   83818:	00c0fc04 	movi	r3,1008
   8381c:	003f6a06 	br	835c8 <_malloc_r+0x4d8>
   83820:	2804d4ba 	srli	r2,r5,18
   83824:	11001f04 	addi	r4,r2,124
   83828:	200690fa 	slli	r3,r4,3
   8382c:	003f6606 	br	835c8 <_malloc_r+0x4d8>

00083830 <memset>:
   83830:	008000c4 	movi	r2,3
   83834:	29403fcc 	andi	r5,r5,255
   83838:	2007883a 	mov	r3,r4
   8383c:	1180022e 	bgeu	r2,r6,83848 <memset+0x18>
   83840:	2084703a 	and	r2,r4,r2
   83844:	10000826 	beq	r2,zero,83868 <memset+0x38>
   83848:	30000526 	beq	r6,zero,83860 <memset+0x30>
   8384c:	2805883a 	mov	r2,r5
   83850:	30cd883a 	add	r6,r6,r3
   83854:	18800005 	stb	r2,0(r3)
   83858:	18c00044 	addi	r3,r3,1
   8385c:	19bffd1e 	bne	r3,r6,83854 <memset+0x24>
   83860:	2005883a 	mov	r2,r4
   83864:	f800283a 	ret
   83868:	2804923a 	slli	r2,r5,8
   8386c:	020003c4 	movi	r8,15
   83870:	200f883a 	mov	r7,r4
   83874:	2884b03a 	or	r2,r5,r2
   83878:	1006943a 	slli	r3,r2,16
   8387c:	10c6b03a 	or	r3,r2,r3
   83880:	41800a2e 	bgeu	r8,r6,838ac <memset+0x7c>
   83884:	4005883a 	mov	r2,r8
   83888:	31bffc04 	addi	r6,r6,-16
   8388c:	38c00015 	stw	r3,0(r7)
   83890:	38c00115 	stw	r3,4(r7)
   83894:	38c00215 	stw	r3,8(r7)
   83898:	38c00315 	stw	r3,12(r7)
   8389c:	39c00404 	addi	r7,r7,16
   838a0:	11bff936 	bltu	r2,r6,83888 <memset+0x58>
   838a4:	008000c4 	movi	r2,3
   838a8:	1180052e 	bgeu	r2,r6,838c0 <memset+0x90>
   838ac:	31bfff04 	addi	r6,r6,-4
   838b0:	008000c4 	movi	r2,3
   838b4:	38c00015 	stw	r3,0(r7)
   838b8:	39c00104 	addi	r7,r7,4
   838bc:	11bffb36 	bltu	r2,r6,838ac <memset+0x7c>
   838c0:	3807883a 	mov	r3,r7
   838c4:	003fe006 	br	83848 <memset+0x18>

000838c8 <_sbrk_r>:
   838c8:	defffd04 	addi	sp,sp,-12
   838cc:	dc000015 	stw	r16,0(sp)
   838d0:	04000274 	movhi	r16,9
   838d4:	842e3e04 	addi	r16,r16,-18184
   838d8:	dc400115 	stw	r17,4(sp)
   838dc:	80000015 	stw	zero,0(r16)
   838e0:	2023883a 	mov	r17,r4
   838e4:	2809883a 	mov	r4,r5
   838e8:	dfc00215 	stw	ra,8(sp)
   838ec:	00841140 	call	84114 <sbrk>
   838f0:	1007883a 	mov	r3,r2
   838f4:	00bfffc4 	movi	r2,-1
   838f8:	18800626 	beq	r3,r2,83914 <_sbrk_r+0x4c>
   838fc:	1805883a 	mov	r2,r3
   83900:	dfc00217 	ldw	ra,8(sp)
   83904:	dc400117 	ldw	r17,4(sp)
   83908:	dc000017 	ldw	r16,0(sp)
   8390c:	dec00304 	addi	sp,sp,12
   83910:	f800283a 	ret
   83914:	80800017 	ldw	r2,0(r16)
   83918:	103ff826 	beq	r2,zero,838fc <_sbrk_r+0x34>
   8391c:	88800015 	stw	r2,0(r17)
   83920:	1805883a 	mov	r2,r3
   83924:	dfc00217 	ldw	ra,8(sp)
   83928:	dc400117 	ldw	r17,4(sp)
   8392c:	dc000017 	ldw	r16,0(sp)
   83930:	dec00304 	addi	sp,sp,12
   83934:	f800283a 	ret

00083938 <__sclose>:
   83938:	2940038f 	ldh	r5,14(r5)
   8393c:	0083afc1 	jmpi	83afc <_close_r>

00083940 <__sseek>:
   83940:	defffe04 	addi	sp,sp,-8
   83944:	dc000015 	stw	r16,0(sp)
   83948:	2821883a 	mov	r16,r5
   8394c:	2940038f 	ldh	r5,14(r5)
   83950:	dfc00115 	stw	ra,4(sp)
   83954:	0083d740 	call	83d74 <_lseek_r>
   83958:	1007883a 	mov	r3,r2
   8395c:	00bfffc4 	movi	r2,-1
   83960:	18800926 	beq	r3,r2,83988 <__sseek+0x48>
   83964:	8080030b 	ldhu	r2,12(r16)
   83968:	80c01415 	stw	r3,80(r16)
   8396c:	10840014 	ori	r2,r2,4096
   83970:	8080030d 	sth	r2,12(r16)
   83974:	1805883a 	mov	r2,r3
   83978:	dfc00117 	ldw	ra,4(sp)
   8397c:	dc000017 	ldw	r16,0(sp)
   83980:	dec00204 	addi	sp,sp,8
   83984:	f800283a 	ret
   83988:	8080030b 	ldhu	r2,12(r16)
   8398c:	10bbffcc 	andi	r2,r2,61439
   83990:	8080030d 	sth	r2,12(r16)
   83994:	1805883a 	mov	r2,r3
   83998:	dfc00117 	ldw	ra,4(sp)
   8399c:	dc000017 	ldw	r16,0(sp)
   839a0:	dec00204 	addi	sp,sp,8
   839a4:	f800283a 	ret

000839a8 <__swrite>:
   839a8:	2880030b 	ldhu	r2,12(r5)
   839ac:	defffb04 	addi	sp,sp,-20
   839b0:	dcc00315 	stw	r19,12(sp)
   839b4:	1080400c 	andi	r2,r2,256
   839b8:	dc800215 	stw	r18,8(sp)
   839bc:	dc400115 	stw	r17,4(sp)
   839c0:	dc000015 	stw	r16,0(sp)
   839c4:	3027883a 	mov	r19,r6
   839c8:	3825883a 	mov	r18,r7
   839cc:	dfc00415 	stw	ra,16(sp)
   839d0:	2821883a 	mov	r16,r5
   839d4:	000d883a 	mov	r6,zero
   839d8:	01c00084 	movi	r7,2
   839dc:	2023883a 	mov	r17,r4
   839e0:	10000226 	beq	r2,zero,839ec <__swrite+0x44>
   839e4:	2940038f 	ldh	r5,14(r5)
   839e8:	0083d740 	call	83d74 <_lseek_r>
   839ec:	8080030b 	ldhu	r2,12(r16)
   839f0:	8140038f 	ldh	r5,14(r16)
   839f4:	8809883a 	mov	r4,r17
   839f8:	10bbffcc 	andi	r2,r2,61439
   839fc:	980d883a 	mov	r6,r19
   83a00:	900f883a 	mov	r7,r18
   83a04:	8080030d 	sth	r2,12(r16)
   83a08:	dfc00417 	ldw	ra,16(sp)
   83a0c:	dcc00317 	ldw	r19,12(sp)
   83a10:	dc800217 	ldw	r18,8(sp)
   83a14:	dc400117 	ldw	r17,4(sp)
   83a18:	dc000017 	ldw	r16,0(sp)
   83a1c:	dec00504 	addi	sp,sp,20
   83a20:	0083a841 	jmpi	83a84 <_write_r>

00083a24 <__sread>:
   83a24:	defffe04 	addi	sp,sp,-8
   83a28:	dc000015 	stw	r16,0(sp)
   83a2c:	2821883a 	mov	r16,r5
   83a30:	2940038f 	ldh	r5,14(r5)
   83a34:	dfc00115 	stw	ra,4(sp)
   83a38:	0083dec0 	call	83dec <_read_r>
   83a3c:	1007883a 	mov	r3,r2
   83a40:	10000816 	blt	r2,zero,83a64 <__sread+0x40>
   83a44:	80801417 	ldw	r2,80(r16)
   83a48:	10c5883a 	add	r2,r2,r3
   83a4c:	80801415 	stw	r2,80(r16)
   83a50:	1805883a 	mov	r2,r3
   83a54:	dfc00117 	ldw	ra,4(sp)
   83a58:	dc000017 	ldw	r16,0(sp)
   83a5c:	dec00204 	addi	sp,sp,8
   83a60:	f800283a 	ret
   83a64:	8080030b 	ldhu	r2,12(r16)
   83a68:	10bbffcc 	andi	r2,r2,61439
   83a6c:	8080030d 	sth	r2,12(r16)
   83a70:	1805883a 	mov	r2,r3
   83a74:	dfc00117 	ldw	ra,4(sp)
   83a78:	dc000017 	ldw	r16,0(sp)
   83a7c:	dec00204 	addi	sp,sp,8
   83a80:	f800283a 	ret

00083a84 <_write_r>:
   83a84:	defffd04 	addi	sp,sp,-12
   83a88:	dc000015 	stw	r16,0(sp)
   83a8c:	04000274 	movhi	r16,9
   83a90:	842e3e04 	addi	r16,r16,-18184
   83a94:	dc400115 	stw	r17,4(sp)
   83a98:	80000015 	stw	zero,0(r16)
   83a9c:	2023883a 	mov	r17,r4
   83aa0:	2809883a 	mov	r4,r5
   83aa4:	300b883a 	mov	r5,r6
   83aa8:	380d883a 	mov	r6,r7
   83aac:	dfc00215 	stw	ra,8(sp)
   83ab0:	00841640 	call	84164 <write>
   83ab4:	1007883a 	mov	r3,r2
   83ab8:	00bfffc4 	movi	r2,-1
   83abc:	18800626 	beq	r3,r2,83ad8 <_write_r+0x54>
   83ac0:	1805883a 	mov	r2,r3
   83ac4:	dfc00217 	ldw	ra,8(sp)
   83ac8:	dc400117 	ldw	r17,4(sp)
   83acc:	dc000017 	ldw	r16,0(sp)
   83ad0:	dec00304 	addi	sp,sp,12
   83ad4:	f800283a 	ret
   83ad8:	80800017 	ldw	r2,0(r16)
   83adc:	103ff826 	beq	r2,zero,83ac0 <_write_r+0x3c>
   83ae0:	88800015 	stw	r2,0(r17)
   83ae4:	1805883a 	mov	r2,r3
   83ae8:	dfc00217 	ldw	ra,8(sp)
   83aec:	dc400117 	ldw	r17,4(sp)
   83af0:	dc000017 	ldw	r16,0(sp)
   83af4:	dec00304 	addi	sp,sp,12
   83af8:	f800283a 	ret

00083afc <_close_r>:
   83afc:	defffd04 	addi	sp,sp,-12
   83b00:	dc000015 	stw	r16,0(sp)
   83b04:	04000274 	movhi	r16,9
   83b08:	842e3e04 	addi	r16,r16,-18184
   83b0c:	dc400115 	stw	r17,4(sp)
   83b10:	80000015 	stw	zero,0(r16)
   83b14:	2023883a 	mov	r17,r4
   83b18:	2809883a 	mov	r4,r5
   83b1c:	dfc00215 	stw	ra,8(sp)
   83b20:	00814a80 	call	814a8 <close>
   83b24:	1007883a 	mov	r3,r2
   83b28:	00bfffc4 	movi	r2,-1
   83b2c:	18800626 	beq	r3,r2,83b48 <_close_r+0x4c>
   83b30:	1805883a 	mov	r2,r3
   83b34:	dfc00217 	ldw	ra,8(sp)
   83b38:	dc400117 	ldw	r17,4(sp)
   83b3c:	dc000017 	ldw	r16,0(sp)
   83b40:	dec00304 	addi	sp,sp,12
   83b44:	f800283a 	ret
   83b48:	80800017 	ldw	r2,0(r16)
   83b4c:	103ff826 	beq	r2,zero,83b30 <_close_r+0x34>
   83b50:	88800015 	stw	r2,0(r17)
   83b54:	1805883a 	mov	r2,r3
   83b58:	dfc00217 	ldw	ra,8(sp)
   83b5c:	dc400117 	ldw	r17,4(sp)
   83b60:	dc000017 	ldw	r16,0(sp)
   83b64:	dec00304 	addi	sp,sp,12
   83b68:	f800283a 	ret

00083b6c <_fclose_r>:
   83b6c:	defffc04 	addi	sp,sp,-16
   83b70:	dc400115 	stw	r17,4(sp)
   83b74:	dc000015 	stw	r16,0(sp)
   83b78:	dfc00315 	stw	ra,12(sp)
   83b7c:	dc800215 	stw	r18,8(sp)
   83b80:	2821883a 	mov	r16,r5
   83b84:	2023883a 	mov	r17,r4
   83b88:	28002926 	beq	r5,zero,83c30 <_fclose_r+0xc4>
   83b8c:	00827340 	call	82734 <__sfp_lock_acquire>
   83b90:	88000226 	beq	r17,zero,83b9c <_fclose_r+0x30>
   83b94:	88800e17 	ldw	r2,56(r17)
   83b98:	10002d26 	beq	r2,zero,83c50 <_fclose_r+0xe4>
   83b9c:	8080030f 	ldh	r2,12(r16)
   83ba0:	10002226 	beq	r2,zero,83c2c <_fclose_r+0xc0>
   83ba4:	8809883a 	mov	r4,r17
   83ba8:	800b883a 	mov	r5,r16
   83bac:	00824ac0 	call	824ac <_fflush_r>
   83bb0:	1025883a 	mov	r18,r2
   83bb4:	80800b17 	ldw	r2,44(r16)
   83bb8:	10000426 	beq	r2,zero,83bcc <_fclose_r+0x60>
   83bbc:	81400717 	ldw	r5,28(r16)
   83bc0:	8809883a 	mov	r4,r17
   83bc4:	103ee83a 	callr	r2
   83bc8:	10002a16 	blt	r2,zero,83c74 <_fclose_r+0x108>
   83bcc:	8080030b 	ldhu	r2,12(r16)
   83bd0:	1080200c 	andi	r2,r2,128
   83bd4:	1000231e 	bne	r2,zero,83c64 <_fclose_r+0xf8>
   83bd8:	81400c17 	ldw	r5,48(r16)
   83bdc:	28000526 	beq	r5,zero,83bf4 <_fclose_r+0x88>
   83be0:	80801004 	addi	r2,r16,64
   83be4:	28800226 	beq	r5,r2,83bf0 <_fclose_r+0x84>
   83be8:	8809883a 	mov	r4,r17
   83bec:	0082ac80 	call	82ac8 <_free_r>
   83bf0:	80000c15 	stw	zero,48(r16)
   83bf4:	81401117 	ldw	r5,68(r16)
   83bf8:	28000326 	beq	r5,zero,83c08 <_fclose_r+0x9c>
   83bfc:	8809883a 	mov	r4,r17
   83c00:	0082ac80 	call	82ac8 <_free_r>
   83c04:	80001115 	stw	zero,68(r16)
   83c08:	8000030d 	sth	zero,12(r16)
   83c0c:	00827380 	call	82738 <__sfp_lock_release>
   83c10:	9005883a 	mov	r2,r18
   83c14:	dfc00317 	ldw	ra,12(sp)
   83c18:	dc800217 	ldw	r18,8(sp)
   83c1c:	dc400117 	ldw	r17,4(sp)
   83c20:	dc000017 	ldw	r16,0(sp)
   83c24:	dec00404 	addi	sp,sp,16
   83c28:	f800283a 	ret
   83c2c:	00827380 	call	82738 <__sfp_lock_release>
   83c30:	0025883a 	mov	r18,zero
   83c34:	9005883a 	mov	r2,r18
   83c38:	dfc00317 	ldw	ra,12(sp)
   83c3c:	dc800217 	ldw	r18,8(sp)
   83c40:	dc400117 	ldw	r17,4(sp)
   83c44:	dc000017 	ldw	r16,0(sp)
   83c48:	dec00404 	addi	sp,sp,16
   83c4c:	f800283a 	ret
   83c50:	8809883a 	mov	r4,r17
   83c54:	00827440 	call	82744 <__sinit>
   83c58:	8080030f 	ldh	r2,12(r16)
   83c5c:	103fd11e 	bne	r2,zero,83ba4 <_fclose_r+0x38>
   83c60:	003ff206 	br	83c2c <_fclose_r+0xc0>
   83c64:	81400417 	ldw	r5,16(r16)
   83c68:	8809883a 	mov	r4,r17
   83c6c:	0082ac80 	call	82ac8 <_free_r>
   83c70:	003fd906 	br	83bd8 <_fclose_r+0x6c>
   83c74:	04bfffc4 	movi	r18,-1
   83c78:	003fd406 	br	83bcc <_fclose_r+0x60>

00083c7c <fclose>:
   83c7c:	00800234 	movhi	r2,8
   83c80:	109f8404 	addi	r2,r2,32272
   83c84:	200b883a 	mov	r5,r4
   83c88:	11000017 	ldw	r4,0(r2)
   83c8c:	0083b6c1 	jmpi	83b6c <_fclose_r>

00083c90 <_fstat_r>:
   83c90:	defffd04 	addi	sp,sp,-12
   83c94:	dc000015 	stw	r16,0(sp)
   83c98:	04000274 	movhi	r16,9
   83c9c:	842e3e04 	addi	r16,r16,-18184
   83ca0:	dc400115 	stw	r17,4(sp)
   83ca4:	80000015 	stw	zero,0(r16)
   83ca8:	2023883a 	mov	r17,r4
   83cac:	2809883a 	mov	r4,r5
   83cb0:	300b883a 	mov	r5,r6
   83cb4:	dfc00215 	stw	ra,8(sp)
   83cb8:	0083e780 	call	83e78 <fstat>
   83cbc:	1007883a 	mov	r3,r2
   83cc0:	00bfffc4 	movi	r2,-1
   83cc4:	18800626 	beq	r3,r2,83ce0 <_fstat_r+0x50>
   83cc8:	1805883a 	mov	r2,r3
   83ccc:	dfc00217 	ldw	ra,8(sp)
   83cd0:	dc400117 	ldw	r17,4(sp)
   83cd4:	dc000017 	ldw	r16,0(sp)
   83cd8:	dec00304 	addi	sp,sp,12
   83cdc:	f800283a 	ret
   83ce0:	80800017 	ldw	r2,0(r16)
   83ce4:	103ff826 	beq	r2,zero,83cc8 <_fstat_r+0x38>
   83ce8:	88800015 	stw	r2,0(r17)
   83cec:	1805883a 	mov	r2,r3
   83cf0:	dfc00217 	ldw	ra,8(sp)
   83cf4:	dc400117 	ldw	r17,4(sp)
   83cf8:	dc000017 	ldw	r16,0(sp)
   83cfc:	dec00304 	addi	sp,sp,12
   83d00:	f800283a 	ret

00083d04 <_isatty_r>:
   83d04:	defffd04 	addi	sp,sp,-12
   83d08:	dc000015 	stw	r16,0(sp)
   83d0c:	04000274 	movhi	r16,9
   83d10:	842e3e04 	addi	r16,r16,-18184
   83d14:	dc400115 	stw	r17,4(sp)
   83d18:	80000015 	stw	zero,0(r16)
   83d1c:	2023883a 	mov	r17,r4
   83d20:	2809883a 	mov	r4,r5
   83d24:	dfc00215 	stw	ra,8(sp)
   83d28:	0083ef80 	call	83ef8 <isatty>
   83d2c:	1007883a 	mov	r3,r2
   83d30:	00bfffc4 	movi	r2,-1
   83d34:	18800626 	beq	r3,r2,83d50 <_isatty_r+0x4c>
   83d38:	1805883a 	mov	r2,r3
   83d3c:	dfc00217 	ldw	ra,8(sp)
   83d40:	dc400117 	ldw	r17,4(sp)
   83d44:	dc000017 	ldw	r16,0(sp)
   83d48:	dec00304 	addi	sp,sp,12
   83d4c:	f800283a 	ret
   83d50:	80800017 	ldw	r2,0(r16)
   83d54:	103ff826 	beq	r2,zero,83d38 <_isatty_r+0x34>
   83d58:	88800015 	stw	r2,0(r17)
   83d5c:	1805883a 	mov	r2,r3
   83d60:	dfc00217 	ldw	ra,8(sp)
   83d64:	dc400117 	ldw	r17,4(sp)
   83d68:	dc000017 	ldw	r16,0(sp)
   83d6c:	dec00304 	addi	sp,sp,12
   83d70:	f800283a 	ret

00083d74 <_lseek_r>:
   83d74:	defffd04 	addi	sp,sp,-12
   83d78:	dc000015 	stw	r16,0(sp)
   83d7c:	04000274 	movhi	r16,9
   83d80:	842e3e04 	addi	r16,r16,-18184
   83d84:	dc400115 	stw	r17,4(sp)
   83d88:	80000015 	stw	zero,0(r16)
   83d8c:	2023883a 	mov	r17,r4
   83d90:	2809883a 	mov	r4,r5
   83d94:	300b883a 	mov	r5,r6
   83d98:	380d883a 	mov	r6,r7
   83d9c:	dfc00215 	stw	ra,8(sp)
   83da0:	0083f7c0 	call	83f7c <lseek>
   83da4:	1007883a 	mov	r3,r2
   83da8:	00bfffc4 	movi	r2,-1
   83dac:	18800626 	beq	r3,r2,83dc8 <_lseek_r+0x54>
   83db0:	1805883a 	mov	r2,r3
   83db4:	dfc00217 	ldw	ra,8(sp)
   83db8:	dc400117 	ldw	r17,4(sp)
   83dbc:	dc000017 	ldw	r16,0(sp)
   83dc0:	dec00304 	addi	sp,sp,12
   83dc4:	f800283a 	ret
   83dc8:	80800017 	ldw	r2,0(r16)
   83dcc:	103ff826 	beq	r2,zero,83db0 <_lseek_r+0x3c>
   83dd0:	88800015 	stw	r2,0(r17)
   83dd4:	1805883a 	mov	r2,r3
   83dd8:	dfc00217 	ldw	ra,8(sp)
   83ddc:	dc400117 	ldw	r17,4(sp)
   83de0:	dc000017 	ldw	r16,0(sp)
   83de4:	dec00304 	addi	sp,sp,12
   83de8:	f800283a 	ret

00083dec <_read_r>:
   83dec:	defffd04 	addi	sp,sp,-12
   83df0:	dc000015 	stw	r16,0(sp)
   83df4:	04000274 	movhi	r16,9
   83df8:	842e3e04 	addi	r16,r16,-18184
   83dfc:	dc400115 	stw	r17,4(sp)
   83e00:	80000015 	stw	zero,0(r16)
   83e04:	2023883a 	mov	r17,r4
   83e08:	2809883a 	mov	r4,r5
   83e0c:	300b883a 	mov	r5,r6
   83e10:	380d883a 	mov	r6,r7
   83e14:	dfc00215 	stw	ra,8(sp)
   83e18:	008401c0 	call	8401c <read>
   83e1c:	1007883a 	mov	r3,r2
   83e20:	00bfffc4 	movi	r2,-1
   83e24:	18800626 	beq	r3,r2,83e40 <_read_r+0x54>
   83e28:	1805883a 	mov	r2,r3
   83e2c:	dfc00217 	ldw	ra,8(sp)
   83e30:	dc400117 	ldw	r17,4(sp)
   83e34:	dc000017 	ldw	r16,0(sp)
   83e38:	dec00304 	addi	sp,sp,12
   83e3c:	f800283a 	ret
   83e40:	80800017 	ldw	r2,0(r16)
   83e44:	103ff826 	beq	r2,zero,83e28 <_read_r+0x3c>
   83e48:	88800015 	stw	r2,0(r17)
   83e4c:	1805883a 	mov	r2,r3
   83e50:	dfc00217 	ldw	ra,8(sp)
   83e54:	dc400117 	ldw	r17,4(sp)
   83e58:	dc000017 	ldw	r16,0(sp)
   83e5c:	dec00304 	addi	sp,sp,12
   83e60:	f800283a 	ret

00083e64 <_exit>:
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   83e64:	20000226 	beq	r4,zero,83e70 <_exit+0xc>
    ALT_SIM_FAIL();
   83e68:	002af070 	cmpltui	zero,zero,43969
   83e6c:	00000106 	br	83e74 <_exit+0x10>
  } else {
    ALT_SIM_PASS();
   83e70:	002af0b0 	cmpltui	zero,zero,43970
   83e74:	003fff06 	br	83e74 <_exit+0x10>

00083e78 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   83e78:	deffff04 	addi	sp,sp,-4
   83e7c:	dfc00015 	stw	ra,0(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   83e80:	20000e16 	blt	r4,zero,83ebc <fstat+0x44>
   83e84:	20c00324 	muli	r3,r4,12
   83e88:	00800234 	movhi	r2,8
   83e8c:	109d1704 	addi	r2,r2,29788
   83e90:	1889883a 	add	r4,r3,r2
  
  if (fd)
   83e94:	20000926 	beq	r4,zero,83ebc <fstat+0x44>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   83e98:	20800017 	ldw	r2,0(r4)
   83e9c:	10800817 	ldw	r2,32(r2)
   83ea0:	10000226 	beq	r2,zero,83eac <fstat+0x34>
    {
      return fd->dev->fstat(fd, st);
   83ea4:	103ee83a 	callr	r2
   83ea8:	00001006 	br	83eec <fstat+0x74>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   83eac:	00880004 	movi	r2,8192
   83eb0:	28800115 	stw	r2,4(r5)
   83eb4:	0005883a 	mov	r2,zero
   83eb8:	00000c06 	br	83eec <fstat+0x74>
   83ebc:	00800234 	movhi	r2,8
   83ec0:	109f8004 	addi	r2,r2,32256
   83ec4:	10800017 	ldw	r2,0(r2)
   83ec8:	1000031e 	bne	r2,zero,83ed8 <fstat+0x60>
   83ecc:	00c00274 	movhi	r3,9
   83ed0:	18ee3e04 	addi	r3,r3,-18184
   83ed4:	00000206 	br	83ee0 <fstat+0x68>
   83ed8:	103ee83a 	callr	r2
   83edc:	1007883a 	mov	r3,r2
      return 0;
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   83ee0:	00801444 	movi	r2,81
   83ee4:	18800015 	stw	r2,0(r3)
   83ee8:	00bfffc4 	movi	r2,-1
    return -1;
  }
}
   83eec:	dfc00017 	ldw	ra,0(sp)
   83ef0:	dec00104 	addi	sp,sp,4
   83ef4:	f800283a 	ret

00083ef8 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   83ef8:	defff004 	addi	sp,sp,-64
   83efc:	dfc00f15 	stw	ra,60(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   83f00:	20000f16 	blt	r4,zero,83f40 <isatty+0x48>
   83f04:	20c00324 	muli	r3,r4,12
   83f08:	00800234 	movhi	r2,8
   83f0c:	109d1704 	addi	r2,r2,29788
   83f10:	1885883a 	add	r2,r3,r2
  
  if (fd)
   83f14:	10000a26 	beq	r2,zero,83f40 <isatty+0x48>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   83f18:	10800017 	ldw	r2,0(r2)
   83f1c:	10800817 	ldw	r2,32(r2)
   83f20:	1000021e 	bne	r2,zero,83f2c <isatty+0x34>
   83f24:	00800044 	movi	r2,1
   83f28:	00001106 	br	83f70 <isatty+0x78>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   83f2c:	d80b883a 	mov	r5,sp
   83f30:	0083e780 	call	83e78 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   83f34:	d8800117 	ldw	r2,4(sp)
   83f38:	10880020 	cmpeqi	r2,r2,8192
   83f3c:	00000c06 	br	83f70 <isatty+0x78>
   83f40:	00800234 	movhi	r2,8
   83f44:	109f8004 	addi	r2,r2,32256
   83f48:	10800017 	ldw	r2,0(r2)
   83f4c:	1000031e 	bne	r2,zero,83f5c <isatty+0x64>
   83f50:	00c00274 	movhi	r3,9
   83f54:	18ee3e04 	addi	r3,r3,-18184
   83f58:	00000206 	br	83f64 <isatty+0x6c>
   83f5c:	103ee83a 	callr	r2
   83f60:	1007883a 	mov	r3,r2
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   83f64:	00801444 	movi	r2,81
   83f68:	18800015 	stw	r2,0(r3)
   83f6c:	0005883a 	mov	r2,zero
    return 0;
  }
}
   83f70:	dfc00f17 	ldw	ra,60(sp)
   83f74:	dec01004 	addi	sp,sp,64
   83f78:	f800283a 	ret

00083f7c <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   83f7c:	defffe04 	addi	sp,sp,-8
   83f80:	dfc00115 	stw	ra,4(sp)
   83f84:	dc000015 	stw	r16,0(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   83f88:	2000020e 	bge	r4,zero,83f94 <lseek+0x18>
   83f8c:	043febc4 	movi	r16,-81
   83f90:	00000d06 	br	83fc8 <lseek+0x4c>
   83f94:	20c00324 	muli	r3,r4,12
   83f98:	00800234 	movhi	r2,8
   83f9c:	109d1704 	addi	r2,r2,29788
   83fa0:	1889883a 	add	r4,r3,r2
  
  if (fd) 
   83fa4:	20001526 	beq	r4,zero,83ffc <lseek+0x80>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   83fa8:	20800017 	ldw	r2,0(r4)
   83fac:	10800717 	ldw	r2,28(r2)
   83fb0:	1000021e 	bne	r2,zero,83fbc <lseek+0x40>
   83fb4:	043fde84 	movi	r16,-134
   83fb8:	00000306 	br	83fc8 <lseek+0x4c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   83fbc:	103ee83a 	callr	r2
  else  
  {
    rc = -EBADFD;
  }

  if (rc < 0)
   83fc0:	1000100e 	bge	r2,zero,84004 <lseek+0x88>
   83fc4:	1021883a 	mov	r16,r2
   83fc8:	00800234 	movhi	r2,8
   83fcc:	109f8004 	addi	r2,r2,32256
   83fd0:	10800017 	ldw	r2,0(r2)
   83fd4:	1000031e 	bne	r2,zero,83fe4 <lseek+0x68>
   83fd8:	00c00274 	movhi	r3,9
   83fdc:	18ee3e04 	addi	r3,r3,-18184
   83fe0:	00000206 	br	83fec <lseek+0x70>
   83fe4:	103ee83a 	callr	r2
   83fe8:	1007883a 	mov	r3,r2
  {
    ALT_ERRNO = -rc;
   83fec:	0405c83a 	sub	r2,zero,r16
   83ff0:	18800015 	stw	r2,0(r3)
   83ff4:	00bfffc4 	movi	r2,-1
   83ff8:	00000206 	br	84004 <lseek+0x88>
   83ffc:	043febc4 	movi	r16,-81
   84000:	003ff106 	br	83fc8 <lseek+0x4c>
    rc = -1;
  }

  return rc;
}
   84004:	dfc00117 	ldw	ra,4(sp)
   84008:	dc000017 	ldw	r16,0(sp)
   8400c:	dec00204 	addi	sp,sp,8
   84010:	f800283a 	ret

00084014 <__malloc_lock>:
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
}
   84014:	f800283a 	ret

00084018 <__malloc_unlock>:
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
}
   84018:	f800283a 	ret

0008401c <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   8401c:	defffe04 	addi	sp,sp,-8
   84020:	dfc00115 	stw	ra,4(sp)
   84024:	dc000015 	stw	r16,0(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   84028:	20002916 	blt	r4,zero,840d0 <read+0xb4>
   8402c:	20c00324 	muli	r3,r4,12
   84030:	00800234 	movhi	r2,8
   84034:	109d1704 	addi	r2,r2,29788
   84038:	1889883a 	add	r4,r3,r2
  
  if (fd)
   8403c:	20002426 	beq	r4,zero,840d0 <read+0xb4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   84040:	20800217 	ldw	r2,8(r4)
   84044:	108000cc 	andi	r2,r2,3
   84048:	00c00044 	movi	r3,1
   8404c:	10c01326 	beq	r2,r3,8409c <read+0x80>
   84050:	20800017 	ldw	r2,0(r4)
   84054:	10800517 	ldw	r2,20(r2)
   84058:	10001026 	beq	r2,zero,8409c <read+0x80>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   8405c:	103ee83a 	callr	r2
   84060:	1021883a 	mov	r16,r2
   84064:	1000260e 	bge	r2,zero,84100 <read+0xe4>
   84068:	00800234 	movhi	r2,8
   8406c:	109f8004 	addi	r2,r2,32256
   84070:	10800017 	ldw	r2,0(r2)
   84074:	1000031e 	bne	r2,zero,84084 <read+0x68>
   84078:	00c00274 	movhi	r3,9
   8407c:	18ee3e04 	addi	r3,r3,-18184
   84080:	00000206 	br	8408c <read+0x70>
   84084:	103ee83a 	callr	r2
   84088:	1007883a 	mov	r3,r2
        {
          ALT_ERRNO = -rval;
   8408c:	0405c83a 	sub	r2,zero,r16
   84090:	18800015 	stw	r2,0(r3)
   84094:	043fffc4 	movi	r16,-1
   84098:	00001906 	br	84100 <read+0xe4>
   8409c:	00800234 	movhi	r2,8
   840a0:	109f8004 	addi	r2,r2,32256
   840a4:	10800017 	ldw	r2,0(r2)
   840a8:	1000031e 	bne	r2,zero,840b8 <read+0x9c>
   840ac:	00c00274 	movhi	r3,9
   840b0:	18ee3e04 	addi	r3,r3,-18184
   840b4:	00000206 	br	840c0 <read+0xa4>
   840b8:	103ee83a 	callr	r2
   840bc:	1007883a 	mov	r3,r2
        }
        return rval;
      }
      else
      {
        ALT_ERRNO = EACCES;
   840c0:	00800344 	movi	r2,13
   840c4:	18800015 	stw	r2,0(r3)
   840c8:	043fffc4 	movi	r16,-1
   840cc:	00000c06 	br	84100 <read+0xe4>
   840d0:	00800234 	movhi	r2,8
   840d4:	109f8004 	addi	r2,r2,32256
   840d8:	10800017 	ldw	r2,0(r2)
   840dc:	1000031e 	bne	r2,zero,840ec <read+0xd0>
   840e0:	00c00274 	movhi	r3,9
   840e4:	18ee3e04 	addi	r3,r3,-18184
   840e8:	00000206 	br	840f4 <read+0xd8>
   840ec:	103ee83a 	callr	r2
   840f0:	1007883a 	mov	r3,r2
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   840f4:	00801444 	movi	r2,81
   840f8:	18800015 	stw	r2,0(r3)
   840fc:	043fffc4 	movi	r16,-1
  }
  return -1;
}
   84100:	8005883a 	mov	r2,r16
   84104:	dfc00117 	ldw	ra,4(sp)
   84108:	dc000017 	ldw	r16,0(sp)
   8410c:	dec00204 	addi	sp,sp,8
   84110:	f800283a 	ret

00084114 <sbrk>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   84114:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   84118:	00bfff84 	movi	r2,-2
   8411c:	2884703a 	and	r2,r5,r2
   84120:	1001703a 	wrctl	status,r2
  char *prev_heap_end; 

  context = alt_irq_disable_all();

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   84124:	d0a00f17 	ldw	r2,-32708(gp)
   84128:	108000c4 	addi	r2,r2,3
   8412c:	00ffff04 	movi	r3,-4
   84130:	10c6703a 	and	r3,r2,r3
   84134:	d0e00f15 	stw	r3,-32708(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   84138:	1909883a 	add	r4,r3,r4
   8413c:	00800374 	movhi	r2,13
   84140:	10a4f804 	addi	r2,r2,-27680
   84144:	1100032e 	bgeu	r2,r4,84154 <sbrk+0x40>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   84148:	2801703a 	wrctl	status,r5
   8414c:	00ffffc4 	movi	r3,-1
   84150:	00000206 	br	8415c <sbrk+0x48>
    return (caddr_t)-1;
  }
#endif

  prev_heap_end = heap_end; 
  heap_end += incr; 
   84154:	d1200f15 	stw	r4,-32708(gp)
   84158:	2801703a 	wrctl	status,r5
#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
} 
   8415c:	1805883a 	mov	r2,r3
   84160:	f800283a 	ret

00084164 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   84164:	defffe04 	addi	sp,sp,-8
   84168:	dfc00115 	stw	ra,4(sp)
   8416c:	dc000015 	stw	r16,0(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   84170:	20002816 	blt	r4,zero,84214 <write+0xb0>
   84174:	20c00324 	muli	r3,r4,12
   84178:	00800234 	movhi	r2,8
   8417c:	109d1704 	addi	r2,r2,29788
   84180:	1889883a 	add	r4,r3,r2
  
  if (fd)
   84184:	20002326 	beq	r4,zero,84214 <write+0xb0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   84188:	20800217 	ldw	r2,8(r4)
   8418c:	108000cc 	andi	r2,r2,3
   84190:	10001326 	beq	r2,zero,841e0 <write+0x7c>
   84194:	20800017 	ldw	r2,0(r4)
   84198:	10800617 	ldw	r2,24(r2)
   8419c:	10001026 	beq	r2,zero,841e0 <write+0x7c>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   841a0:	103ee83a 	callr	r2
   841a4:	1021883a 	mov	r16,r2
   841a8:	1000260e 	bge	r2,zero,84244 <write+0xe0>
   841ac:	00800234 	movhi	r2,8
   841b0:	109f8004 	addi	r2,r2,32256
   841b4:	10800017 	ldw	r2,0(r2)
   841b8:	1000031e 	bne	r2,zero,841c8 <write+0x64>
   841bc:	00c00274 	movhi	r3,9
   841c0:	18ee3e04 	addi	r3,r3,-18184
   841c4:	00000206 	br	841d0 <write+0x6c>
   841c8:	103ee83a 	callr	r2
   841cc:	1007883a 	mov	r3,r2
      {
        ALT_ERRNO = -rval;
   841d0:	0405c83a 	sub	r2,zero,r16
   841d4:	18800015 	stw	r2,0(r3)
   841d8:	043fffc4 	movi	r16,-1
   841dc:	00001906 	br	84244 <write+0xe0>
   841e0:	00800234 	movhi	r2,8
   841e4:	109f8004 	addi	r2,r2,32256
   841e8:	10800017 	ldw	r2,0(r2)
   841ec:	1000031e 	bne	r2,zero,841fc <write+0x98>
   841f0:	00c00274 	movhi	r3,9
   841f4:	18ee3e04 	addi	r3,r3,-18184
   841f8:	00000206 	br	84204 <write+0xa0>
   841fc:	103ee83a 	callr	r2
   84200:	1007883a 	mov	r3,r2
      }
      return rval;
    }
    else
    {
      ALT_ERRNO = EACCES;
   84204:	00800344 	movi	r2,13
   84208:	18800015 	stw	r2,0(r3)
   8420c:	043fffc4 	movi	r16,-1
   84210:	00000c06 	br	84244 <write+0xe0>
   84214:	00800234 	movhi	r2,8
   84218:	109f8004 	addi	r2,r2,32256
   8421c:	10800017 	ldw	r2,0(r2)
   84220:	1000031e 	bne	r2,zero,84230 <write+0xcc>
   84224:	00c00274 	movhi	r3,9
   84228:	18ee3e04 	addi	r3,r3,-18184
   8422c:	00000206 	br	84238 <write+0xd4>
   84230:	103ee83a 	callr	r2
   84234:	1007883a 	mov	r3,r2
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   84238:	00801444 	movi	r2,81
   8423c:	18800015 	stw	r2,0(r3)
   84240:	043fffc4 	movi	r16,-1
  }
  return -1;
}
   84244:	8005883a 	mov	r2,r16
   84248:	dfc00117 	ldw	ra,4(sp)
   8424c:	dc000017 	ldw	r16,0(sp)
   84250:	dec00204 	addi	sp,sp,8
   84254:	f800283a 	ret
   84258:	000822f8 	rdprs	zero,zero,8331


tse_tutorial.elf:     file format elf32-littlenios2
tse_tutorial.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000801b4

Program Header:
    LOAD off    0x00001000 vaddr 0x00080000 paddr 0x00080000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00080020 paddr 0x00080020 align 2**12
         filesz 0x00005fec memsz 0x00005fec flags r-x
    LOAD off    0x0000700c vaddr 0x0008600c paddr 0x00087ebc align 2**12
         filesz 0x00001eb0 memsz 0x00001eb0 flags rw-
    LOAD off    0x00009d6c vaddr 0x00089d6c paddr 0x00089d6c align 2**12
         filesz 0x00000000 memsz 0x000006ec flags rw-
    LOAD off    0x00009000 vaddr 0x00100000 paddr 0x0008a458 align 2**12
         filesz 0x00000080 memsz 0x00000080 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00080000  00080000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000194  00080020  00080020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00005cf0  000801b4  000801b4  000011b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000168  00085ea4  00085ea4  00006ea4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001eb0  0008600c  00087ebc  0000700c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000006ec  00089d6c  00089d6c  00009d6c  2**2
                  ALLOC, SMALL_DATA
  6 .descriptor_memory 00000080  00100000  0008a458  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .comment      00000023  00000000  00000000  00009080  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000918  00000000  00000000  000090a8  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_pubnames 00001120  00000000  00000000  000099c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   0001a6d5  00000000  00000000  0000aae0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000050b6  00000000  00000000  000251b5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000c4ac  00000000  00000000  0002a26b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00001270  00000000  00000000  00036718  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000015c4  00000000  00000000  00037988  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    000034e6  00000000  00000000  00038f4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000020  00000000  00000000  0003c434  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 000001c0  00000000  00000000  0003c458  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  0003f010  2**0
                  CONTENTS, READONLY
 19 .cpu          00000005  00000000  00000000  0003f013  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  0003f018  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  0003f019  2**0
                  CONTENTS, READONLY
 22 .stderr_dev   00000009  00000000  00000000  0003f01a  2**0
                  CONTENTS, READONLY
 23 .stdin_dev    00000009  00000000  00000000  0003f023  2**0
                  CONTENTS, READONLY
 24 .stdout_dev   00000009  00000000  00000000  0003f02c  2**0
                  CONTENTS, READONLY
 25 .sopc_system_name 0000000b  00000000  00000000  0003f035  2**0
                  CONTENTS, READONLY
 26 .quartus_project_dir 0000000f  00000000  00000000  0003f040  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     0005f261  00000000  00000000  0003f04f  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00080000 l    d  .entry	00000000 .entry
00080020 l    d  .exceptions	00000000 .exceptions
000801b4 l    d  .text	00000000 .text
00085ea4 l    d  .rodata	00000000 .rodata
0008600c l    d  .rwdata	00000000 .rwdata
00089d6c l    d  .bss	00000000 .bss
00100000 l    d  .descriptor_memory	00000000 .descriptor_memory
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
000801ec l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 alt_load.c
0008058c l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
0008640c l     O .rwdata	00001060 jtag_uart
0008746c l     O .rwdata	00000030 sgdma_rx
0008749c l     O .rwdata	00000030 sgdma_tx
0008099c l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00080bdc l     F .text	00000228 altera_avalon_jtag_uart_irq
00080e04 l     F .text	000000b0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_sgdma.c
00081b50 l     F .text	00000060 alt_get_errno
000820f8 l     F .text	000000c0 alt_avalon_sgdma_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_close.c
000824b4 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
00082530 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00082610 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00082ac8 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00082c04 l     F .text	000000dc alt_file_locked
00082e68 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_remap_uncached.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_dcache_flush.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 impure.c
00087674 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00083b34 l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00083f18 l     F .text	00000058 std
00084024 l     F .text	00000008 __fp_lock
0008402c l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 alt_exit.c
000856a0 l     F .text	00000040 alt_sim_halt
00000000 l    df *ABS*	00000000 alt_fstat.c
000857d4 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
000858f4 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_lseek.c
00085a44 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
00085c04 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sbrk.c
00087eb8 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
00085e40 l     F .text	00000060 alt_get_errno
00085540 g     F .text	00000070 _isatty_r
000805f8 g     F .text	0000006c alt_main
00080468 g     F .text	000000a4 rx_ethernet_isr
0008a1c8 g     O .bss	00000100 alt_irq
000855b0 g     F .text	00000078 _lseek_r
00087ebc g       *ABS*	00000000 __flash_rwdata_start
0008a458 g       *ABS*	00000000 __alt_heap_start
000815bc g     F .text	00000124 alt_avalon_sgdma_do_sync_transfer
0008517c g     F .text	00000068 __sseek
00083f80 g     F .text	000000a4 __sinit
00083778 g     F .text	00000130 __swbuf_r
00084080 g     F .text	00000068 __sfmoreglue
00085ac4 g     F .text	00000020 __malloc_unlock
00081d10 g     F .text	000003e8 alt_avalon_sgdma_construct_descriptor_burst
00084070 g     F .text	00000010 _cleanup
00000000  w      *UND*	00000000 __errno
00080000 g     F .entry	0000001c __reset
00081824 g     F .text	00000070 alt_avalon_sgdma_construct_stream_to_mem_desc_burst
00080020 g       *ABS*	00000000 __flash_exceptions_start
000854cc g     F .text	00000074 _fstat_r
00089d90 g     O .bss	00000004 errno
00089d7c g     O .bss	00000004 alt_argv
0008fe7c g       *ABS*	00000000 _gp
000874f4 g     O .rwdata	00000180 alt_fd_list
00082738 g     F .text	00000094 alt_find_dev
00083478 g     F .text	000000a0 memcpy
00084064 g     F .text	0000000c _cleanup_r
00082b8c g     F .text	00000078 alt_io_redirect
00085ea4 g       *ABS*	00000000 __DTOR_END__
00081908 g     F .text	00000084 alt_avalon_sgdma_construct_mem_to_stream_desc_burst
0008101c g     F .text	00000224 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
00085834 g     F .text	000000c0 isatty
00083328 g     F .text	00000090 alt_icache_flush
00089d94 g     O .bss	00000004 __malloc_top_pad
00081a30 g     F .text	00000058 alt_avalon_sgdma_stop
00085104 g     F .text	00000070 _sbrk_r
00085628 g     F .text	00000078 _read_r
0008312c g     F .text	00000024 alt_dcache_flush
00087e94 g     O .rwdata	00000004 alt_max_fd
000853a8 g     F .text	00000110 _fclose_r
00083ee4 g     F .text	00000034 fflush
00089d98 g     O .bss	00000004 __malloc_max_sbrked_mem
00080000 g       *ABS*	00000000 __alt_mem_main_memory
00085954 g     F .text	000000f0 lseek
00087eac g     O .rwdata	00000004 _global_impure_ptr
0008a458 g       *ABS*	00000000 __bss_end
000829d0 g     F .text	000000f8 alt_iic_isr_register
00081480 g     F .text	0000013c alt_avalon_sgdma_do_async_transfer
00083000 g     F .text	0000010c alt_tick
00100060 g     O .descriptor_memory	00000020 rx_descriptor_end
0008404c g     F .text	00000018 __fp_lock_all
00082988 g     F .text	00000048 alt_ic_irq_enabled
00082f68 g     F .text	00000098 alt_alarm_stop
00100000 g       *ABS*	00000000 __alt_mem_descriptor_memory
00089d84 g     O .bss	00000004 alt_irq_active
0008600c g     O .rwdata	00000400 tx_frame
000800ec g     F .exceptions	000000c8 alt_irq_handler
000874cc g     O .rwdata	00000028 alt_dev_null
00081a88 g     F .text	00000070 alt_avalon_sgdma_check_descriptor_status
00082514 g     F .text	0000001c alt_dcache_flush_all
00100040 g     O .descriptor_memory	00000020 rx_descriptor
00087ebc g       *ABS*	00000000 __ram_rwdata_end
00087e8c g     O .rwdata	00000008 alt_dev_list
00085d20 g     F .text	00000120 write
00081c38 g     F .text	0000007c alt_avalon_sgdma_enable_desc_poll
0008361c g     F .text	000000e8 _putc_r
0008600c g       *ABS*	00000000 __ram_rodata_end
00085700 g     F .text	000000d4 fstat
00081894 g     F .text	00000074 alt_avalon_sgdma_construct_mem_to_stream_desc
0008198c g     F .text	00000050 alt_avalon_sgdma_register_callback
0008a458 g       *ABS*	00000000 end
00080b1c g     F .text	000000c0 altera_avalon_jtag_uart_init
00085ea0 g       *ABS*	00000000 __CTOR_LIST__
000c93e0 g       *ABS*	00000000 __alt_stack_pointer
00081cb4 g     F .text	0000005c alt_avalon_sgdma_disable_desc_poll
00081240 g     F .text	00000240 altera_avalon_jtag_uart_write
000816e0 g     F .text	00000070 alt_avalon_sgdma_construct_mem_to_mem_desc
00083f70 g     F .text	00000004 __sfp_lock_acquire
000817d0 g     F .text	00000054 alt_avalon_sgdma_construct_stream_to_mem_desc
00084304 g     F .text	00000314 _free_r
00080664 g     F .text	00000258 alt_printf
00083b38 g     F .text	000001b0 __call_exitprocs
00087eb4 g     O .rwdata	00000004 __malloc_sbrk_base
000801b4 g     F .text	0000003c _start
00089d88 g     O .bss	00000004 _alt_tick_rate
00089d6c g     O .bss	00000004 sgdma_tx_dev
00081af8 g     F .text	00000058 alt_avalon_sgdma_open
00089d8c g     O .bss	00000004 _alt_nticks
00089d70 g     O .bss	00000004 text_length
00085ae4 g     F .text	00000120 read
00080930 g     F .text	0000006c alt_sys_init
00083a00 g     F .text	00000134 __register_exitproc
00082f28 g     F .text	00000040 alt_remap_uncached
00080eb4 g     F .text	00000074 altera_avalon_jtag_uart_close
0008600c g       *ABS*	00000000 __ram_rwdata_start
00085ea4 g       *ABS*	00000000 __ram_rodata_start
0008a1a0 g     O .bss	00000028 __malloc_current_mallinfo
000809d4 g     F .text	00000058 altera_avalon_jtag_uart_read_fd
00083270 g     F .text	000000b8 alt_get_fd
00085338 g     F .text	00000070 _close_r
00083404 g     F .text	00000074 memcmp
00080a84 g     F .text	00000048 altera_avalon_jtag_uart_close_fd
0008a458 g       *ABS*	00000000 __alt_stack_base
00080acc g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
000838c4 g     F .text	0000013c __swsetup_r
000840e8 g     F .text	000000f0 __sfp
00087a74 g     O .rwdata	00000408 __malloc_av_
00083f7c g     F .text	00000004 __sinit_lock_release
00085260 g     F .text	00000060 __sread
00083150 g     F .text	00000120 alt_find_file
0008255c g     F .text	000000b4 alt_dev_llist_insert
00085aa4 g     F .text	00000020 __malloc_lock
00085c64 g     F .text	000000bc sbrk
000819dc g     F .text	00000054 alt_avalon_sgdma_start
00083ce8 g     F .text	000001fc _fflush_r
00089d6c g       *ABS*	00000000 __bss_start
0008506c g     F .text	00000098 memset
000801f0 g     F .text	00000278 main
00089d80 g     O .bss	00000004 alt_envp
00089d9c g     O .bss	00000004 __malloc_max_total_mem
00080a2c g     F .text	00000058 altera_avalon_jtag_uart_write_fd
000838a8 g     F .text	0000001c __swbuf
00087e7c g     O .rwdata	00000008 alt_sgdma_list
00085174 g     F .text	00000008 __sclose
000c93e0 g       *ABS*	00000000 __alt_heap_limit
000854b8 g     F .text	00000014 fclose
0008a2c8 g     O .bss	00000190 _atexit0
0008492c g     F .text	00000740 _malloc_r
00087e98 g     O .rwdata	00000004 alt_errno
00100000 g     O .descriptor_memory	00000020 tx_descriptor
00089da0 g     O .bss	00000400 rx_frame
000846e0 g     F .text	000000b8 _fwalk
00083518 g     F .text	00000104 putc
000841d8 g     F .text	0000012c _malloc_trim_r
00085ea4 g       *ABS*	00000000 __CTOR_END__
00085ea4 g       *ABS*	00000000 __flash_rodata_start
00085ea4 g       *ABS*	00000000 __DTOR_LIST__
000808fc g     F .text	00000034 alt_irq_init
00082ec8 g     F .text	00000060 alt_release_fd
000833b8 g     F .text	00000014 atexit
000852c0 g     F .text	00000078 _write_r
00087ea8 g     O .rwdata	00000004 _impure_ptr
00089d78 g     O .bss	00000004 alt_argc
000826d4 g     F .text	00000064 _do_dtors
00080020 g       .exceptions	00000000 alt_irq_entry
00084034 g     F .text	00000018 __fp_unlock_all
00087e84 g     O .rwdata	00000008 alt_fs_list
00080020 g       *ABS*	00000000 __ram_exceptions_start
000827fc g     F .text	00000050 alt_ic_isr_register
00087ebc g       *ABS*	00000000 _edata
0008a458 g       *ABS*	00000000 _end
000801b4 g       *ABS*	00000000 __ram_exceptions_end
00080f28 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
000828e8 g     F .text	000000a0 alt_ic_irq_disable
00100020 g     O .descriptor_memory	00000020 tx_descriptor_end
00081bb0 g     F .text	00000088 alt_avalon_sgdma_construct_descriptor
000851e4 g     F .text	0000007c __swrite
00087eb0 g     O .rwdata	00000004 __malloc_trim_threshold
0008310c g     F .text	00000020 altera_nios2_qsys_irq_init
000833cc g     F .text	00000038 exit
00084618 g     F .text	000000c8 _fwalk_reent
000c93e0 g       *ABS*	00000000 __alt_data_end
00080020 g     F .exceptions	00000000 alt_exception
00083f74 g     F .text	00000004 __sfp_lock_release
00089d74 g     O .bss	00000004 sgdma_rx_dev
000856e0 g     F .text	00000020 _exit
00082264 g     F .text	00000154 alt_alarm_start
00084798 g     F .text	00000194 __smakebuf_r
00083704 g     F .text	00000074 strlen
00082ce0 g     F .text	00000188 open
000808bc g     F .text	00000040 alt_putchar
000827cc g     F .text	00000030 alt_icache_flush_all
00087e9c g     O .rwdata	00000004 alt_priority_mask
0008284c g     F .text	0000009c alt_ic_irq_enable
00081750 g     F .text	00000080 alt_avalon_sgdma_construct_mem_to_mem_desc_burst
00087ea0 g     O .rwdata	00000008 alt_alarm_list
00082670 g     F .text	00000064 _do_ctors
000823b8 g     F .text	000000fc close
0008050c g     F .text	00000080 alt_load
000821b8 g     F .text	000000ac alt_avalon_sgdma_init
00000000  w      *UND*	00000000 free
00083f78 g     F .text	00000004 __sinit_lock_acquire



Disassembly of section .entry:

00080000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   80000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   80004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   80008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   8000c:	00bffd16 	blt	zero,r2,80004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   80010:	00400234 	movhi	at,8
    ori r1, r1, %lo(_start)
   80014:	08406d14 	ori	at,at,436
    jmp r1
   80018:	0800683a 	jmp	at
   8001c:	00000000 	call	0 <__reset-0x80000>

Disassembly of section .exceptions:

00080020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
   80020:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
   80024:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
   80028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   8002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   80030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   80034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   80038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   8003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   80040:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
   80044:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
   80048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   8004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   80050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   80054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   80058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   8005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   80060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   80064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   80068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   8006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   80070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   80074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   80078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   8007c:	10000326 	beq	r2,zero,8008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   80080:	20000226 	beq	r4,zero,8008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   80084:	00800ec0 	call	800ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   80088:	00000306 	br	80098 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
   8008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
   80090:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
   80094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   80098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   8009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   800a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   800a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   800a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   800ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   800b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   800b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   800b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   800bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   800c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
   800c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   800c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   800cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   800d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   800d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   800d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   800dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   800e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
   800e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   800e8:	ef80083a 	eret

000800ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   800ec:	defff904 	addi	sp,sp,-28
   800f0:	dfc00615 	stw	ra,24(sp)
   800f4:	df000515 	stw	fp,20(sp)
   800f8:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   800fc:	0005313a 	rdctl	r2,ipending
   80100:	e0bffc15 	stw	r2,-16(fp)

  return active;
   80104:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   80108:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
   8010c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   80110:	00800044 	movi	r2,1
   80114:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   80118:	e0ffff17 	ldw	r3,-4(fp)
   8011c:	e0bffe17 	ldw	r2,-8(fp)
   80120:	1884703a 	and	r2,r3,r2
   80124:	1005003a 	cmpeq	r2,r2,zero
   80128:	1000161e 	bne	r2,zero,80184 <alt_irq_handler+0x98>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   8012c:	e0bffd17 	ldw	r2,-12(fp)
   80130:	00c00274 	movhi	r3,9
   80134:	18e87204 	addi	r3,r3,-24120
   80138:	100490fa 	slli	r2,r2,3
   8013c:	10c5883a 	add	r2,r2,r3
   80140:	11400017 	ldw	r5,0(r2)
   80144:	e0bffd17 	ldw	r2,-12(fp)
   80148:	00c00274 	movhi	r3,9
   8014c:	18e87204 	addi	r3,r3,-24120
   80150:	100490fa 	slli	r2,r2,3
   80154:	10c5883a 	add	r2,r2,r3
   80158:	10800104 	addi	r2,r2,4
   8015c:	11000017 	ldw	r4,0(r2)
   80160:	283ee83a 	callr	r5
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   80164:	0005313a 	rdctl	r2,ipending
   80168:	e0bffb15 	stw	r2,-20(fp)

  return active;
   8016c:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
   80170:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
   80174:	e0bfff17 	ldw	r2,-4(fp)
   80178:	1004c03a 	cmpne	r2,r2,zero
   8017c:	103fe31e 	bne	r2,zero,8010c <alt_irq_handler+0x20>
   80180:	00000706 	br	801a0 <alt_irq_handler+0xb4>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
   80184:	e0bffe17 	ldw	r2,-8(fp)
   80188:	1085883a 	add	r2,r2,r2
   8018c:	e0bffe15 	stw	r2,-8(fp)
      i++;
   80190:	e0bffd17 	ldw	r2,-12(fp)
   80194:	10800044 	addi	r2,r2,1
   80198:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   8019c:	003fde06 	br	80118 <alt_irq_handler+0x2c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
   801a0:	e037883a 	mov	sp,fp
   801a4:	dfc00117 	ldw	ra,4(sp)
   801a8:	df000017 	ldw	fp,0(sp)
   801ac:	dec00204 	addi	sp,sp,8
   801b0:	f800283a 	ret

Disassembly of section .text:

000801b4 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   801b4:	06c00334 	movhi	sp,12
    ori sp, sp, %lo(__alt_stack_pointer)
   801b8:	dee4f814 	ori	sp,sp,37856

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
   801bc:	06800234 	movhi	gp,8
    ori gp, gp, %lo(_gp)
   801c0:	d6bf9f14 	ori	gp,gp,65148
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   801c4:	00800234 	movhi	r2,8
    ori r2, r2, %lo(__bss_start)
   801c8:	10a75b14 	ori	r2,r2,40300

    movhi r3, %hi(__bss_end)
   801cc:	00c00234 	movhi	r3,8
    ori r3, r3, %lo(__bss_end)
   801d0:	18e91614 	ori	r3,r3,42072

    beq r2, r3, 1f
   801d4:	10c00326 	beq	r2,r3,801e4 <_start+0x30>

0:
    stw zero, (r2)
   801d8:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   801dc:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   801e0:	10fffd36 	bltu	r2,r3,801d8 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   801e4:	008050c0 	call	8050c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   801e8:	00805f80 	call	805f8 <alt_main>

000801ec <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   801ec:	003fff06 	br	801ec <alt_after_alt_main>

000801f0 <main>:
 *  1. Records input text and transmits the text via Ethernet after Enter is
 *     pressed
 *  2. Displays text received via Ethernet frame on the JTAG UART
********************************************************************************/
int main(void)
{
   801f0:	defff804 	addi	sp,sp,-32
   801f4:	dfc00715 	stw	ra,28(sp)
   801f8:	df000615 	stw	fp,24(sp)
   801fc:	df000604 	addi	fp,sp,24
	// Open the sgdma transmit device
	sgdma_tx_dev = alt_avalon_sgdma_open ("/dev/sgdma_tx");
   80200:	01000234 	movhi	r4,8
   80204:	2117a904 	addi	r4,r4,24228
   80208:	0081af80 	call	81af8 <alt_avalon_sgdma_open>
   8020c:	d0a7bc15 	stw	r2,-24848(gp)
	if (sgdma_tx_dev == NULL) {
   80210:	d0a7bc17 	ldw	r2,-24848(gp)
   80214:	1004c03a 	cmpne	r2,r2,zero
   80218:	1000061e 	bne	r2,zero,80234 <main+0x44>
		alt_printf ("Error: could not open scatter-gather dma transmit device\n");
   8021c:	01000234 	movhi	r4,8
   80220:	2117ad04 	addi	r4,r4,24244
   80224:	00806640 	call	80664 <alt_printf>
		return -1;
   80228:	00bfffc4 	movi	r2,-1
   8022c:	e0bfff15 	stw	r2,-4(fp)
   80230:	00008706 	br	80450 <main+0x260>
	} else alt_printf ("Opened scatter-gather dma transmit device\n");
   80234:	01000234 	movhi	r4,8
   80238:	2117bc04 	addi	r4,r4,24304
   8023c:	00806640 	call	80664 <alt_printf>

	// Open the sgdma receive device
	sgdma_rx_dev = alt_avalon_sgdma_open ("/dev/sgdma_rx");
   80240:	01000234 	movhi	r4,8
   80244:	2117c704 	addi	r4,r4,24348
   80248:	0081af80 	call	81af8 <alt_avalon_sgdma_open>
   8024c:	d0a7be15 	stw	r2,-24840(gp)
	if (sgdma_rx_dev == NULL) {
   80250:	d0a7be17 	ldw	r2,-24840(gp)
   80254:	1004c03a 	cmpne	r2,r2,zero
   80258:	1000061e 	bne	r2,zero,80274 <main+0x84>
		alt_printf ("Error: could not open scatter-gather dma receive device\n");
   8025c:	01000234 	movhi	r4,8
   80260:	2117cb04 	addi	r4,r4,24364
   80264:	00806640 	call	80664 <alt_printf>
		return -1;
   80268:	00bfffc4 	movi	r2,-1
   8026c:	e0bfff15 	stw	r2,-4(fp)
   80270:	00007706 	br	80450 <main+0x260>
	} else alt_printf ("Opened scatter-gather dma receive device\n");
   80274:	01000234 	movhi	r4,8
   80278:	2117da04 	addi	r4,r4,24424
   8027c:	00806640 	call	80664 <alt_printf>

	// Set interrupts for the sgdma receive device
	alt_avalon_sgdma_register_callback( sgdma_rx_dev, (alt_avalon_sgdma_callback) rx_ethernet_isr, 0x00000014, NULL );
   80280:	d127be17 	ldw	r4,-24840(gp)
   80284:	01400234 	movhi	r5,8
   80288:	29411a04 	addi	r5,r5,1128
   8028c:	01800504 	movi	r6,20
   80290:	000f883a 	mov	r7,zero
   80294:	008198c0 	call	8198c <alt_avalon_sgdma_register_callback>

	// Create sgdma receive descriptor
	alt_avalon_sgdma_construct_stream_to_mem_desc( &rx_descriptor, &rx_descriptor_end, rx_frame, 0, 0 );
   80298:	01800274 	movhi	r6,9
   8029c:	31a76804 	addi	r6,r6,-25184
   802a0:	d8000015 	stw	zero,0(sp)
   802a4:	01000434 	movhi	r4,16
   802a8:	21001004 	addi	r4,r4,64
   802ac:	01400434 	movhi	r5,16
   802b0:	29401804 	addi	r5,r5,96
   802b4:	000f883a 	mov	r7,zero
   802b8:	00817d00 	call	817d0 <alt_avalon_sgdma_construct_stream_to_mem_desc>

	// Set up non-blocking transfer of sgdma receive descriptor
	alt_avalon_sgdma_do_async_transfer( sgdma_rx_dev, &rx_descriptor );
   802bc:	d127be17 	ldw	r4,-24840(gp)
   802c0:	01400434 	movhi	r5,16
   802c4:	29401004 	addi	r5,r5,64
   802c8:	00814800 	call	81480 <alt_avalon_sgdma_do_async_transfer>

	// Triple-speed Ethernet MegaCore base address
	volatile int * tse = (int *) 0x00102000;
   802cc:	00800434 	movhi	r2,16
   802d0:	10880004 	addi	r2,r2,8192
   802d4:	e0bffe15 	stw	r2,-8(fp)

    // Definicion del PIOSAMPLER base address
    volatile int * piosampler = (int *) PIOSAMPLER_BASE;
   802d8:	00800474 	movhi	r2,17
   802dc:	e0bffd15 	stw	r2,-12(fp)
    int control;

	// Initialize the MAC address
	*(tse + 3) = 0x116E6001;
   802e0:	e0bffe17 	ldw	r2,-8(fp)
   802e4:	10c00304 	addi	r3,r2,12
   802e8:	00845bb4 	movhi	r2,4462
   802ec:	10980044 	addi	r2,r2,24577
   802f0:	18800015 	stw	r2,0(r3)
	*(tse + 4) = 0x00000F02;
   802f4:	e0bffe17 	ldw	r2,-8(fp)
   802f8:	10c00404 	addi	r3,r2,16
   802fc:	0083c084 	movi	r2,3842
   80300:	18800015 	stw	r2,0(r3)

	// Specify the addresses of the PHY devices to be accessed through MDIO interface
	*(tse + 0x0F) = 0x10;
   80304:	e0bffe17 	ldw	r2,-8(fp)
   80308:	10c00f04 	addi	r3,r2,60
   8030c:	00800404 	movi	r2,16
   80310:	18800015 	stw	r2,0(r3)
	*(tse + 0x10) = 0x11;
   80314:	e0bffe17 	ldw	r2,-8(fp)
   80318:	10c01004 	addi	r3,r2,64
   8031c:	00800444 	movi	r2,17
   80320:	18800015 	stw	r2,0(r3)

	// Write to register 20 of the PHY chip for Ethernet port 0 to set up line loopback
	*(tse + 0x94) = 0x4000;
   80324:	e0bffe17 	ldw	r2,-8(fp)
   80328:	10c09404 	addi	r3,r2,592
   8032c:	00900004 	movi	r2,16384
   80330:	18800015 	stw	r2,0(r3)

	// Write to register 16 of the PHY chip for Ethernet port 1 to enable automatic crossover for all modes
	*(tse + 0xB0) = *(tse + 0xB0) | 0x0060;
   80334:	e0bffe17 	ldw	r2,-8(fp)
   80338:	10c0b004 	addi	r3,r2,704
   8033c:	e0bffe17 	ldw	r2,-8(fp)
   80340:	1080b004 	addi	r2,r2,704
   80344:	10800017 	ldw	r2,0(r2)
   80348:	10801814 	ori	r2,r2,96
   8034c:	18800015 	stw	r2,0(r3)

	// Write to register 20 of the PHY chip for Ethernet port 2 to set up delay for input/output clk
	*(tse + 0xB4) = *(tse + 0xB4) | 0x0082;
   80350:	e0bffe17 	ldw	r2,-8(fp)
   80354:	10c0b404 	addi	r3,r2,720
   80358:	e0bffe17 	ldw	r2,-8(fp)
   8035c:	1080b404 	addi	r2,r2,720
   80360:	10800017 	ldw	r2,0(r2)
   80364:	10802094 	ori	r2,r2,130
   80368:	18800015 	stw	r2,0(r3)

	// Software reset the second PHY chip and wait
	*(tse + 0xA0) = *(tse + 0xA0) | 0x8000;
   8036c:	e0bffe17 	ldw	r2,-8(fp)
   80370:	10c0a004 	addi	r3,r2,640
   80374:	e0bffe17 	ldw	r2,-8(fp)
   80378:	1080a004 	addi	r2,r2,640
   8037c:	10800017 	ldw	r2,0(r2)
   80380:	10a00014 	ori	r2,r2,32768
   80384:	18800015 	stw	r2,0(r3)
	while ( *(tse + 0xA0) & 0x8000  )
   80388:	e0bffe17 	ldw	r2,-8(fp)
   8038c:	1080a004 	addi	r2,r2,640
   80390:	10800017 	ldw	r2,0(r2)
   80394:	10a0000c 	andi	r2,r2,32768
   80398:	1004c03a 	cmpne	r2,r2,zero
   8039c:	103ffa1e 	bne	r2,zero,80388 <main+0x198>

	// Enable read and write transfers, gigabit Ethernet operation, and CRC forwarding
    // Poner 0x0000004B para giga bit
    // Poner 0x00000043 para 10/100
    // Bit 4 en 1 es promiscuo mode
	*(tse + 2) = *(tse + 2) | 0x0000004B;
   803a0:	e0bffe17 	ldw	r2,-8(fp)
   803a4:	10c00204 	addi	r3,r2,8
   803a8:	e0bffe17 	ldw	r2,-8(fp)
   803ac:	10800204 	addi	r2,r2,8
   803b0:	10800017 	ldw	r2,0(r2)
   803b4:	108012d4 	ori	r2,r2,75
   803b8:	18800015 	stw	r2,0(r3)

	alt_printf( "send> " );
   803bc:	01000234 	movhi	r4,8
   803c0:	2117e504 	addi	r4,r4,24468
   803c4:	00806640 	call	80664 <alt_printf>
	text_length = 0;
   803c8:	d027bd15 	stw	zero,-24844(gp)


    // BYTES_TO_TRANSFER_REG
    *(piosampler + 1) = 4096;
   803cc:	e0bffd17 	ldw	r2,-12(fp)
   803d0:	10c00104 	addi	r3,r2,4
   803d4:	00840004 	movi	r2,4096
   803d8:	18800015 	stw	r2,0(r3)

    // ADDRESS_TO_WRITE
    *(piosampler + 2) = tx_frame;
   803dc:	e0bffd17 	ldw	r2,-12(fp)
   803e0:	10c00204 	addi	r3,r2,8
   803e4:	00800234 	movhi	r2,8
   803e8:	10980304 	addi	r2,r2,24588
   803ec:	18800015 	stw	r2,0(r3)

    // CONTROL_STATUS_REG
    *(piosampler) = 1;
   803f0:	e0fffd17 	ldw	r3,-12(fp)
   803f4:	00800044 	movi	r2,1
   803f8:	18800015 	stw	r2,0(r3)
    control = piosampler[0];
   803fc:	e0bffd17 	ldw	r2,-12(fp)
   80400:	10800017 	ldw	r2,0(r2)
   80404:	e0bffc15 	stw	r2,-16(fp)
    alt_printf( "control > %d\n", control );
   80408:	01000234 	movhi	r4,8
   8040c:	2117e704 	addi	r4,r4,24476
   80410:	e17ffc17 	ldw	r5,-16(fp)
   80414:	00806640 	call	80664 <alt_printf>

    while (1) {
        *(piosampler) = 1;
   80418:	e0fffd17 	ldw	r3,-12(fp)
   8041c:	00800044 	movi	r2,1
   80420:	18800015 	stw	r2,0(r3)
        control = piosampler[0];
   80424:	e0bffd17 	ldw	r2,-12(fp)
   80428:	10800017 	ldw	r2,0(r2)
   8042c:	e0bffc15 	stw	r2,-16(fp)
        alt_printf( "(%d, %d)", control, piosampler[1] );
   80430:	e0bffd17 	ldw	r2,-12(fp)
   80434:	10800104 	addi	r2,r2,4
   80438:	11800017 	ldw	r6,0(r2)
   8043c:	01000234 	movhi	r4,8
   80440:	2117eb04 	addi	r4,r4,24492
   80444:	e17ffc17 	ldw	r5,-16(fp)
   80448:	00806640 	call	80664 <alt_printf>
    }
   8044c:	003ff206 	br	80418 <main+0x228>
   80450:	e0bfff17 	ldw	r2,-4(fp)
		while (alt_avalon_sgdma_check_descriptor_status(&tx_descriptor) != 0)
			;
	}

	return 0;
}
   80454:	e037883a 	mov	sp,fp
   80458:	dfc00117 	ldw	ra,4(sp)
   8045c:	df000017 	ldw	fp,0(sp)
   80460:	dec00204 	addi	sp,sp,8
   80464:	f800283a 	ret

00080468 <rx_ethernet_isr>:

/****************************************************************************************
 * Subroutine to read incoming Ethernet frames
****************************************************************************************/
void rx_ethernet_isr (void *context)
{
   80468:	defffb04 	addi	sp,sp,-20
   8046c:	dfc00415 	stw	ra,16(sp)
   80470:	df000315 	stw	fp,12(sp)
   80474:	df000304 	addi	fp,sp,12
   80478:	e13fff15 	stw	r4,-4(fp)
	int i;

	// Wait until receive descriptor transfer is complete
	while (alt_avalon_sgdma_check_descriptor_status(&rx_descriptor) != 0)
   8047c:	01000434 	movhi	r4,16
   80480:	21001004 	addi	r4,r4,64
   80484:	0081a880 	call	81a88 <alt_avalon_sgdma_check_descriptor_status>
   80488:	1004c03a 	cmpne	r2,r2,zero
   8048c:	103ffb1e 	bne	r2,zero,8047c <rx_ethernet_isr+0x14>
		;

	// Clear input line before writing
	for (i = 0; i < (6 + text_length); i++) {
   80490:	e03ffe15 	stw	zero,-8(fp)
   80494:	00000706 	br	804b4 <rx_ethernet_isr+0x4c>
		alt_printf( "%c", 0x08 );		 // 0x08 --> backspace
   80498:	01000234 	movhi	r4,8
   8049c:	2117ee04 	addi	r4,r4,24504
   804a0:	01400204 	movi	r5,8
   804a4:	00806640 	call	80664 <alt_printf>
	// Wait until receive descriptor transfer is complete
	while (alt_avalon_sgdma_check_descriptor_status(&rx_descriptor) != 0)
		;

	// Clear input line before writing
	for (i = 0; i < (6 + text_length); i++) {
   804a8:	e0bffe17 	ldw	r2,-8(fp)
   804ac:	10800044 	addi	r2,r2,1
   804b0:	e0bffe15 	stw	r2,-8(fp)
   804b4:	e0bffe17 	ldw	r2,-8(fp)
   804b8:	d0e7bd17 	ldw	r3,-24844(gp)
   804bc:	18c00184 	addi	r3,r3,6
   804c0:	10fff536 	bltu	r2,r3,80498 <rx_ethernet_isr+0x30>

	// Reprint current input line after the output
	// alt_printf( "send> %s", tx_frame + 16 );

	// Create new receive sgdma descriptor
	alt_avalon_sgdma_construct_stream_to_mem_desc( &rx_descriptor, &rx_descriptor_end, rx_frame, 0, 0 );
   804c4:	01800274 	movhi	r6,9
   804c8:	31a76804 	addi	r6,r6,-25184
   804cc:	d8000015 	stw	zero,0(sp)
   804d0:	01000434 	movhi	r4,16
   804d4:	21001004 	addi	r4,r4,64
   804d8:	01400434 	movhi	r5,16
   804dc:	29401804 	addi	r5,r5,96
   804e0:	000f883a 	mov	r7,zero
   804e4:	00817d00 	call	817d0 <alt_avalon_sgdma_construct_stream_to_mem_desc>

	// Set up non-blocking transfer of sgdma receive descriptor
	alt_avalon_sgdma_do_async_transfer( sgdma_rx_dev, &rx_descriptor );
   804e8:	d127be17 	ldw	r4,-24840(gp)
   804ec:	01400434 	movhi	r5,16
   804f0:	29401004 	addi	r5,r5,64
   804f4:	00814800 	call	81480 <alt_avalon_sgdma_do_async_transfer>
}
   804f8:	e037883a 	mov	sp,fp
   804fc:	dfc00117 	ldw	ra,4(sp)
   80500:	df000017 	ldw	fp,0(sp)
   80504:	dec00204 	addi	sp,sp,8
   80508:	f800283a 	ret

0008050c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   8050c:	defffe04 	addi	sp,sp,-8
   80510:	dfc00115 	stw	ra,4(sp)
   80514:	df000015 	stw	fp,0(sp)
   80518:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   8051c:	01000234 	movhi	r4,8
   80520:	211faf04 	addi	r4,r4,32444
   80524:	01400234 	movhi	r5,8
   80528:	29580304 	addi	r5,r5,24588
   8052c:	01800234 	movhi	r6,8
   80530:	319faf04 	addi	r6,r6,32444
   80534:	008058c0 	call	8058c <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   80538:	01000234 	movhi	r4,8
   8053c:	21000804 	addi	r4,r4,32
   80540:	01400234 	movhi	r5,8
   80544:	29400804 	addi	r5,r5,32
   80548:	01800234 	movhi	r6,8
   8054c:	31806d04 	addi	r6,r6,436
   80550:	008058c0 	call	8058c <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   80554:	01000234 	movhi	r4,8
   80558:	2117a904 	addi	r4,r4,24228
   8055c:	01400234 	movhi	r5,8
   80560:	2957a904 	addi	r5,r5,24228
   80564:	01800234 	movhi	r6,8
   80568:	31980304 	addi	r6,r6,24588
   8056c:	008058c0 	call	8058c <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   80570:	00825140 	call	82514 <alt_dcache_flush_all>
  alt_icache_flush_all();
   80574:	00827cc0 	call	827cc <alt_icache_flush_all>
}
   80578:	e037883a 	mov	sp,fp
   8057c:	dfc00117 	ldw	ra,4(sp)
   80580:	df000017 	ldw	fp,0(sp)
   80584:	dec00204 	addi	sp,sp,8
   80588:	f800283a 	ret

0008058c <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   8058c:	defffc04 	addi	sp,sp,-16
   80590:	df000315 	stw	fp,12(sp)
   80594:	df000304 	addi	fp,sp,12
   80598:	e13ffd15 	stw	r4,-12(fp)
   8059c:	e17ffe15 	stw	r5,-8(fp)
   805a0:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   805a4:	e0fffe17 	ldw	r3,-8(fp)
   805a8:	e0bffd17 	ldw	r2,-12(fp)
   805ac:	18800e26 	beq	r3,r2,805e8 <alt_load_section+0x5c>
  {
    while( to != end )
   805b0:	00000a06 	br	805dc <alt_load_section+0x50>
    {
      *to++ = *from++;
   805b4:	e0bffd17 	ldw	r2,-12(fp)
   805b8:	10c00017 	ldw	r3,0(r2)
   805bc:	e0bffe17 	ldw	r2,-8(fp)
   805c0:	10c00015 	stw	r3,0(r2)
   805c4:	e0bffe17 	ldw	r2,-8(fp)
   805c8:	10800104 	addi	r2,r2,4
   805cc:	e0bffe15 	stw	r2,-8(fp)
   805d0:	e0bffd17 	ldw	r2,-12(fp)
   805d4:	10800104 	addi	r2,r2,4
   805d8:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   805dc:	e0fffe17 	ldw	r3,-8(fp)
   805e0:	e0bfff17 	ldw	r2,-4(fp)
   805e4:	18bff31e 	bne	r3,r2,805b4 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
   805e8:	e037883a 	mov	sp,fp
   805ec:	df000017 	ldw	fp,0(sp)
   805f0:	dec00104 	addi	sp,sp,4
   805f4:	f800283a 	ret

000805f8 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   805f8:	defffd04 	addi	sp,sp,-12
   805fc:	dfc00215 	stw	ra,8(sp)
   80600:	df000115 	stw	fp,4(sp)
   80604:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   80608:	0009883a 	mov	r4,zero
   8060c:	00808fc0 	call	808fc <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   80610:	00809300 	call	80930 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   80614:	01000234 	movhi	r4,8
   80618:	2117ef04 	addi	r4,r4,24508
   8061c:	01400234 	movhi	r5,8
   80620:	2957ef04 	addi	r5,r5,24508
   80624:	01800234 	movhi	r6,8
   80628:	3197ef04 	addi	r6,r6,24508
   8062c:	0082b8c0 	call	82b8c <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   80630:	00826700 	call	82670 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   80634:	01000234 	movhi	r4,8
   80638:	2109b504 	addi	r4,r4,9940
   8063c:	00833b80 	call	833b8 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   80640:	d127bf17 	ldw	r4,-24836(gp)
   80644:	d167c017 	ldw	r5,-24832(gp)
   80648:	d1a7c117 	ldw	r6,-24828(gp)
   8064c:	00801f00 	call	801f0 <main>
   80650:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   80654:	01000044 	movi	r4,1
   80658:	00823b80 	call	823b8 <close>
  exit (result);
   8065c:	e13fff17 	ldw	r4,-4(fp)
   80660:	00833cc0 	call	833cc <exit>

00080664 <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
   80664:	defff204 	addi	sp,sp,-56
   80668:	dfc00a15 	stw	ra,40(sp)
   8066c:	df000915 	stw	fp,36(sp)
   80670:	df000904 	addi	fp,sp,36
   80674:	e1400215 	stw	r5,8(fp)
   80678:	e1800315 	stw	r6,12(fp)
   8067c:	e1c00415 	stw	r7,16(fp)
   80680:	e13fff15 	stw	r4,-4(fp)
	va_list args;
	va_start(args, fmt);
   80684:	e0800204 	addi	r2,fp,8
   80688:	e0bffe15 	stw	r2,-8(fp)
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
   8068c:	e0bfff17 	ldw	r2,-4(fp)
   80690:	e0bffd15 	stw	r2,-12(fp)
    while ((c = *w++) != 0)
   80694:	00007806 	br	80878 <alt_printf+0x214>
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
   80698:	e0bffc07 	ldb	r2,-16(fp)
   8069c:	10800960 	cmpeqi	r2,r2,37
   806a0:	1000031e 	bne	r2,zero,806b0 <alt_printf+0x4c>
        {
            alt_putchar(c);
   806a4:	e13ffc07 	ldb	r4,-16(fp)
   806a8:	00808bc0 	call	808bc <alt_putchar>
   806ac:	00007206 	br	80878 <alt_printf+0x214>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
   806b0:	e0bffd17 	ldw	r2,-12(fp)
   806b4:	10800003 	ldbu	r2,0(r2)
   806b8:	e0bffc05 	stb	r2,-16(fp)
   806bc:	e0bffc07 	ldb	r2,-16(fp)
   806c0:	1004c03a 	cmpne	r2,r2,zero
   806c4:	1007883a 	mov	r3,r2
   806c8:	e0bffd17 	ldw	r2,-12(fp)
   806cc:	10800044 	addi	r2,r2,1
   806d0:	e0bffd15 	stw	r2,-12(fp)
   806d4:	18803fcc 	andi	r2,r3,255
   806d8:	1005003a 	cmpeq	r2,r2,zero
   806dc:	1000721e 	bne	r2,zero,808a8 <alt_printf+0x244>
            {
                if (c == '%')
   806e0:	e0bffc07 	ldb	r2,-16(fp)
   806e4:	10800958 	cmpnei	r2,r2,37
   806e8:	1000031e 	bne	r2,zero,806f8 <alt_printf+0x94>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
   806ec:	e13ffc07 	ldb	r4,-16(fp)
   806f0:	00808bc0 	call	808bc <alt_putchar>
   806f4:	00006006 	br	80878 <alt_printf+0x214>
                } 
                else if (c == 'c')
   806f8:	e0bffc07 	ldb	r2,-16(fp)
   806fc:	108018d8 	cmpnei	r2,r2,99
   80700:	1000091e 	bne	r2,zero,80728 <alt_printf+0xc4>
                {
                    int v = va_arg(args, int);
   80704:	e0fffe17 	ldw	r3,-8(fp)
   80708:	18800104 	addi	r2,r3,4
   8070c:	e0bffe15 	stw	r2,-8(fp)
   80710:	1805883a 	mov	r2,r3
   80714:	10800017 	ldw	r2,0(r2)
   80718:	e0bffb15 	stw	r2,-20(fp)
                    alt_putchar(v);
   8071c:	e13ffb17 	ldw	r4,-20(fp)
   80720:	00808bc0 	call	808bc <alt_putchar>
   80724:	00005406 	br	80878 <alt_printf+0x214>
                }
                else if (c == 'x')
   80728:	e0bffc07 	ldb	r2,-16(fp)
   8072c:	10801e18 	cmpnei	r2,r2,120
   80730:	1000371e 	bne	r2,zero,80810 <alt_printf+0x1ac>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
   80734:	e0fffe17 	ldw	r3,-8(fp)
   80738:	18800104 	addi	r2,r3,4
   8073c:	e0bffe15 	stw	r2,-8(fp)
   80740:	1805883a 	mov	r2,r3
   80744:	10800017 	ldw	r2,0(r2)
   80748:	e0bffa15 	stw	r2,-24(fp)
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
   8074c:	e0bffa17 	ldw	r2,-24(fp)
   80750:	1004c03a 	cmpne	r2,r2,zero
   80754:	1000031e 	bne	r2,zero,80764 <alt_printf+0x100>
                    {
                        alt_putchar('0');
   80758:	01000c04 	movi	r4,48
   8075c:	00808bc0 	call	808bc <alt_putchar>
                        continue;
   80760:	00004506 	br	80878 <alt_printf+0x214>
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
   80764:	00800704 	movi	r2,28
   80768:	e0bff815 	stw	r2,-32(fp)
                    while (!(v & (0xF << digit_shift)))
   8076c:	00000306 	br	8077c <alt_printf+0x118>
                        digit_shift -= 4;
   80770:	e0bff817 	ldw	r2,-32(fp)
   80774:	10bfff04 	addi	r2,r2,-4
   80778:	e0bff815 	stw	r2,-32(fp)
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
   8077c:	00c003c4 	movi	r3,15
   80780:	e0bff817 	ldw	r2,-32(fp)
   80784:	1884983a 	sll	r2,r3,r2
   80788:	1007883a 	mov	r3,r2
   8078c:	e0bffa17 	ldw	r2,-24(fp)
   80790:	1884703a 	and	r2,r3,r2
   80794:	1005003a 	cmpeq	r2,r2,zero
   80798:	103ff51e 	bne	r2,zero,80770 <alt_printf+0x10c>
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
   8079c:	00001806 	br	80800 <alt_printf+0x19c>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
   807a0:	00c003c4 	movi	r3,15
   807a4:	e0bff817 	ldw	r2,-32(fp)
   807a8:	1884983a 	sll	r2,r3,r2
   807ac:	1007883a 	mov	r3,r2
   807b0:	e0bffa17 	ldw	r2,-24(fp)
   807b4:	1886703a 	and	r3,r3,r2
   807b8:	e0bff817 	ldw	r2,-32(fp)
   807bc:	1884d83a 	srl	r2,r3,r2
   807c0:	e0bff915 	stw	r2,-28(fp)
                        if (digit <= 9)
   807c4:	e0bff917 	ldw	r2,-28(fp)
   807c8:	108002a8 	cmpgeui	r2,r2,10
   807cc:	1000041e 	bne	r2,zero,807e0 <alt_printf+0x17c>
                            c = '0' + digit;
   807d0:	e0bff917 	ldw	r2,-28(fp)
   807d4:	10800c04 	addi	r2,r2,48
   807d8:	e0bffc05 	stb	r2,-16(fp)
   807dc:	00000306 	br	807ec <alt_printf+0x188>
                        else
                            c = 'a' + digit - 10;
   807e0:	e0bff917 	ldw	r2,-28(fp)
   807e4:	108015c4 	addi	r2,r2,87
   807e8:	e0bffc05 	stb	r2,-16(fp)
                        alt_putchar(c);
   807ec:	e13ffc07 	ldb	r4,-16(fp)
   807f0:	00808bc0 	call	808bc <alt_putchar>
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
   807f4:	e0bff817 	ldw	r2,-32(fp)
   807f8:	10bfff04 	addi	r2,r2,-4
   807fc:	e0bff815 	stw	r2,-32(fp)
   80800:	e0bff817 	ldw	r2,-32(fp)
   80804:	1004403a 	cmpge	r2,r2,zero
   80808:	103fe51e 	bne	r2,zero,807a0 <alt_printf+0x13c>
   8080c:	00001a06 	br	80878 <alt_printf+0x214>
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
   80810:	e0bffc07 	ldb	r2,-16(fp)
   80814:	10801cd8 	cmpnei	r2,r2,115
   80818:	1000171e 	bne	r2,zero,80878 <alt_printf+0x214>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
   8081c:	e0fffe17 	ldw	r3,-8(fp)
   80820:	18800104 	addi	r2,r3,4
   80824:	e0bffe15 	stw	r2,-8(fp)
   80828:	1805883a 	mov	r2,r3
   8082c:	10800017 	ldw	r2,0(r2)
   80830:	e0bff715 	stw	r2,-36(fp)

                    while(*s)
   80834:	00000906 	br	8085c <alt_printf+0x1f8>
                      alt_putchar(*s++);
   80838:	e0bff717 	ldw	r2,-36(fp)
   8083c:	10800003 	ldbu	r2,0(r2)
   80840:	11003fcc 	andi	r4,r2,255
   80844:	2100201c 	xori	r4,r4,128
   80848:	213fe004 	addi	r4,r4,-128
   8084c:	e0bff717 	ldw	r2,-36(fp)
   80850:	10800044 	addi	r2,r2,1
   80854:	e0bff715 	stw	r2,-36(fp)
   80858:	00808bc0 	call	808bc <alt_putchar>
                else if (c == 's')
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);

                    while(*s)
   8085c:	e0bff717 	ldw	r2,-36(fp)
   80860:	10800003 	ldbu	r2,0(r2)
   80864:	10803fcc 	andi	r2,r2,255
   80868:	1080201c 	xori	r2,r2,128
   8086c:	10bfe004 	addi	r2,r2,-128
   80870:	1004c03a 	cmpne	r2,r2,zero
   80874:	103ff01e 	bne	r2,zero,80838 <alt_printf+0x1d4>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
   80878:	e0bffd17 	ldw	r2,-12(fp)
   8087c:	10800003 	ldbu	r2,0(r2)
   80880:	e0bffc05 	stb	r2,-16(fp)
   80884:	e0bffc07 	ldb	r2,-16(fp)
   80888:	1004c03a 	cmpne	r2,r2,zero
   8088c:	1007883a 	mov	r3,r2
   80890:	e0bffd17 	ldw	r2,-12(fp)
   80894:	10800044 	addi	r2,r2,1
   80898:	e0bffd15 	stw	r2,-12(fp)
   8089c:	18803fcc 	andi	r2,r3,255
   808a0:	1004c03a 	cmpne	r2,r2,zero
   808a4:	103f7c1e 	bne	r2,zero,80698 <alt_printf+0x34>
            {
                break;
            }
        }
    }
}
   808a8:	e037883a 	mov	sp,fp
   808ac:	dfc00117 	ldw	ra,4(sp)
   808b0:	df000017 	ldw	fp,0(sp)
   808b4:	dec00504 	addi	sp,sp,20
   808b8:	f800283a 	ret

000808bc <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
   808bc:	defffd04 	addi	sp,sp,-12
   808c0:	dfc00215 	stw	ra,8(sp)
   808c4:	df000115 	stw	fp,4(sp)
   808c8:	df000104 	addi	fp,sp,4
   808cc:	e13fff15 	stw	r4,-4(fp)
    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
        return -1;
    }
    return c;
#else
    return putchar(c);
   808d0:	00800234 	movhi	r2,8
   808d4:	109faa04 	addi	r2,r2,32424
   808d8:	10800017 	ldw	r2,0(r2)
   808dc:	11400217 	ldw	r5,8(r2)
   808e0:	e13fff17 	ldw	r4,-4(fp)
   808e4:	00835180 	call	83518 <putc>
#endif
}
   808e8:	e037883a 	mov	sp,fp
   808ec:	dfc00117 	ldw	ra,4(sp)
   808f0:	df000017 	ldw	fp,0(sp)
   808f4:	dec00204 	addi	sp,sp,8
   808f8:	f800283a 	ret

000808fc <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   808fc:	defffd04 	addi	sp,sp,-12
   80900:	dfc00215 	stw	ra,8(sp)
   80904:	df000115 	stw	fp,4(sp)
   80908:	df000104 	addi	fp,sp,4
   8090c:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2, nios2);
   80910:	008310c0 	call	8310c <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   80914:	00800044 	movi	r2,1
   80918:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   8091c:	e037883a 	mov	sp,fp
   80920:	dfc00117 	ldw	ra,4(sp)
   80924:	df000017 	ldw	fp,0(sp)
   80928:	dec00204 	addi	sp,sp,8
   8092c:	f800283a 	ret

00080930 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   80930:	defffe04 	addi	sp,sp,-8
   80934:	dfc00115 	stw	ra,4(sp)
   80938:	df000015 	stw	fp,0(sp)
   8093c:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
   80940:	01000234 	movhi	r4,8
   80944:	21190d04 	addi	r4,r4,25652
   80948:	000b883a 	mov	r5,zero
   8094c:	000d883a 	mov	r6,zero
   80950:	0080b1c0 	call	80b1c <altera_avalon_jtag_uart_init>
   80954:	01000234 	movhi	r4,8
   80958:	21190304 	addi	r4,r4,25612
   8095c:	008099c0 	call	8099c <alt_dev_reg>
    ALTERA_AVALON_SGDMA_INIT ( SGDMA_RX, sgdma_rx);
   80960:	01000234 	movhi	r4,8
   80964:	211d1b04 	addi	r4,r4,29804
   80968:	000b883a 	mov	r5,zero
   8096c:	01800044 	movi	r6,1
   80970:	00821b80 	call	821b8 <alt_avalon_sgdma_init>
    ALTERA_AVALON_SGDMA_INIT ( SGDMA_TX, sgdma_tx);
   80974:	01000234 	movhi	r4,8
   80978:	211d2704 	addi	r4,r4,29852
   8097c:	000b883a 	mov	r5,zero
   80980:	01800084 	movi	r6,2
   80984:	00821b80 	call	821b8 <alt_avalon_sgdma_init>
    TRIPLE_SPEED_ETHERNET_INIT ( TSE_MAC, tse_mac);
}
   80988:	e037883a 	mov	sp,fp
   8098c:	dfc00117 	ldw	ra,4(sp)
   80990:	df000017 	ldw	fp,0(sp)
   80994:	dec00204 	addi	sp,sp,8
   80998:	f800283a 	ret

0008099c <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   8099c:	defffd04 	addi	sp,sp,-12
   809a0:	dfc00215 	stw	ra,8(sp)
   809a4:	df000115 	stw	fp,4(sp)
   809a8:	df000104 	addi	fp,sp,4
   809ac:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   809b0:	e13fff17 	ldw	r4,-4(fp)
   809b4:	01400234 	movhi	r5,8
   809b8:	295fa304 	addi	r5,r5,32396
   809bc:	008255c0 	call	8255c <alt_dev_llist_insert>
}
   809c0:	e037883a 	mov	sp,fp
   809c4:	dfc00117 	ldw	ra,4(sp)
   809c8:	df000017 	ldw	fp,0(sp)
   809cc:	dec00204 	addi	sp,sp,8
   809d0:	f800283a 	ret

000809d4 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   809d4:	defffa04 	addi	sp,sp,-24
   809d8:	dfc00515 	stw	ra,20(sp)
   809dc:	df000415 	stw	fp,16(sp)
   809e0:	df000404 	addi	fp,sp,16
   809e4:	e13ffd15 	stw	r4,-12(fp)
   809e8:	e17ffe15 	stw	r5,-8(fp)
   809ec:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   809f0:	e0bffd17 	ldw	r2,-12(fp)
   809f4:	10800017 	ldw	r2,0(r2)
   809f8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   809fc:	e0bffc17 	ldw	r2,-16(fp)
   80a00:	11000a04 	addi	r4,r2,40
   80a04:	e0bffd17 	ldw	r2,-12(fp)
   80a08:	11c00217 	ldw	r7,8(r2)
   80a0c:	e17ffe17 	ldw	r5,-8(fp)
   80a10:	e1bfff17 	ldw	r6,-4(fp)
   80a14:	008101c0 	call	8101c <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   80a18:	e037883a 	mov	sp,fp
   80a1c:	dfc00117 	ldw	ra,4(sp)
   80a20:	df000017 	ldw	fp,0(sp)
   80a24:	dec00204 	addi	sp,sp,8
   80a28:	f800283a 	ret

00080a2c <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   80a2c:	defffa04 	addi	sp,sp,-24
   80a30:	dfc00515 	stw	ra,20(sp)
   80a34:	df000415 	stw	fp,16(sp)
   80a38:	df000404 	addi	fp,sp,16
   80a3c:	e13ffd15 	stw	r4,-12(fp)
   80a40:	e17ffe15 	stw	r5,-8(fp)
   80a44:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   80a48:	e0bffd17 	ldw	r2,-12(fp)
   80a4c:	10800017 	ldw	r2,0(r2)
   80a50:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   80a54:	e0bffc17 	ldw	r2,-16(fp)
   80a58:	11000a04 	addi	r4,r2,40
   80a5c:	e0bffd17 	ldw	r2,-12(fp)
   80a60:	11c00217 	ldw	r7,8(r2)
   80a64:	e17ffe17 	ldw	r5,-8(fp)
   80a68:	e1bfff17 	ldw	r6,-4(fp)
   80a6c:	00812400 	call	81240 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   80a70:	e037883a 	mov	sp,fp
   80a74:	dfc00117 	ldw	ra,4(sp)
   80a78:	df000017 	ldw	fp,0(sp)
   80a7c:	dec00204 	addi	sp,sp,8
   80a80:	f800283a 	ret

00080a84 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   80a84:	defffc04 	addi	sp,sp,-16
   80a88:	dfc00315 	stw	ra,12(sp)
   80a8c:	df000215 	stw	fp,8(sp)
   80a90:	df000204 	addi	fp,sp,8
   80a94:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   80a98:	e0bfff17 	ldw	r2,-4(fp)
   80a9c:	10800017 	ldw	r2,0(r2)
   80aa0:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   80aa4:	e0bffe17 	ldw	r2,-8(fp)
   80aa8:	11000a04 	addi	r4,r2,40
   80aac:	e0bfff17 	ldw	r2,-4(fp)
   80ab0:	11400217 	ldw	r5,8(r2)
   80ab4:	0080eb40 	call	80eb4 <altera_avalon_jtag_uart_close>
}
   80ab8:	e037883a 	mov	sp,fp
   80abc:	dfc00117 	ldw	ra,4(sp)
   80ac0:	df000017 	ldw	fp,0(sp)
   80ac4:	dec00204 	addi	sp,sp,8
   80ac8:	f800283a 	ret

00080acc <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   80acc:	defffa04 	addi	sp,sp,-24
   80ad0:	dfc00515 	stw	ra,20(sp)
   80ad4:	df000415 	stw	fp,16(sp)
   80ad8:	df000404 	addi	fp,sp,16
   80adc:	e13ffd15 	stw	r4,-12(fp)
   80ae0:	e17ffe15 	stw	r5,-8(fp)
   80ae4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   80ae8:	e0bffd17 	ldw	r2,-12(fp)
   80aec:	10800017 	ldw	r2,0(r2)
   80af0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   80af4:	e0bffc17 	ldw	r2,-16(fp)
   80af8:	11000a04 	addi	r4,r2,40
   80afc:	e17ffe17 	ldw	r5,-8(fp)
   80b00:	e1bfff17 	ldw	r6,-4(fp)
   80b04:	0080f280 	call	80f28 <altera_avalon_jtag_uart_ioctl>
}
   80b08:	e037883a 	mov	sp,fp
   80b0c:	dfc00117 	ldw	ra,4(sp)
   80b10:	df000017 	ldw	fp,0(sp)
   80b14:	dec00204 	addi	sp,sp,8
   80b18:	f800283a 	ret

00080b1c <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   80b1c:	defffa04 	addi	sp,sp,-24
   80b20:	dfc00515 	stw	ra,20(sp)
   80b24:	df000415 	stw	fp,16(sp)
   80b28:	df000404 	addi	fp,sp,16
   80b2c:	e13ffd15 	stw	r4,-12(fp)
   80b30:	e17ffe15 	stw	r5,-8(fp)
   80b34:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   80b38:	e0fffd17 	ldw	r3,-12(fp)
   80b3c:	00800044 	movi	r2,1
   80b40:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   80b44:	e0bffd17 	ldw	r2,-12(fp)
   80b48:	10800017 	ldw	r2,0(r2)
   80b4c:	11000104 	addi	r4,r2,4
   80b50:	e0bffd17 	ldw	r2,-12(fp)
   80b54:	10800817 	ldw	r2,32(r2)
   80b58:	1007883a 	mov	r3,r2
   80b5c:	2005883a 	mov	r2,r4
   80b60:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   80b64:	e13ffe17 	ldw	r4,-8(fp)
   80b68:	e17fff17 	ldw	r5,-4(fp)
   80b6c:	d8000015 	stw	zero,0(sp)
   80b70:	01800234 	movhi	r6,8
   80b74:	3182f704 	addi	r6,r6,3036
   80b78:	e1fffd17 	ldw	r7,-12(fp)
   80b7c:	00827fc0 	call	827fc <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   80b80:	e0bffd17 	ldw	r2,-12(fp)
   80b84:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   80b88:	e0bffd17 	ldw	r2,-12(fp)
   80b8c:	11000204 	addi	r4,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   80b90:	00800274 	movhi	r2,9
   80b94:	10a76204 	addi	r2,r2,-25208
   80b98:	10800017 	ldw	r2,0(r2)
   80b9c:	100b883a 	mov	r5,r2
   80ba0:	01800234 	movhi	r6,8
   80ba4:	31838104 	addi	r6,r6,3588
   80ba8:	e1fffd17 	ldw	r7,-12(fp)
   80bac:	00822640 	call	82264 <alt_alarm_start>
   80bb0:	1004403a 	cmpge	r2,r2,zero
   80bb4:	1000041e 	bne	r2,zero,80bc8 <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   80bb8:	e0fffd17 	ldw	r3,-12(fp)
   80bbc:	00a00034 	movhi	r2,32768
   80bc0:	10bfffc4 	addi	r2,r2,-1
   80bc4:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   80bc8:	e037883a 	mov	sp,fp
   80bcc:	dfc00117 	ldw	ra,4(sp)
   80bd0:	df000017 	ldw	fp,0(sp)
   80bd4:	dec00204 	addi	sp,sp,8
   80bd8:	f800283a 	ret

00080bdc <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   80bdc:	defff804 	addi	sp,sp,-32
   80be0:	df000715 	stw	fp,28(sp)
   80be4:	df000704 	addi	fp,sp,28
   80be8:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   80bec:	e0bfff17 	ldw	r2,-4(fp)
   80bf0:	e0bffe15 	stw	r2,-8(fp)
  unsigned int base = sp->base;
   80bf4:	e0bffe17 	ldw	r2,-8(fp)
   80bf8:	10800017 	ldw	r2,0(r2)
   80bfc:	e0bffd15 	stw	r2,-12(fp)
   80c00:	00000006 	br	80c04 <altera_avalon_jtag_uart_irq+0x28>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   80c04:	e0bffd17 	ldw	r2,-12(fp)
   80c08:	10800104 	addi	r2,r2,4
   80c0c:	10800037 	ldwio	r2,0(r2)
   80c10:	e0bffc15 	stw	r2,-16(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   80c14:	e0bffc17 	ldw	r2,-16(fp)
   80c18:	1080c00c 	andi	r2,r2,768
   80c1c:	1005003a 	cmpeq	r2,r2,zero
   80c20:	1000741e 	bne	r2,zero,80df4 <altera_avalon_jtag_uart_irq+0x218>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   80c24:	e0bffc17 	ldw	r2,-16(fp)
   80c28:	1080400c 	andi	r2,r2,256
   80c2c:	1005003a 	cmpeq	r2,r2,zero
   80c30:	1000351e 	bne	r2,zero,80d08 <altera_avalon_jtag_uart_irq+0x12c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   80c34:	00800074 	movhi	r2,1
   80c38:	e0bffb15 	stw	r2,-20(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   80c3c:	e0bffe17 	ldw	r2,-8(fp)
   80c40:	10800a17 	ldw	r2,40(r2)
   80c44:	10800044 	addi	r2,r2,1
   80c48:	1081ffcc 	andi	r2,r2,2047
   80c4c:	e0bffa15 	stw	r2,-24(fp)
        if (next == sp->rx_out)
   80c50:	e0bffe17 	ldw	r2,-8(fp)
   80c54:	10c00b17 	ldw	r3,44(r2)
   80c58:	e0bffa17 	ldw	r2,-24(fp)
   80c5c:	18801626 	beq	r3,r2,80cb8 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   80c60:	e0bffd17 	ldw	r2,-12(fp)
   80c64:	10800037 	ldwio	r2,0(r2)
   80c68:	e0bffb15 	stw	r2,-20(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   80c6c:	e0bffb17 	ldw	r2,-20(fp)
   80c70:	10a0000c 	andi	r2,r2,32768
   80c74:	1005003a 	cmpeq	r2,r2,zero
   80c78:	10000f1e 	bne	r2,zero,80cb8 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   80c7c:	e0bffe17 	ldw	r2,-8(fp)
   80c80:	10c00a17 	ldw	r3,40(r2)
   80c84:	e0bffb17 	ldw	r2,-20(fp)
   80c88:	1009883a 	mov	r4,r2
   80c8c:	e0bffe17 	ldw	r2,-8(fp)
   80c90:	1885883a 	add	r2,r3,r2
   80c94:	10800e04 	addi	r2,r2,56
   80c98:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   80c9c:	e0bffe17 	ldw	r2,-8(fp)
   80ca0:	10800a17 	ldw	r2,40(r2)
   80ca4:	10800044 	addi	r2,r2,1
   80ca8:	10c1ffcc 	andi	r3,r2,2047
   80cac:	e0bffe17 	ldw	r2,-8(fp)
   80cb0:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   80cb4:	003fe106 	br	80c3c <altera_avalon_jtag_uart_irq+0x60>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   80cb8:	e0bffb17 	ldw	r2,-20(fp)
   80cbc:	10bfffec 	andhi	r2,r2,65535
   80cc0:	1005003a 	cmpeq	r2,r2,zero
   80cc4:	1000101e 	bne	r2,zero,80d08 <altera_avalon_jtag_uart_irq+0x12c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   80cc8:	e0bffe17 	ldw	r2,-8(fp)
   80ccc:	10c00817 	ldw	r3,32(r2)
   80cd0:	00bfff84 	movi	r2,-2
   80cd4:	1886703a 	and	r3,r3,r2
   80cd8:	e0bffe17 	ldw	r2,-8(fp)
   80cdc:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   80ce0:	e0bffd17 	ldw	r2,-12(fp)
   80ce4:	11000104 	addi	r4,r2,4
   80ce8:	e0bffe17 	ldw	r2,-8(fp)
   80cec:	10800817 	ldw	r2,32(r2)
   80cf0:	1007883a 	mov	r3,r2
   80cf4:	2005883a 	mov	r2,r4
   80cf8:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   80cfc:	e0bffd17 	ldw	r2,-12(fp)
   80d00:	10800104 	addi	r2,r2,4
   80d04:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   80d08:	e0bffc17 	ldw	r2,-16(fp)
   80d0c:	1080800c 	andi	r2,r2,512
   80d10:	1005003a 	cmpeq	r2,r2,zero
   80d14:	103fbb1e 	bne	r2,zero,80c04 <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   80d18:	e0bffc17 	ldw	r2,-16(fp)
   80d1c:	10bfffec 	andhi	r2,r2,65535
   80d20:	1004d43a 	srli	r2,r2,16
   80d24:	e0bff915 	stw	r2,-28(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   80d28:	00001506 	br	80d80 <altera_avalon_jtag_uart_irq+0x1a4>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   80d2c:	e13ffd17 	ldw	r4,-12(fp)
   80d30:	e0bffe17 	ldw	r2,-8(fp)
   80d34:	10c00d17 	ldw	r3,52(r2)
   80d38:	e0bffe17 	ldw	r2,-8(fp)
   80d3c:	1885883a 	add	r2,r3,r2
   80d40:	10820e04 	addi	r2,r2,2104
   80d44:	10800003 	ldbu	r2,0(r2)
   80d48:	10c03fcc 	andi	r3,r2,255
   80d4c:	18c0201c 	xori	r3,r3,128
   80d50:	18ffe004 	addi	r3,r3,-128
   80d54:	2005883a 	mov	r2,r4
   80d58:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   80d5c:	e0bffe17 	ldw	r2,-8(fp)
   80d60:	10800d17 	ldw	r2,52(r2)
   80d64:	10800044 	addi	r2,r2,1
   80d68:	10c1ffcc 	andi	r3,r2,2047
   80d6c:	e0bffe17 	ldw	r2,-8(fp)
   80d70:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   80d74:	e0bff917 	ldw	r2,-28(fp)
   80d78:	10bfffc4 	addi	r2,r2,-1
   80d7c:	e0bff915 	stw	r2,-28(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   80d80:	e0bff917 	ldw	r2,-28(fp)
   80d84:	1005003a 	cmpeq	r2,r2,zero
   80d88:	1000051e 	bne	r2,zero,80da0 <altera_avalon_jtag_uart_irq+0x1c4>
   80d8c:	e0bffe17 	ldw	r2,-8(fp)
   80d90:	10c00d17 	ldw	r3,52(r2)
   80d94:	e0bffe17 	ldw	r2,-8(fp)
   80d98:	10800c17 	ldw	r2,48(r2)
   80d9c:	18bfe31e 	bne	r3,r2,80d2c <altera_avalon_jtag_uart_irq+0x150>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   80da0:	e0bff917 	ldw	r2,-28(fp)
   80da4:	1005003a 	cmpeq	r2,r2,zero
   80da8:	103f961e 	bne	r2,zero,80c04 <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   80dac:	e0bffe17 	ldw	r2,-8(fp)
   80db0:	10c00817 	ldw	r3,32(r2)
   80db4:	00bfff44 	movi	r2,-3
   80db8:	1886703a 	and	r3,r3,r2
   80dbc:	e0bffe17 	ldw	r2,-8(fp)
   80dc0:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   80dc4:	e0bffe17 	ldw	r2,-8(fp)
   80dc8:	10800017 	ldw	r2,0(r2)
   80dcc:	11000104 	addi	r4,r2,4
   80dd0:	e0bffe17 	ldw	r2,-8(fp)
   80dd4:	10800817 	ldw	r2,32(r2)
   80dd8:	1007883a 	mov	r3,r2
   80ddc:	2005883a 	mov	r2,r4
   80de0:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   80de4:	e0bffd17 	ldw	r2,-12(fp)
   80de8:	10800104 	addi	r2,r2,4
   80dec:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   80df0:	003f8406 	br	80c04 <altera_avalon_jtag_uart_irq+0x28>
}
   80df4:	e037883a 	mov	sp,fp
   80df8:	df000017 	ldw	fp,0(sp)
   80dfc:	dec00104 	addi	sp,sp,4
   80e00:	f800283a 	ret

00080e04 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   80e04:	defffc04 	addi	sp,sp,-16
   80e08:	df000315 	stw	fp,12(sp)
   80e0c:	df000304 	addi	fp,sp,12
   80e10:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   80e14:	e0bfff17 	ldw	r2,-4(fp)
   80e18:	e0bffe15 	stw	r2,-8(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   80e1c:	e0bffe17 	ldw	r2,-8(fp)
   80e20:	10800017 	ldw	r2,0(r2)
   80e24:	10800104 	addi	r2,r2,4
   80e28:	10800037 	ldwio	r2,0(r2)
   80e2c:	e0bffd15 	stw	r2,-12(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   80e30:	e0bffd17 	ldw	r2,-12(fp)
   80e34:	1081000c 	andi	r2,r2,1024
   80e38:	1005003a 	cmpeq	r2,r2,zero
   80e3c:	10000c1e 	bne	r2,zero,80e70 <altera_avalon_jtag_uart_timeout+0x6c>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   80e40:	e0bffe17 	ldw	r2,-8(fp)
   80e44:	10800017 	ldw	r2,0(r2)
   80e48:	11000104 	addi	r4,r2,4
   80e4c:	e0bffe17 	ldw	r2,-8(fp)
   80e50:	10800817 	ldw	r2,32(r2)
   80e54:	10810014 	ori	r2,r2,1024
   80e58:	1007883a 	mov	r3,r2
   80e5c:	2005883a 	mov	r2,r4
   80e60:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
   80e64:	e0bffe17 	ldw	r2,-8(fp)
   80e68:	10000915 	stw	zero,36(r2)
   80e6c:	00000a06 	br	80e98 <altera_avalon_jtag_uart_timeout+0x94>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   80e70:	e0bffe17 	ldw	r2,-8(fp)
   80e74:	10c00917 	ldw	r3,36(r2)
   80e78:	00a00034 	movhi	r2,32768
   80e7c:	10bfff04 	addi	r2,r2,-4
   80e80:	10c00536 	bltu	r2,r3,80e98 <altera_avalon_jtag_uart_timeout+0x94>
    sp->host_inactive++;
   80e84:	e0bffe17 	ldw	r2,-8(fp)
   80e88:	10800917 	ldw	r2,36(r2)
   80e8c:	10c00044 	addi	r3,r2,1
   80e90:	e0bffe17 	ldw	r2,-8(fp)
   80e94:	10c00915 	stw	r3,36(r2)
   80e98:	00800274 	movhi	r2,9
   80e9c:	10a76204 	addi	r2,r2,-25208
   80ea0:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   80ea4:	e037883a 	mov	sp,fp
   80ea8:	df000017 	ldw	fp,0(sp)
   80eac:	dec00104 	addi	sp,sp,4
   80eb0:	f800283a 	ret

00080eb4 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   80eb4:	defffc04 	addi	sp,sp,-16
   80eb8:	df000315 	stw	fp,12(sp)
   80ebc:	df000304 	addi	fp,sp,12
   80ec0:	e13ffd15 	stw	r4,-12(fp)
   80ec4:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   80ec8:	00000706 	br	80ee8 <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
   80ecc:	e0bffe17 	ldw	r2,-8(fp)
   80ed0:	1090000c 	andi	r2,r2,16384
   80ed4:	1005003a 	cmpeq	r2,r2,zero
   80ed8:	1000031e 	bne	r2,zero,80ee8 <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
   80edc:	00bffd44 	movi	r2,-11
   80ee0:	e0bfff15 	stw	r2,-4(fp)
   80ee4:	00000b06 	br	80f14 <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   80ee8:	e0bffd17 	ldw	r2,-12(fp)
   80eec:	10c00d17 	ldw	r3,52(r2)
   80ef0:	e0bffd17 	ldw	r2,-12(fp)
   80ef4:	10800c17 	ldw	r2,48(r2)
   80ef8:	18800526 	beq	r3,r2,80f10 <altera_avalon_jtag_uart_close+0x5c>
   80efc:	e0bffd17 	ldw	r2,-12(fp)
   80f00:	10c00917 	ldw	r3,36(r2)
   80f04:	e0bffd17 	ldw	r2,-12(fp)
   80f08:	10800117 	ldw	r2,4(r2)
   80f0c:	18bfef36 	bltu	r3,r2,80ecc <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   80f10:	e03fff15 	stw	zero,-4(fp)
   80f14:	e0bfff17 	ldw	r2,-4(fp)
}
   80f18:	e037883a 	mov	sp,fp
   80f1c:	df000017 	ldw	fp,0(sp)
   80f20:	dec00104 	addi	sp,sp,4
   80f24:	f800283a 	ret

00080f28 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   80f28:	defff804 	addi	sp,sp,-32
   80f2c:	df000715 	stw	fp,28(sp)
   80f30:	df000704 	addi	fp,sp,28
   80f34:	e13ffb15 	stw	r4,-20(fp)
   80f38:	e17ffc15 	stw	r5,-16(fp)
   80f3c:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
   80f40:	00bff9c4 	movi	r2,-25
   80f44:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
   80f48:	e0bffc17 	ldw	r2,-16(fp)
   80f4c:	e0bfff15 	stw	r2,-4(fp)
   80f50:	e0ffff17 	ldw	r3,-4(fp)
   80f54:	189a8060 	cmpeqi	r2,r3,27137
   80f58:	1000041e 	bne	r2,zero,80f6c <altera_avalon_jtag_uart_ioctl+0x44>
   80f5c:	e0ffff17 	ldw	r3,-4(fp)
   80f60:	189a80a0 	cmpeqi	r2,r3,27138
   80f64:	10001b1e 	bne	r2,zero,80fd4 <altera_avalon_jtag_uart_ioctl+0xac>
   80f68:	00002706 	br	81008 <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   80f6c:	e0bffb17 	ldw	r2,-20(fp)
   80f70:	10c00117 	ldw	r3,4(r2)
   80f74:	00a00034 	movhi	r2,32768
   80f78:	10bfffc4 	addi	r2,r2,-1
   80f7c:	18802226 	beq	r3,r2,81008 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
   80f80:	e0bffd17 	ldw	r2,-12(fp)
   80f84:	10800017 	ldw	r2,0(r2)
   80f88:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   80f8c:	e0bff917 	ldw	r2,-28(fp)
   80f90:	10800090 	cmplti	r2,r2,2
   80f94:	1000071e 	bne	r2,zero,80fb4 <altera_avalon_jtag_uart_ioctl+0x8c>
   80f98:	e0fff917 	ldw	r3,-28(fp)
   80f9c:	00a00034 	movhi	r2,32768
   80fa0:	10bfffc4 	addi	r2,r2,-1
   80fa4:	18800326 	beq	r3,r2,80fb4 <altera_avalon_jtag_uart_ioctl+0x8c>
   80fa8:	e0bff917 	ldw	r2,-28(fp)
   80fac:	e0bffe15 	stw	r2,-8(fp)
   80fb0:	00000306 	br	80fc0 <altera_avalon_jtag_uart_ioctl+0x98>
   80fb4:	00e00034 	movhi	r3,32768
   80fb8:	18ffff84 	addi	r3,r3,-2
   80fbc:	e0fffe15 	stw	r3,-8(fp)
   80fc0:	e0bffb17 	ldw	r2,-20(fp)
   80fc4:	e0fffe17 	ldw	r3,-8(fp)
   80fc8:	10c00115 	stw	r3,4(r2)
      rc = 0;
   80fcc:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
   80fd0:	00000d06 	br	81008 <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   80fd4:	e0bffb17 	ldw	r2,-20(fp)
   80fd8:	10c00117 	ldw	r3,4(r2)
   80fdc:	00a00034 	movhi	r2,32768
   80fe0:	10bfffc4 	addi	r2,r2,-1
   80fe4:	18800826 	beq	r3,r2,81008 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   80fe8:	e13ffd17 	ldw	r4,-12(fp)
   80fec:	e0bffb17 	ldw	r2,-20(fp)
   80ff0:	10c00917 	ldw	r3,36(r2)
   80ff4:	e0bffb17 	ldw	r2,-20(fp)
   80ff8:	10800117 	ldw	r2,4(r2)
   80ffc:	1885803a 	cmpltu	r2,r3,r2
   81000:	20800015 	stw	r2,0(r4)
      rc = 0;
   81004:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
   81008:	e0bffa17 	ldw	r2,-24(fp)
}
   8100c:	e037883a 	mov	sp,fp
   81010:	df000017 	ldw	fp,0(sp)
   81014:	dec00104 	addi	sp,sp,4
   81018:	f800283a 	ret

0008101c <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   8101c:	defff204 	addi	sp,sp,-56
   81020:	dfc00d15 	stw	ra,52(sp)
   81024:	df000c15 	stw	fp,48(sp)
   81028:	df000c04 	addi	fp,sp,48
   8102c:	e13ffb15 	stw	r4,-20(fp)
   81030:	e17ffc15 	stw	r5,-16(fp)
   81034:	e1bffd15 	stw	r6,-12(fp)
   81038:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
   8103c:	e0bffc17 	ldw	r2,-16(fp)
   81040:	e0bffa15 	stw	r2,-24(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   81044:	00004806 	br	81168 <altera_avalon_jtag_uart_read+0x14c>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   81048:	e0bffb17 	ldw	r2,-20(fp)
   8104c:	10800a17 	ldw	r2,40(r2)
   81050:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   81054:	e0bffb17 	ldw	r2,-20(fp)
   81058:	10800b17 	ldw	r2,44(r2)
   8105c:	e0bff615 	stw	r2,-40(fp)

      if (in >= out)
   81060:	e0fff717 	ldw	r3,-36(fp)
   81064:	e0bff617 	ldw	r2,-40(fp)
   81068:	18800536 	bltu	r3,r2,81080 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   8106c:	e0bff717 	ldw	r2,-36(fp)
   81070:	e0fff617 	ldw	r3,-40(fp)
   81074:	10c5c83a 	sub	r2,r2,r3
   81078:	e0bff815 	stw	r2,-32(fp)
   8107c:	00000406 	br	81090 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   81080:	00820004 	movi	r2,2048
   81084:	e0fff617 	ldw	r3,-40(fp)
   81088:	10c5c83a 	sub	r2,r2,r3
   8108c:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
   81090:	e0bff817 	ldw	r2,-32(fp)
   81094:	1005003a 	cmpeq	r2,r2,zero
   81098:	10001f1e 	bne	r2,zero,81118 <altera_avalon_jtag_uart_read+0xfc>
        break; /* No more data available */

      if (n > space)
   8109c:	e0fffd17 	ldw	r3,-12(fp)
   810a0:	e0bff817 	ldw	r2,-32(fp)
   810a4:	1880022e 	bgeu	r3,r2,810b0 <altera_avalon_jtag_uart_read+0x94>
        n = space;
   810a8:	e0bffd17 	ldw	r2,-12(fp)
   810ac:	e0bff815 	stw	r2,-32(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   810b0:	e0bffb17 	ldw	r2,-20(fp)
   810b4:	10c00e04 	addi	r3,r2,56
   810b8:	e0bff617 	ldw	r2,-40(fp)
   810bc:	1887883a 	add	r3,r3,r2
   810c0:	e0bffa17 	ldw	r2,-24(fp)
   810c4:	1009883a 	mov	r4,r2
   810c8:	180b883a 	mov	r5,r3
   810cc:	e1bff817 	ldw	r6,-32(fp)
   810d0:	00834780 	call	83478 <memcpy>
      ptr   += n;
   810d4:	e0fff817 	ldw	r3,-32(fp)
   810d8:	e0bffa17 	ldw	r2,-24(fp)
   810dc:	10c5883a 	add	r2,r2,r3
   810e0:	e0bffa15 	stw	r2,-24(fp)
      space -= n;
   810e4:	e0fffd17 	ldw	r3,-12(fp)
   810e8:	e0bff817 	ldw	r2,-32(fp)
   810ec:	1885c83a 	sub	r2,r3,r2
   810f0:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   810f4:	e0fff617 	ldw	r3,-40(fp)
   810f8:	e0bff817 	ldw	r2,-32(fp)
   810fc:	1885883a 	add	r2,r3,r2
   81100:	10c1ffcc 	andi	r3,r2,2047
   81104:	e0bffb17 	ldw	r2,-20(fp)
   81108:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   8110c:	e0bffd17 	ldw	r2,-12(fp)
   81110:	10800048 	cmpgei	r2,r2,1
   81114:	103fcc1e 	bne	r2,zero,81048 <altera_avalon_jtag_uart_read+0x2c>

    /* If we read any data then return it */
    if (ptr != buffer)
   81118:	e0fffa17 	ldw	r3,-24(fp)
   8111c:	e0bffc17 	ldw	r2,-16(fp)
   81120:	1880141e 	bne	r3,r2,81174 <altera_avalon_jtag_uart_read+0x158>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   81124:	e0bffe17 	ldw	r2,-8(fp)
   81128:	1090000c 	andi	r2,r2,16384
   8112c:	1004c03a 	cmpne	r2,r2,zero
   81130:	1000101e 	bne	r2,zero,81174 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   81134:	e0bffb17 	ldw	r2,-20(fp)
   81138:	10c00a17 	ldw	r3,40(r2)
   8113c:	e0bff717 	ldw	r2,-36(fp)
   81140:	1880051e 	bne	r3,r2,81158 <altera_avalon_jtag_uart_read+0x13c>
   81144:	e0bffb17 	ldw	r2,-20(fp)
   81148:	10c00917 	ldw	r3,36(r2)
   8114c:	e0bffb17 	ldw	r2,-20(fp)
   81150:	10800117 	ldw	r2,4(r2)
   81154:	18bff736 	bltu	r3,r2,81134 <altera_avalon_jtag_uart_read+0x118>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   81158:	e0bffb17 	ldw	r2,-20(fp)
   8115c:	10c00a17 	ldw	r3,40(r2)
   81160:	e0bff717 	ldw	r2,-36(fp)
   81164:	18800326 	beq	r3,r2,81174 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   81168:	e0bffd17 	ldw	r2,-12(fp)
   8116c:	10800048 	cmpgei	r2,r2,1
   81170:	103fb51e 	bne	r2,zero,81048 <altera_avalon_jtag_uart_read+0x2c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   81174:	e0fffa17 	ldw	r3,-24(fp)
   81178:	e0bffc17 	ldw	r2,-16(fp)
   8117c:	18801926 	beq	r3,r2,811e4 <altera_avalon_jtag_uart_read+0x1c8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   81180:	0005303a 	rdctl	r2,status
   81184:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   81188:	e0fff517 	ldw	r3,-44(fp)
   8118c:	00bfff84 	movi	r2,-2
   81190:	1884703a 	and	r2,r3,r2
   81194:	1001703a 	wrctl	status,r2
  
  return context;
   81198:	e0bff517 	ldw	r2,-44(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   8119c:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   811a0:	e0bffb17 	ldw	r2,-20(fp)
   811a4:	10800817 	ldw	r2,32(r2)
   811a8:	10c00054 	ori	r3,r2,1
   811ac:	e0bffb17 	ldw	r2,-20(fp)
   811b0:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   811b4:	e0bffb17 	ldw	r2,-20(fp)
   811b8:	10800017 	ldw	r2,0(r2)
   811bc:	11000104 	addi	r4,r2,4
   811c0:	e0bffb17 	ldw	r2,-20(fp)
   811c4:	10800817 	ldw	r2,32(r2)
   811c8:	1007883a 	mov	r3,r2
   811cc:	2005883a 	mov	r2,r4
   811d0:	10c00035 	stwio	r3,0(r2)
   811d4:	e0bff917 	ldw	r2,-28(fp)
   811d8:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   811dc:	e0bff417 	ldw	r2,-48(fp)
   811e0:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   811e4:	e0fffa17 	ldw	r3,-24(fp)
   811e8:	e0bffc17 	ldw	r2,-16(fp)
   811ec:	18800526 	beq	r3,r2,81204 <altera_avalon_jtag_uart_read+0x1e8>
    return ptr - buffer;
   811f0:	e0fffa17 	ldw	r3,-24(fp)
   811f4:	e0bffc17 	ldw	r2,-16(fp)
   811f8:	1887c83a 	sub	r3,r3,r2
   811fc:	e0ffff15 	stw	r3,-4(fp)
   81200:	00000906 	br	81228 <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
   81204:	e0bffe17 	ldw	r2,-8(fp)
   81208:	1090000c 	andi	r2,r2,16384
   8120c:	1005003a 	cmpeq	r2,r2,zero
   81210:	1000031e 	bne	r2,zero,81220 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
   81214:	00bffd44 	movi	r2,-11
   81218:	e0bfff15 	stw	r2,-4(fp)
   8121c:	00000206 	br	81228 <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
   81220:	00bffec4 	movi	r2,-5
   81224:	e0bfff15 	stw	r2,-4(fp)
   81228:	e0bfff17 	ldw	r2,-4(fp)
}
   8122c:	e037883a 	mov	sp,fp
   81230:	dfc00117 	ldw	ra,4(sp)
   81234:	df000017 	ldw	fp,0(sp)
   81238:	dec00204 	addi	sp,sp,8
   8123c:	f800283a 	ret

00081240 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   81240:	defff204 	addi	sp,sp,-56
   81244:	dfc00d15 	stw	ra,52(sp)
   81248:	df000c15 	stw	fp,48(sp)
   8124c:	df000c04 	addi	fp,sp,48
   81250:	e13ffb15 	stw	r4,-20(fp)
   81254:	e17ffc15 	stw	r5,-16(fp)
   81258:	e1bffd15 	stw	r6,-12(fp)
   8125c:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   81260:	e03ff915 	stw	zero,-28(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   81264:	e0bffc17 	ldw	r2,-16(fp)
   81268:	e0bff615 	stw	r2,-40(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   8126c:	00003a06 	br	81358 <altera_avalon_jtag_uart_write+0x118>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   81270:	e0bffb17 	ldw	r2,-20(fp)
   81274:	10800c17 	ldw	r2,48(r2)
   81278:	e0bffa15 	stw	r2,-24(fp)
      out = sp->tx_out;
   8127c:	e0bffb17 	ldw	r2,-20(fp)
   81280:	10800d17 	ldw	r2,52(r2)
   81284:	e0bff915 	stw	r2,-28(fp)

      if (in < out)
   81288:	e0fffa17 	ldw	r3,-24(fp)
   8128c:	e0bff917 	ldw	r2,-28(fp)
   81290:	1880062e 	bgeu	r3,r2,812ac <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   81294:	e0fff917 	ldw	r3,-28(fp)
   81298:	e0bffa17 	ldw	r2,-24(fp)
   8129c:	1885c83a 	sub	r2,r3,r2
   812a0:	10bfffc4 	addi	r2,r2,-1
   812a4:	e0bff815 	stw	r2,-32(fp)
   812a8:	00000c06 	br	812dc <altera_avalon_jtag_uart_write+0x9c>
      else if (out > 0)
   812ac:	e0bff917 	ldw	r2,-28(fp)
   812b0:	1005003a 	cmpeq	r2,r2,zero
   812b4:	1000051e 	bne	r2,zero,812cc <altera_avalon_jtag_uart_write+0x8c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   812b8:	00820004 	movi	r2,2048
   812bc:	e0fffa17 	ldw	r3,-24(fp)
   812c0:	10c5c83a 	sub	r2,r2,r3
   812c4:	e0bff815 	stw	r2,-32(fp)
   812c8:	00000406 	br	812dc <altera_avalon_jtag_uart_write+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   812cc:	0081ffc4 	movi	r2,2047
   812d0:	e0fffa17 	ldw	r3,-24(fp)
   812d4:	10c5c83a 	sub	r2,r2,r3
   812d8:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
   812dc:	e0bff817 	ldw	r2,-32(fp)
   812e0:	1005003a 	cmpeq	r2,r2,zero
   812e4:	10001f1e 	bne	r2,zero,81364 <altera_avalon_jtag_uart_write+0x124>
        break;

      if (n > count)
   812e8:	e0fffd17 	ldw	r3,-12(fp)
   812ec:	e0bff817 	ldw	r2,-32(fp)
   812f0:	1880022e 	bgeu	r3,r2,812fc <altera_avalon_jtag_uart_write+0xbc>
        n = count;
   812f4:	e0bffd17 	ldw	r2,-12(fp)
   812f8:	e0bff815 	stw	r2,-32(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   812fc:	e0bffb17 	ldw	r2,-20(fp)
   81300:	10c20e04 	addi	r3,r2,2104
   81304:	e0bffa17 	ldw	r2,-24(fp)
   81308:	1885883a 	add	r2,r3,r2
   8130c:	e0fffc17 	ldw	r3,-16(fp)
   81310:	1009883a 	mov	r4,r2
   81314:	180b883a 	mov	r5,r3
   81318:	e1bff817 	ldw	r6,-32(fp)
   8131c:	00834780 	call	83478 <memcpy>
      ptr   += n;
   81320:	e0fff817 	ldw	r3,-32(fp)
   81324:	e0bffc17 	ldw	r2,-16(fp)
   81328:	10c5883a 	add	r2,r2,r3
   8132c:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
   81330:	e0fffd17 	ldw	r3,-12(fp)
   81334:	e0bff817 	ldw	r2,-32(fp)
   81338:	1885c83a 	sub	r2,r3,r2
   8133c:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   81340:	e0fffa17 	ldw	r3,-24(fp)
   81344:	e0bff817 	ldw	r2,-32(fp)
   81348:	1885883a 	add	r2,r3,r2
   8134c:	10c1ffcc 	andi	r3,r2,2047
   81350:	e0bffb17 	ldw	r2,-20(fp)
   81354:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   81358:	e0bffd17 	ldw	r2,-12(fp)
   8135c:	10800048 	cmpgei	r2,r2,1
   81360:	103fc31e 	bne	r2,zero,81270 <altera_avalon_jtag_uart_write+0x30>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   81364:	0005303a 	rdctl	r2,status
   81368:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8136c:	e0fff517 	ldw	r3,-44(fp)
   81370:	00bfff84 	movi	r2,-2
   81374:	1884703a 	and	r2,r3,r2
   81378:	1001703a 	wrctl	status,r2
  
  return context;
   8137c:	e0bff517 	ldw	r2,-44(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   81380:	e0bff715 	stw	r2,-36(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   81384:	e0bffb17 	ldw	r2,-20(fp)
   81388:	10800817 	ldw	r2,32(r2)
   8138c:	10c00094 	ori	r3,r2,2
   81390:	e0bffb17 	ldw	r2,-20(fp)
   81394:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   81398:	e0bffb17 	ldw	r2,-20(fp)
   8139c:	10800017 	ldw	r2,0(r2)
   813a0:	11000104 	addi	r4,r2,4
   813a4:	e0bffb17 	ldw	r2,-20(fp)
   813a8:	10800817 	ldw	r2,32(r2)
   813ac:	1007883a 	mov	r3,r2
   813b0:	2005883a 	mov	r2,r4
   813b4:	10c00035 	stwio	r3,0(r2)
   813b8:	e0bff717 	ldw	r2,-36(fp)
   813bc:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   813c0:	e0bff417 	ldw	r2,-48(fp)
   813c4:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   813c8:	e0bffd17 	ldw	r2,-12(fp)
   813cc:	10800050 	cmplti	r2,r2,1
   813d0:	1000111e 	bne	r2,zero,81418 <altera_avalon_jtag_uart_write+0x1d8>
    {
      if (flags & O_NONBLOCK)
   813d4:	e0bffe17 	ldw	r2,-8(fp)
   813d8:	1090000c 	andi	r2,r2,16384
   813dc:	1004c03a 	cmpne	r2,r2,zero
   813e0:	1000101e 	bne	r2,zero,81424 <altera_avalon_jtag_uart_write+0x1e4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   813e4:	e0bffb17 	ldw	r2,-20(fp)
   813e8:	10c00d17 	ldw	r3,52(r2)
   813ec:	e0bff917 	ldw	r2,-28(fp)
   813f0:	1880051e 	bne	r3,r2,81408 <altera_avalon_jtag_uart_write+0x1c8>
   813f4:	e0bffb17 	ldw	r2,-20(fp)
   813f8:	10c00917 	ldw	r3,36(r2)
   813fc:	e0bffb17 	ldw	r2,-20(fp)
   81400:	10800117 	ldw	r2,4(r2)
   81404:	18bff736 	bltu	r3,r2,813e4 <altera_avalon_jtag_uart_write+0x1a4>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
   81408:	e0bffb17 	ldw	r2,-20(fp)
   8140c:	10c00d17 	ldw	r3,52(r2)
   81410:	e0bff917 	ldw	r2,-28(fp)
   81414:	18800326 	beq	r3,r2,81424 <altera_avalon_jtag_uart_write+0x1e4>
         break;
    }
  }
  while (count > 0);
   81418:	e0bffd17 	ldw	r2,-12(fp)
   8141c:	10800048 	cmpgei	r2,r2,1
   81420:	103fcd1e 	bne	r2,zero,81358 <altera_avalon_jtag_uart_write+0x118>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   81424:	e0fffc17 	ldw	r3,-16(fp)
   81428:	e0bff617 	ldw	r2,-40(fp)
   8142c:	18800526 	beq	r3,r2,81444 <altera_avalon_jtag_uart_write+0x204>
    return ptr - start;
   81430:	e0fffc17 	ldw	r3,-16(fp)
   81434:	e0bff617 	ldw	r2,-40(fp)
   81438:	1887c83a 	sub	r3,r3,r2
   8143c:	e0ffff15 	stw	r3,-4(fp)
   81440:	00000906 	br	81468 <altera_avalon_jtag_uart_write+0x228>
  else if (flags & O_NONBLOCK)
   81444:	e0bffe17 	ldw	r2,-8(fp)
   81448:	1090000c 	andi	r2,r2,16384
   8144c:	1005003a 	cmpeq	r2,r2,zero
   81450:	1000031e 	bne	r2,zero,81460 <altera_avalon_jtag_uart_write+0x220>
    return -EWOULDBLOCK;
   81454:	00bffd44 	movi	r2,-11
   81458:	e0bfff15 	stw	r2,-4(fp)
   8145c:	00000206 	br	81468 <altera_avalon_jtag_uart_write+0x228>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   81460:	00bffec4 	movi	r2,-5
   81464:	e0bfff15 	stw	r2,-4(fp)
   81468:	e0bfff17 	ldw	r2,-4(fp)
}
   8146c:	e037883a 	mov	sp,fp
   81470:	dfc00117 	ldw	ra,4(sp)
   81474:	df000017 	ldw	fp,0(sp)
   81478:	dec00204 	addi	sp,sp,8
   8147c:	f800283a 	ret

00081480 <alt_avalon_sgdma_do_async_transfer>:
 * - 0 for success, or various errors defined in <errno.h>
 */
int alt_avalon_sgdma_do_async_transfer(
  alt_sgdma_dev *dev,
  alt_sgdma_descriptor *desc)
{
   81480:	defffb04 	addi	sp,sp,-20
   81484:	df000415 	stw	fp,16(sp)
   81488:	df000404 	addi	fp,sp,16
   8148c:	e13ffd15 	stw	r4,-12(fp)
   81490:	e17ffe15 	stw	r5,-8(fp)
  alt_u32 control;

  /* Return with error immediately if controller is busy */
  if( (IORD_ALTERA_AVALON_SGDMA_STATUS(dev->base) &
   81494:	e0bffd17 	ldw	r2,-12(fp)
   81498:	10800317 	ldw	r2,12(r2)
   8149c:	10800037 	ldwio	r2,0(r2)
   814a0:	1080040c 	andi	r2,r2,16
   814a4:	1005003a 	cmpeq	r2,r2,zero
   814a8:	1000031e 	bne	r2,zero,814b8 <alt_avalon_sgdma_do_async_transfer+0x38>
           ALTERA_AVALON_SGDMA_STATUS_BUSY_MSK) ) {
    return -EBUSY;
   814ac:	00bffc04 	movi	r2,-16
   814b0:	e0bfff15 	stw	r2,-4(fp)
   814b4:	00003c06 	br	815a8 <alt_avalon_sgdma_do_async_transfer+0x128>
  }

  /* Clear Run */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base,
   814b8:	e0bffd17 	ldw	r2,-12(fp)
   814bc:	10800317 	ldw	r2,12(r2)
   814c0:	11000404 	addi	r4,r2,16
   814c4:	e0bffd17 	ldw	r2,-12(fp)
   814c8:	10800317 	ldw	r2,12(r2)
   814cc:	10800404 	addi	r2,r2,16
   814d0:	10c00037 	ldwio	r3,0(r2)
   814d4:	00bff7c4 	movi	r2,-33
   814d8:	1886703a 	and	r3,r3,r2
   814dc:	2005883a 	mov	r2,r4
   814e0:	10c00035 	stwio	r3,0(r2)

  /*
   * Clear any (previous) status register information
   * that might occlude our error checking later.
   */
  IOWR_ALTERA_AVALON_SGDMA_STATUS(dev->base, 0xFF);
   814e4:	e0bffd17 	ldw	r2,-12(fp)
   814e8:	10800317 	ldw	r2,12(r2)
   814ec:	1007883a 	mov	r3,r2
   814f0:	00803fc4 	movi	r2,255
   814f4:	18800035 	stwio	r2,0(r3)

  /* Point the controller at the descriptor */
  IOWR_ALTERA_AVALON_SGDMA_NEXT_DESC_POINTER(dev->base, (alt_u32) desc);
   814f8:	e0bffd17 	ldw	r2,-12(fp)
   814fc:	10800317 	ldw	r2,12(r2)
   81500:	10800804 	addi	r2,r2,32
   81504:	e0fffe17 	ldw	r3,-8(fp)
   81508:	10c00035 	stwio	r3,0(r2)
   *  - Stop on an error with any particular descriptor
   *  - Include any control register bits registered with along with
   *    the callback routine (effectively, interrupts are controlled
   *    via the control bits set during callback-register time).
   */
  if(dev->callback) {
   8150c:	e0bffd17 	ldw	r2,-12(fp)
   81510:	10800917 	ldw	r2,36(r2)
   81514:	1005003a 	cmpeq	r2,r2,zero
   81518:	1000111e 	bne	r2,zero,81560 <alt_avalon_sgdma_do_async_transfer+0xe0>
    control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
   8151c:	e0bffd17 	ldw	r2,-12(fp)
   81520:	10800317 	ldw	r2,12(r2)
   81524:	10800404 	addi	r2,r2,16
   81528:	10800037 	ldwio	r2,0(r2)
   8152c:	e0bffc15 	stw	r2,-16(fp)

    control |= (dev->chain_control                          |
   81530:	e0bffd17 	ldw	r2,-12(fp)
   81534:	10c00b17 	ldw	r3,44(r2)
   81538:	e0bffc17 	ldw	r2,-16(fp)
   8153c:	1884b03a 	or	r2,r3,r2
   81540:	10801814 	ori	r2,r2,96
   81544:	e0bffc15 	stw	r2,-16(fp)
                ALTERA_AVALON_SGDMA_CONTROL_RUN_MSK         |
                ALTERA_AVALON_SGDMA_CONTROL_STOP_DMA_ER_MSK  );

    IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, control);
   81548:	e0bffd17 	ldw	r2,-12(fp)
   8154c:	10800317 	ldw	r2,12(r2)
   81550:	10800404 	addi	r2,r2,16
   81554:	e0fffc17 	ldw	r3,-16(fp)
   81558:	10c00035 	stwio	r3,0(r2)
   8155c:	00001106 	br	815a4 <alt_avalon_sgdma_do_async_transfer+0x124>
   *   - Run
   *   - Stop on an error with any particular descriptor
   *   - Disable interrupt generation
   */
  else {
    control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
   81560:	e0bffd17 	ldw	r2,-12(fp)
   81564:	10800317 	ldw	r2,12(r2)
   81568:	10800404 	addi	r2,r2,16
   8156c:	10800037 	ldwio	r2,0(r2)
   81570:	e0bffc15 	stw	r2,-16(fp)

    control |= (ALTERA_AVALON_SGDMA_CONTROL_RUN_MSK         |
   81574:	e0bffc17 	ldw	r2,-16(fp)
   81578:	10801814 	ori	r2,r2,96
   8157c:	e0bffc15 	stw	r2,-16(fp)
                ALTERA_AVALON_SGDMA_CONTROL_STOP_DMA_ER_MSK );
    control &= ~ALTERA_AVALON_SGDMA_CONTROL_IE_GLOBAL_MSK;
   81580:	e0fffc17 	ldw	r3,-16(fp)
   81584:	00bffbc4 	movi	r2,-17
   81588:	1884703a 	and	r2,r3,r2
   8158c:	e0bffc15 	stw	r2,-16(fp)

    IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, control);
   81590:	e0bffd17 	ldw	r2,-12(fp)
   81594:	10800317 	ldw	r2,12(r2)
   81598:	10800404 	addi	r2,r2,16
   8159c:	e0fffc17 	ldw	r3,-16(fp)
   815a0:	10c00035 	stwio	r3,0(r2)

  /*
   * Error detection/handling should be performed at the application
   * or callback level as appropriate.
   */
  return 0;
   815a4:	e03fff15 	stw	zero,-4(fp)
   815a8:	e0bfff17 	ldw	r2,-4(fp)
}
   815ac:	e037883a 	mov	sp,fp
   815b0:	df000017 	ldw	fp,0(sp)
   815b4:	dec00104 	addi	sp,sp,4
   815b8:	f800283a 	ret

000815bc <alt_avalon_sgdma_do_sync_transfer>:
 * - status: Content of SGDMA status register.
 */
alt_u8 alt_avalon_sgdma_do_sync_transfer(
  alt_sgdma_dev *dev,
  alt_sgdma_descriptor *desc)
{
   815bc:	defffc04 	addi	sp,sp,-16
   815c0:	df000315 	stw	fp,12(sp)
   815c4:	df000304 	addi	fp,sp,12
   815c8:	e13ffe15 	stw	r4,-8(fp)
   815cc:	e17fff15 	stw	r5,-4(fp)
  alt_u8 status;

  /* Wait for any pending transfers to complete */
  while ( (IORD_ALTERA_AVALON_SGDMA_STATUS(dev->base) &
   815d0:	e0bffe17 	ldw	r2,-8(fp)
   815d4:	10800317 	ldw	r2,12(r2)
   815d8:	10800037 	ldwio	r2,0(r2)
   815dc:	1080040c 	andi	r2,r2,16
   815e0:	1004c03a 	cmpne	r2,r2,zero
   815e4:	103ffa1e 	bne	r2,zero,815d0 <alt_avalon_sgdma_do_sync_transfer+0x14>
           ALTERA_AVALON_SGDMA_STATUS_BUSY_MSK) );


  /* Clear Run */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base,
   815e8:	e0bffe17 	ldw	r2,-8(fp)
   815ec:	10800317 	ldw	r2,12(r2)
   815f0:	11000404 	addi	r4,r2,16
   815f4:	e0bffe17 	ldw	r2,-8(fp)
   815f8:	10800317 	ldw	r2,12(r2)
   815fc:	10800404 	addi	r2,r2,16
   81600:	10c00037 	ldwio	r3,0(r2)
   81604:	00bff7c4 	movi	r2,-33
   81608:	1886703a 	and	r3,r3,r2
   8160c:	2005883a 	mov	r2,r4
   81610:	10c00035 	stwio	r3,0(r2)

  /*
   * Clear any (previous) status register information
   * that might occlude our error checking later.
   */
  IOWR_ALTERA_AVALON_SGDMA_STATUS(dev->base, 0xFF);
   81614:	e0bffe17 	ldw	r2,-8(fp)
   81618:	10800317 	ldw	r2,12(r2)
   8161c:	1007883a 	mov	r3,r2
   81620:	00803fc4 	movi	r2,255
   81624:	18800035 	stwio	r2,0(r3)

  /* Point the controller at the descriptor */
  IOWR_ALTERA_AVALON_SGDMA_NEXT_DESC_POINTER(dev->base, (alt_u32) desc);
   81628:	e0bffe17 	ldw	r2,-8(fp)
   8162c:	10800317 	ldw	r2,12(r2)
   81630:	10800804 	addi	r2,r2,32
   81634:	e0ffff17 	ldw	r3,-4(fp)
   81638:	10c00035 	stwio	r3,0(r2)
   * Set up SGDMA controller to:
   * - Disable interrupt generation
   * - Run once a valid descriptor is written to controller
   * - Stop on an error with any particular descriptor
   */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base,
   8163c:	e0bffe17 	ldw	r2,-8(fp)
   81640:	10800317 	ldw	r2,12(r2)
   81644:	11000404 	addi	r4,r2,16
   81648:	e0bffe17 	ldw	r2,-8(fp)
   8164c:	10800317 	ldw	r2,12(r2)
   81650:	10800404 	addi	r2,r2,16
   81654:	10800037 	ldwio	r2,0(r2)
   81658:	10c01814 	ori	r3,r2,96
   8165c:	2005883a 	mov	r2,r4
   81660:	10c00035 	stwio	r3,0(r2)
    (ALTERA_AVALON_SGDMA_CONTROL_RUN_MSK |
     ALTERA_AVALON_SGDMA_CONTROL_STOP_DMA_ER_MSK | 
     IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base)) );

  /* Wait for the descriptor (chain) to complete */
  while ( (IORD_ALTERA_AVALON_SGDMA_STATUS(dev->base) &
   81664:	e0bffe17 	ldw	r2,-8(fp)
   81668:	10800317 	ldw	r2,12(r2)
   8166c:	10800037 	ldwio	r2,0(r2)
   81670:	1080040c 	andi	r2,r2,16
   81674:	1004c03a 	cmpne	r2,r2,zero
   81678:	103ffa1e 	bne	r2,zero,81664 <alt_avalon_sgdma_do_sync_transfer+0xa8>
           ALTERA_AVALON_SGDMA_STATUS_BUSY_MSK) );

  /* Clear Run */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, 
   8167c:	e0bffe17 	ldw	r2,-8(fp)
   81680:	10800317 	ldw	r2,12(r2)
   81684:	11000404 	addi	r4,r2,16
   81688:	e0bffe17 	ldw	r2,-8(fp)
   8168c:	10800317 	ldw	r2,12(r2)
   81690:	10800404 	addi	r2,r2,16
   81694:	10c00037 	ldwio	r3,0(r2)
   81698:	00bff7c4 	movi	r2,-33
   8169c:	1886703a 	and	r3,r3,r2
   816a0:	2005883a 	mov	r2,r4
   816a4:	10c00035 	stwio	r3,0(r2)
    (IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base) &
     ~ALTERA_AVALON_SGDMA_CONTROL_RUN_MSK) );

  /* Get & clear status register contents */
  status = IORD_ALTERA_AVALON_SGDMA_STATUS(dev->base);
   816a8:	e0bffe17 	ldw	r2,-8(fp)
   816ac:	10800317 	ldw	r2,12(r2)
   816b0:	10800037 	ldwio	r2,0(r2)
   816b4:	e0bffd05 	stb	r2,-12(fp)
  IOWR_ALTERA_AVALON_SGDMA_STATUS(dev->base, 0xFF);
   816b8:	e0bffe17 	ldw	r2,-8(fp)
   816bc:	10800317 	ldw	r2,12(r2)
   816c0:	1007883a 	mov	r3,r2
   816c4:	00803fc4 	movi	r2,255
   816c8:	18800035 	stwio	r2,0(r3)

  return status;
   816cc:	e0bffd03 	ldbu	r2,-12(fp)
}
   816d0:	e037883a 	mov	sp,fp
   816d4:	df000017 	ldw	fp,0(sp)
   816d8:	dec00104 	addi	sp,sp,4
   816dc:	f800283a 	ret

000816e0 <alt_avalon_sgdma_construct_mem_to_mem_desc>:
  alt_u32              *read_addr,
  alt_u32              *write_addr,
  alt_u16               length,
  int                   read_fixed,
  int                   write_fixed)
{
   816e0:	defff404 	addi	sp,sp,-48
   816e4:	dfc00b15 	stw	ra,44(sp)
   816e8:	df000a15 	stw	fp,40(sp)
   816ec:	df000a04 	addi	fp,sp,40
   816f0:	e13ffb15 	stw	r4,-20(fp)
   816f4:	e17ffc15 	stw	r5,-16(fp)
   816f8:	e1bffd15 	stw	r6,-12(fp)
   816fc:	e1fffe15 	stw	r7,-8(fp)
   81700:	e0800217 	ldw	r2,8(fp)
   81704:	e0bfff0d 	sth	r2,-4(fp)
  alt_avalon_sgdma_construct_mem_to_mem_desc_burst(desc, next, read_addr, 
   81708:	e0bfff0b 	ldhu	r2,-4(fp)
   8170c:	d8800015 	stw	r2,0(sp)
   81710:	e0800317 	ldw	r2,12(fp)
   81714:	d8800115 	stw	r2,4(sp)
   81718:	e0800417 	ldw	r2,16(fp)
   8171c:	d8800215 	stw	r2,8(sp)
   81720:	d8000315 	stw	zero,12(sp)
   81724:	d8000415 	stw	zero,16(sp)
   81728:	e13ffb17 	ldw	r4,-20(fp)
   8172c:	e17ffc17 	ldw	r5,-16(fp)
   81730:	e1bffd17 	ldw	r6,-12(fp)
   81734:	e1fffe17 	ldw	r7,-8(fp)
   81738:	00817500 	call	81750 <alt_avalon_sgdma_construct_mem_to_mem_desc_burst>
    write_addr, length, read_fixed, write_fixed, 0, 0);
}
   8173c:	e037883a 	mov	sp,fp
   81740:	dfc00117 	ldw	ra,4(sp)
   81744:	df000017 	ldw	fp,0(sp)
   81748:	dec00204 	addi	sp,sp,8
   8174c:	f800283a 	ret

00081750 <alt_avalon_sgdma_construct_mem_to_mem_desc_burst>:
  alt_u16               length,
  int                   read_fixed,
  int                   write_fixed,
  int                   read_burst,
  int                   write_burst)
{
   81750:	defff204 	addi	sp,sp,-56
   81754:	dfc00d15 	stw	ra,52(sp)
   81758:	df000c15 	stw	fp,48(sp)
   8175c:	df000c04 	addi	fp,sp,48
   81760:	e13ffb15 	stw	r4,-20(fp)
   81764:	e17ffc15 	stw	r5,-16(fp)
   81768:	e1bffd15 	stw	r6,-12(fp)
   8176c:	e1fffe15 	stw	r7,-8(fp)
   81770:	e0800217 	ldw	r2,8(fp)
   81774:	e0bfff0d 	sth	r2,-4(fp)
  alt_avalon_sgdma_construct_descriptor_burst(
   81778:	e0bfff0b 	ldhu	r2,-4(fp)
   8177c:	d8800015 	stw	r2,0(sp)
   81780:	d8000115 	stw	zero,4(sp)
   81784:	e0800317 	ldw	r2,12(fp)
   81788:	d8800215 	stw	r2,8(sp)
   8178c:	e0800417 	ldw	r2,16(fp)
   81790:	d8800315 	stw	r2,12(sp)
   81794:	e0800517 	ldw	r2,20(fp)
   81798:	d8800415 	stw	r2,16(sp)
   8179c:	e0800617 	ldw	r2,24(fp)
   817a0:	d8800515 	stw	r2,20(sp)
   817a4:	d8000615 	stw	zero,24(sp)
   817a8:	e13ffb17 	ldw	r4,-20(fp)
   817ac:	e17ffc17 	ldw	r5,-16(fp)
   817b0:	e1bffd17 	ldw	r6,-12(fp)
   817b4:	e1fffe17 	ldw	r7,-8(fp)
   817b8:	0081d100 	call	81d10 <alt_avalon_sgdma_construct_descriptor_burst>
    read_fixed,
    write_fixed,
    read_burst,
    write_burst,
    (alt_u8) 0x0);  // Atlantic channel: N/A in mem-to-mem mode
}
   817bc:	e037883a 	mov	sp,fp
   817c0:	dfc00117 	ldw	ra,4(sp)
   817c4:	df000017 	ldw	fp,0(sp)
   817c8:	dec00204 	addi	sp,sp,8
   817cc:	f800283a 	ret

000817d0 <alt_avalon_sgdma_construct_stream_to_mem_desc>:
  alt_sgdma_descriptor *desc,
  alt_sgdma_descriptor *next,
  alt_u32              *write_addr,
  alt_u16               length_or_eop,
  int                   write_fixed)
{
   817d0:	defff804 	addi	sp,sp,-32
   817d4:	dfc00715 	stw	ra,28(sp)
   817d8:	df000615 	stw	fp,24(sp)
   817dc:	df000604 	addi	fp,sp,24
   817e0:	e13ffc15 	stw	r4,-16(fp)
   817e4:	e17ffd15 	stw	r5,-12(fp)
   817e8:	e1bffe15 	stw	r6,-8(fp)
   817ec:	e1ffff0d 	sth	r7,-4(fp)
  alt_avalon_sgdma_construct_stream_to_mem_desc_burst(desc, next, write_addr, 
   817f0:	e1ffff0b 	ldhu	r7,-4(fp)
   817f4:	e0800217 	ldw	r2,8(fp)
   817f8:	d8800015 	stw	r2,0(sp)
   817fc:	d8000115 	stw	zero,4(sp)
   81800:	e13ffc17 	ldw	r4,-16(fp)
   81804:	e17ffd17 	ldw	r5,-12(fp)
   81808:	e1bffe17 	ldw	r6,-8(fp)
   8180c:	00818240 	call	81824 <alt_avalon_sgdma_construct_stream_to_mem_desc_burst>
    length_or_eop, write_fixed, 0);
}
   81810:	e037883a 	mov	sp,fp
   81814:	dfc00117 	ldw	ra,4(sp)
   81818:	df000017 	ldw	fp,0(sp)
   8181c:	dec00204 	addi	sp,sp,8
   81820:	f800283a 	ret

00081824 <alt_avalon_sgdma_construct_stream_to_mem_desc_burst>:
  alt_sgdma_descriptor *next,
  alt_u32              *write_addr,
  alt_u16               length_or_eop,
  int                   write_fixed,
  int                   write_burst)
{
   81824:	defff304 	addi	sp,sp,-52
   81828:	dfc00c15 	stw	ra,48(sp)
   8182c:	df000b15 	stw	fp,44(sp)
   81830:	df000b04 	addi	fp,sp,44
   81834:	e13ffc15 	stw	r4,-16(fp)
   81838:	e17ffd15 	stw	r5,-12(fp)
   8183c:	e1bffe15 	stw	r6,-8(fp)
   81840:	e1ffff0d 	sth	r7,-4(fp)
  alt_avalon_sgdma_construct_descriptor_burst(
   81844:	e0bfff0b 	ldhu	r2,-4(fp)
   81848:	d8800015 	stw	r2,0(sp)
   8184c:	d8000115 	stw	zero,4(sp)
   81850:	d8000215 	stw	zero,8(sp)
   81854:	e0800217 	ldw	r2,8(fp)
   81858:	d8800315 	stw	r2,12(sp)
   8185c:	d8000415 	stw	zero,16(sp)
   81860:	e0800317 	ldw	r2,12(fp)
   81864:	d8800515 	stw	r2,20(sp)
   81868:	d8000615 	stw	zero,24(sp)
   8186c:	e13ffc17 	ldw	r4,-16(fp)
   81870:	e17ffd17 	ldw	r5,-12(fp)
   81874:	000d883a 	mov	r6,zero
   81878:	e1fffe17 	ldw	r7,-8(fp)
   8187c:	0081d100 	call	81d10 <alt_avalon_sgdma_construct_descriptor_burst>
    0x0,            // Read fixed: N/A in stream-to-mem mode
    write_fixed,
    0,              // Read_burst : N/A in stream-to-mem mode
    write_burst,
    (alt_u8) 0x0);  // Atlantic channel: N/A in stream-to-mem mode
}
   81880:	e037883a 	mov	sp,fp
   81884:	dfc00117 	ldw	ra,4(sp)
   81888:	df000017 	ldw	fp,0(sp)
   8188c:	dec00204 	addi	sp,sp,8
   81890:	f800283a 	ret

00081894 <alt_avalon_sgdma_construct_mem_to_stream_desc>:
  alt_u16               length,
  int                   read_fixed,
  int                   generate_sop,
  int                   generate_eop,
  alt_u8                atlantic_channel)
{
   81894:	defff404 	addi	sp,sp,-48
   81898:	dfc00b15 	stw	ra,44(sp)
   8189c:	df000a15 	stw	fp,40(sp)
   818a0:	df000a04 	addi	fp,sp,40
   818a4:	e13ffb15 	stw	r4,-20(fp)
   818a8:	e17ffc15 	stw	r5,-16(fp)
   818ac:	e1bffd15 	stw	r6,-12(fp)
   818b0:	e0800517 	ldw	r2,20(fp)
   818b4:	e1fffe0d 	sth	r7,-8(fp)
   818b8:	e0bfff05 	stb	r2,-4(fp)
  alt_avalon_sgdma_construct_mem_to_stream_desc_burst(desc, next, read_addr, 
   818bc:	e1fffe0b 	ldhu	r7,-8(fp)
   818c0:	e0ffff03 	ldbu	r3,-4(fp)
   818c4:	e0800217 	ldw	r2,8(fp)
   818c8:	d8800015 	stw	r2,0(sp)
   818cc:	e0800317 	ldw	r2,12(fp)
   818d0:	d8800115 	stw	r2,4(sp)
   818d4:	e0800417 	ldw	r2,16(fp)
   818d8:	d8800215 	stw	r2,8(sp)
   818dc:	d8000315 	stw	zero,12(sp)
   818e0:	d8c00415 	stw	r3,16(sp)
   818e4:	e13ffb17 	ldw	r4,-20(fp)
   818e8:	e17ffc17 	ldw	r5,-16(fp)
   818ec:	e1bffd17 	ldw	r6,-12(fp)
   818f0:	00819080 	call	81908 <alt_avalon_sgdma_construct_mem_to_stream_desc_burst>
    length, read_fixed, generate_sop, generate_eop, 0, atlantic_channel);

}
   818f4:	e037883a 	mov	sp,fp
   818f8:	dfc00117 	ldw	ra,4(sp)
   818fc:	df000017 	ldw	fp,0(sp)
   81900:	dec00204 	addi	sp,sp,8
   81904:	f800283a 	ret

00081908 <alt_avalon_sgdma_construct_mem_to_stream_desc_burst>:
  int                   read_fixed,
  int                   generate_sop,
  int                   generate_eop,
  int                   read_burst,
  alt_u8                atlantic_channel)
{
   81908:	defff204 	addi	sp,sp,-56
   8190c:	dfc00d15 	stw	ra,52(sp)
   81910:	df000c15 	stw	fp,48(sp)
   81914:	df000c04 	addi	fp,sp,48
   81918:	e13ffb15 	stw	r4,-20(fp)
   8191c:	e17ffc15 	stw	r5,-16(fp)
   81920:	e1bffd15 	stw	r6,-12(fp)
   81924:	e0800617 	ldw	r2,24(fp)
   81928:	e1fffe0d 	sth	r7,-8(fp)
   8192c:	e0bfff05 	stb	r2,-4(fp)
  alt_avalon_sgdma_construct_descriptor_burst(
   81930:	e0bffe0b 	ldhu	r2,-8(fp)
   81934:	e0ffff03 	ldbu	r3,-4(fp)
   81938:	d8800015 	stw	r2,0(sp)
   8193c:	e0800417 	ldw	r2,16(fp)
   81940:	d8800115 	stw	r2,4(sp)
   81944:	e0800217 	ldw	r2,8(fp)
   81948:	d8800215 	stw	r2,8(sp)
   8194c:	e0800317 	ldw	r2,12(fp)
   81950:	d8800315 	stw	r2,12(sp)
   81954:	e0800517 	ldw	r2,20(fp)
   81958:	d8800415 	stw	r2,16(sp)
   8195c:	d8000515 	stw	zero,20(sp)
   81960:	d8c00615 	stw	r3,24(sp)
   81964:	e13ffb17 	ldw	r4,-20(fp)
   81968:	e17ffc17 	ldw	r5,-16(fp)
   8196c:	e1bffd17 	ldw	r6,-12(fp)
   81970:	000f883a 	mov	r7,zero
   81974:	0081d100 	call	81d10 <alt_avalon_sgdma_construct_descriptor_burst>
    read_fixed,
    generate_sop,
    read_burst,
    0,                 // Write_burst : N/A in mem-to-stream mode
    atlantic_channel);
}
   81978:	e037883a 	mov	sp,fp
   8197c:	dfc00117 	ldw	ra,4(sp)
   81980:	df000017 	ldw	fp,0(sp)
   81984:	dec00204 	addi	sp,sp,8
   81988:	f800283a 	ret

0008198c <alt_avalon_sgdma_register_callback>:
void alt_avalon_sgdma_register_callback(
  alt_sgdma_dev *dev,
  alt_avalon_sgdma_callback callback,
  alt_u32 chain_control,
  void *context)
{
   8198c:	defffb04 	addi	sp,sp,-20
   81990:	df000415 	stw	fp,16(sp)
   81994:	df000404 	addi	fp,sp,16
   81998:	e13ffc15 	stw	r4,-16(fp)
   8199c:	e17ffd15 	stw	r5,-12(fp)
   819a0:	e1bffe15 	stw	r6,-8(fp)
   819a4:	e1ffff15 	stw	r7,-4(fp)
  dev->callback         = callback;
   819a8:	e0fffc17 	ldw	r3,-16(fp)
   819ac:	e0bffd17 	ldw	r2,-12(fp)
   819b0:	18800915 	stw	r2,36(r3)
  dev->callback_context = context;
   819b4:	e0fffc17 	ldw	r3,-16(fp)
   819b8:	e0bfff17 	ldw	r2,-4(fp)
   819bc:	18800a15 	stw	r2,40(r3)
  dev->chain_control    = chain_control;
   819c0:	e0fffc17 	ldw	r3,-16(fp)
   819c4:	e0bffe17 	ldw	r2,-8(fp)
   819c8:	18800b15 	stw	r2,44(r3)
}
   819cc:	e037883a 	mov	sp,fp
   819d0:	df000017 	ldw	fp,0(sp)
   819d4:	dec00104 	addi	sp,sp,4
   819d8:	f800283a 	ret

000819dc <alt_avalon_sgdma_start>:
 *
 * Arguments:
 * - *dev: Pointer to SGDMA device (instance) struct.
 */
void alt_avalon_sgdma_start(alt_sgdma_dev *dev)
{
   819dc:	defffd04 	addi	sp,sp,-12
   819e0:	df000215 	stw	fp,8(sp)
   819e4:	df000204 	addi	fp,sp,8
   819e8:	e13fff15 	stw	r4,-4(fp)
  alt_u32 control;

  control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
   819ec:	e0bfff17 	ldw	r2,-4(fp)
   819f0:	10800317 	ldw	r2,12(r2)
   819f4:	10800404 	addi	r2,r2,16
   819f8:	10800037 	ldwio	r2,0(r2)
   819fc:	e0bffe15 	stw	r2,-8(fp)
  control |= ALTERA_AVALON_SGDMA_CONTROL_RUN_MSK;
   81a00:	e0bffe17 	ldw	r2,-8(fp)
   81a04:	10800814 	ori	r2,r2,32
   81a08:	e0bffe15 	stw	r2,-8(fp)
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, control);
   81a0c:	e0bfff17 	ldw	r2,-4(fp)
   81a10:	10800317 	ldw	r2,12(r2)
   81a14:	10800404 	addi	r2,r2,16
   81a18:	e0fffe17 	ldw	r3,-8(fp)
   81a1c:	10c00035 	stwio	r3,0(r2)
}
   81a20:	e037883a 	mov	sp,fp
   81a24:	df000017 	ldw	fp,0(sp)
   81a28:	dec00104 	addi	sp,sp,4
   81a2c:	f800283a 	ret

00081a30 <alt_avalon_sgdma_stop>:
 *
 * Arguments:
 * - *dev: Pointer to SGDMA device (instance) struct
 */
void alt_avalon_sgdma_stop(alt_sgdma_dev *dev)
{
   81a30:	defffd04 	addi	sp,sp,-12
   81a34:	df000215 	stw	fp,8(sp)
   81a38:	df000204 	addi	fp,sp,8
   81a3c:	e13fff15 	stw	r4,-4(fp)
  alt_u32 control;

  control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
   81a40:	e0bfff17 	ldw	r2,-4(fp)
   81a44:	10800317 	ldw	r2,12(r2)
   81a48:	10800404 	addi	r2,r2,16
   81a4c:	10800037 	ldwio	r2,0(r2)
   81a50:	e0bffe15 	stw	r2,-8(fp)
  control &= ~ALTERA_AVALON_SGDMA_CONTROL_RUN_MSK;
   81a54:	e0fffe17 	ldw	r3,-8(fp)
   81a58:	00bff7c4 	movi	r2,-33
   81a5c:	1884703a 	and	r2,r3,r2
   81a60:	e0bffe15 	stw	r2,-8(fp)
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, control);
   81a64:	e0bfff17 	ldw	r2,-4(fp)
   81a68:	10800317 	ldw	r2,12(r2)
   81a6c:	10800404 	addi	r2,r2,16
   81a70:	e0fffe17 	ldw	r3,-8(fp)
   81a74:	10c00035 	stwio	r3,0(r2)
}
   81a78:	e037883a 	mov	sp,fp
   81a7c:	df000017 	ldw	fp,0(sp)
   81a80:	dec00104 	addi	sp,sp,4
   81a84:	f800283a 	ret

00081a88 <alt_avalon_sgdma_check_descriptor_status>:
 * - 0 if the descriptor is error-free, not "owned by hardware", or
 *   a previously requested transfer has appeared to have completed
 *   normally. Or, various error conditions defined in <errno.h>
 */
int alt_avalon_sgdma_check_descriptor_status(alt_sgdma_descriptor *desc)
{
   81a88:	defffd04 	addi	sp,sp,-12
   81a8c:	df000215 	stw	fp,8(sp)
   81a90:	df000204 	addi	fp,sp,8
   81a94:	e13ffe15 	stw	r4,-8(fp)
  /* Errors take precedence */
  if( IORD_8DIRECT(&desc->status, 0) &
   81a98:	e0bffe17 	ldw	r2,-8(fp)
   81a9c:	10800784 	addi	r2,r2,30
   81aa0:	10800023 	ldbuio	r2,0(r2)
   81aa4:	10801fcc 	andi	r2,r2,127
   81aa8:	1005003a 	cmpeq	r2,r2,zero
   81aac:	1000031e 	bne	r2,zero,81abc <alt_avalon_sgdma_check_descriptor_status+0x34>
        ALTERA_AVALON_SGDMA_DESCRIPTOR_STATUS_E_OVERFLOW_MSK |
        ALTERA_AVALON_SGDMA_DESCRIPTOR_STATUS_E_SYNC_MSK     |
        ALTERA_AVALON_SGDMA_DESCRIPTOR_STATUS_E_UEOP_MSK     |
        ALTERA_AVALON_SGDMA_DESCRIPTOR_STATUS_E_MEOP_MSK     |
        ALTERA_AVALON_SGDMA_DESCRIPTOR_STATUS_E_MSOP_MSK ) ) {
    return -EIO;
   81ab0:	00bffec4 	movi	r2,-5
   81ab4:	e0bfff15 	stw	r2,-4(fp)
   81ab8:	00000a06 	br	81ae4 <alt_avalon_sgdma_check_descriptor_status+0x5c>
  }

  if( IORD_8DIRECT(&desc->control, 0) &
   81abc:	e0bffe17 	ldw	r2,-8(fp)
   81ac0:	108007c4 	addi	r2,r2,31
   81ac4:	10800023 	ldbuio	r2,0(r2)
   81ac8:	1080200c 	andi	r2,r2,128
   81acc:	1005003a 	cmpeq	r2,r2,zero
   81ad0:	1000031e 	bne	r2,zero,81ae0 <alt_avalon_sgdma_check_descriptor_status+0x58>
      ALTERA_AVALON_SGDMA_DESCRIPTOR_CONTROL_OWNED_BY_HW_MSK) {
    return -EINPROGRESS;
   81ad4:	00bfe244 	movi	r2,-119
   81ad8:	e0bfff15 	stw	r2,-4(fp)
   81adc:	00000106 	br	81ae4 <alt_avalon_sgdma_check_descriptor_status+0x5c>
  }

    return 0;
   81ae0:	e03fff15 	stw	zero,-4(fp)
   81ae4:	e0bfff17 	ldw	r2,-4(fp)
}
   81ae8:	e037883a 	mov	sp,fp
   81aec:	df000017 	ldw	fp,0(sp)
   81af0:	dec00104 	addi	sp,sp,4
   81af4:	f800283a 	ret

00081af8 <alt_avalon_sgdma_open>:
 * Returns:
 * - Pointer to SGDMA device instance struct, or null if the device
 *   could not be opened.
 */
alt_sgdma_dev* alt_avalon_sgdma_open (const char* name)
{
   81af8:	defffc04 	addi	sp,sp,-16
   81afc:	dfc00315 	stw	ra,12(sp)
   81b00:	df000215 	stw	fp,8(sp)
   81b04:	df000204 	addi	fp,sp,8
   81b08:	e13fff15 	stw	r4,-4(fp)
  alt_sgdma_dev* dev;

  dev = (alt_sgdma_dev*) alt_find_dev (name, &alt_sgdma_list);
   81b0c:	e13fff17 	ldw	r4,-4(fp)
   81b10:	d1600004 	addi	r5,gp,-32768
   81b14:	00827380 	call	82738 <alt_find_dev>
   81b18:	e0bffe15 	stw	r2,-8(fp)

  if (NULL == dev) {
   81b1c:	e0bffe17 	ldw	r2,-8(fp)
   81b20:	1004c03a 	cmpne	r2,r2,zero
   81b24:	1000041e 	bne	r2,zero,81b38 <alt_avalon_sgdma_open+0x40>
    ALT_ERRNO = ENODEV;
   81b28:	0081b500 	call	81b50 <alt_get_errno>
   81b2c:	1007883a 	mov	r3,r2
   81b30:	008004c4 	movi	r2,19
   81b34:	18800015 	stw	r2,0(r3)
  }

  return dev;
   81b38:	e0bffe17 	ldw	r2,-8(fp)
}
   81b3c:	e037883a 	mov	sp,fp
   81b40:	dfc00117 	ldw	ra,4(sp)
   81b44:	df000017 	ldw	fp,0(sp)
   81b48:	dec00204 	addi	sp,sp,8
   81b4c:	f800283a 	ret

00081b50 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   81b50:	defffd04 	addi	sp,sp,-12
   81b54:	dfc00215 	stw	ra,8(sp)
   81b58:	df000115 	stw	fp,4(sp)
   81b5c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   81b60:	00800234 	movhi	r2,8
   81b64:	109fa604 	addi	r2,r2,32408
   81b68:	10800017 	ldw	r2,0(r2)
   81b6c:	1005003a 	cmpeq	r2,r2,zero
   81b70:	1000061e 	bne	r2,zero,81b8c <alt_get_errno+0x3c>
   81b74:	00800234 	movhi	r2,8
   81b78:	109fa604 	addi	r2,r2,32408
   81b7c:	10800017 	ldw	r2,0(r2)
   81b80:	103ee83a 	callr	r2
   81b84:	e0bfff15 	stw	r2,-4(fp)
   81b88:	00000306 	br	81b98 <alt_get_errno+0x48>
   81b8c:	00800274 	movhi	r2,9
   81b90:	10a76404 	addi	r2,r2,-25200
   81b94:	e0bfff15 	stw	r2,-4(fp)
   81b98:	e0bfff17 	ldw	r2,-4(fp)
}
   81b9c:	e037883a 	mov	sp,fp
   81ba0:	dfc00117 	ldw	ra,4(sp)
   81ba4:	df000017 	ldw	fp,0(sp)
   81ba8:	dec00204 	addi	sp,sp,8
   81bac:	f800283a 	ret

00081bb0 <alt_avalon_sgdma_construct_descriptor>:
  alt_u16               length_or_eop,
  int                   generate_eop,
  int                   read_fixed,
  int                   write_fixed_or_sop,
  alt_u8                atlantic_channel)
{
   81bb0:	defff104 	addi	sp,sp,-60
   81bb4:	dfc00e15 	stw	ra,56(sp)
   81bb8:	df000d15 	stw	fp,52(sp)
   81bbc:	df000d04 	addi	fp,sp,52
   81bc0:	e13ffa15 	stw	r4,-24(fp)
   81bc4:	e17ffb15 	stw	r5,-20(fp)
   81bc8:	e1bffc15 	stw	r6,-16(fp)
   81bcc:	e1fffd15 	stw	r7,-12(fp)
   81bd0:	e0800217 	ldw	r2,8(fp)
   81bd4:	e0c00617 	ldw	r3,24(fp)
   81bd8:	e0bffe0d 	sth	r2,-8(fp)
   81bdc:	e0ffff05 	stb	r3,-4(fp)
  alt_avalon_sgdma_construct_descriptor_burst(desc, next, read_addr, 
   81be0:	e0bffe0b 	ldhu	r2,-8(fp)
   81be4:	e0ffff03 	ldbu	r3,-4(fp)
   81be8:	d8800015 	stw	r2,0(sp)
   81bec:	e0800317 	ldw	r2,12(fp)
   81bf0:	d8800115 	stw	r2,4(sp)
   81bf4:	e0800417 	ldw	r2,16(fp)
   81bf8:	d8800215 	stw	r2,8(sp)
   81bfc:	e0800517 	ldw	r2,20(fp)
   81c00:	d8800315 	stw	r2,12(sp)
   81c04:	d8000415 	stw	zero,16(sp)
   81c08:	d8000515 	stw	zero,20(sp)
   81c0c:	d8c00615 	stw	r3,24(sp)
   81c10:	e13ffa17 	ldw	r4,-24(fp)
   81c14:	e17ffb17 	ldw	r5,-20(fp)
   81c18:	e1bffc17 	ldw	r6,-16(fp)
   81c1c:	e1fffd17 	ldw	r7,-12(fp)
   81c20:	0081d100 	call	81d10 <alt_avalon_sgdma_construct_descriptor_burst>
    write_addr, length_or_eop, generate_eop, read_fixed, write_fixed_or_sop, 
    0, 0, atlantic_channel);
}
   81c24:	e037883a 	mov	sp,fp
   81c28:	dfc00117 	ldw	ra,4(sp)
   81c2c:	df000017 	ldw	fp,0(sp)
   81c30:	dec00204 	addi	sp,sp,8
   81c34:	f800283a 	ret

00081c38 <alt_avalon_sgdma_enable_desc_poll>:
 *
 * Returns:
 * - None
 */
void alt_avalon_sgdma_enable_desc_poll(alt_sgdma_dev *dev, alt_u32 frequency)
{
   81c38:	defffc04 	addi	sp,sp,-16
   81c3c:	df000315 	stw	fp,12(sp)
   81c40:	df000304 	addi	fp,sp,12
   81c44:	e13ffe15 	stw	r4,-8(fp)
   81c48:	e17fff15 	stw	r5,-4(fp)
  alt_u32 control;

  control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
   81c4c:	e0bffe17 	ldw	r2,-8(fp)
   81c50:	10800317 	ldw	r2,12(r2)
   81c54:	10800404 	addi	r2,r2,16
   81c58:	10800037 	ldwio	r2,0(r2)
   81c5c:	e0bffd15 	stw	r2,-12(fp)
  /* Clear descriptor polling frequency */
  control &= ~ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_FREQ_MSK;
   81c60:	e0fffd17 	ldw	r3,-12(fp)
   81c64:	00a00434 	movhi	r2,32784
   81c68:	10bfffc4 	addi	r2,r2,-1
   81c6c:	1884703a 	and	r2,r3,r2
   81c70:	e0bffd15 	stw	r2,-12(fp)
  
  control |= ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_EN_MSK | 
   81c74:	e0bfff17 	ldw	r2,-4(fp)
   81c78:	1004953a 	slli	r2,r2,20
   81c7c:	10dffc2c 	andhi	r3,r2,32752
   81c80:	e0bffd17 	ldw	r2,-12(fp)
   81c84:	1884b03a 	or	r2,r3,r2
   81c88:	10800134 	orhi	r2,r2,4
   81c8c:	e0bffd15 	stw	r2,-12(fp)
            ((frequency << ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_FREQ_OFST) & 
            ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_FREQ_MSK);
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, control);
   81c90:	e0bffe17 	ldw	r2,-8(fp)
   81c94:	10800317 	ldw	r2,12(r2)
   81c98:	10800404 	addi	r2,r2,16
   81c9c:	e0fffd17 	ldw	r3,-12(fp)
   81ca0:	10c00035 	stwio	r3,0(r2)
  
  return;
}
   81ca4:	e037883a 	mov	sp,fp
   81ca8:	df000017 	ldw	fp,0(sp)
   81cac:	dec00104 	addi	sp,sp,4
   81cb0:	f800283a 	ret

00081cb4 <alt_avalon_sgdma_disable_desc_poll>:
 *
 * Returns:
 * - None
 */
void alt_avalon_sgdma_disable_desc_poll(alt_sgdma_dev *dev)
{
   81cb4:	defffd04 	addi	sp,sp,-12
   81cb8:	df000215 	stw	fp,8(sp)
   81cbc:	df000204 	addi	fp,sp,8
   81cc0:	e13fff15 	stw	r4,-4(fp)
  alt_u32 control;

  control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
   81cc4:	e0bfff17 	ldw	r2,-4(fp)
   81cc8:	10800317 	ldw	r2,12(r2)
   81ccc:	10800404 	addi	r2,r2,16
   81cd0:	10800037 	ldwio	r2,0(r2)
   81cd4:	e0bffe15 	stw	r2,-8(fp)
  control &= ~ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_EN_MSK;
   81cd8:	e0fffe17 	ldw	r3,-8(fp)
   81cdc:	00bfff34 	movhi	r2,65532
   81ce0:	10bfffc4 	addi	r2,r2,-1
   81ce4:	1884703a 	and	r2,r3,r2
   81ce8:	e0bffe15 	stw	r2,-8(fp)

  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, control);
   81cec:	e0bfff17 	ldw	r2,-4(fp)
   81cf0:	10800317 	ldw	r2,12(r2)
   81cf4:	10800404 	addi	r2,r2,16
   81cf8:	e0fffe17 	ldw	r3,-8(fp)
   81cfc:	10c00035 	stwio	r3,0(r2)
  
  return;
}
   81d00:	e037883a 	mov	sp,fp
   81d04:	df000017 	ldw	fp,0(sp)
   81d08:	dec00104 	addi	sp,sp,4
   81d0c:	f800283a 	ret

00081d10 <alt_avalon_sgdma_construct_descriptor_burst>:
  int                   read_fixed,
  int                   write_fixed_or_sop,
  int                   read_burst,
  int                   write_burst,
  alt_u8                atlantic_channel)
{
   81d10:	defff204 	addi	sp,sp,-56
   81d14:	dfc00d15 	stw	ra,52(sp)
   81d18:	df000c15 	stw	fp,48(sp)
   81d1c:	df000c04 	addi	fp,sp,48
   81d20:	e13ff415 	stw	r4,-48(fp)
   81d24:	e17ff515 	stw	r5,-44(fp)
   81d28:	e1bff615 	stw	r6,-40(fp)
   81d2c:	e1fff715 	stw	r7,-36(fp)
   81d30:	e0800217 	ldw	r2,8(fp)
   81d34:	e0c00817 	ldw	r3,32(fp)
   81d38:	e0bff80d 	sth	r2,-32(fp)
   81d3c:	e0fff905 	stb	r3,-28(fp)
   * The SGDMA controller from continuing to process the chain. This is
   * done as a single IO write to bypass cache, without flushing
   * the entire descriptor, since only the 8-bit descriptor status must
   * be flushed.
   */
  IOWR_8DIRECT(&next->control, 0,
   81d40:	e0bff517 	ldw	r2,-44(fp)
   81d44:	110007c4 	addi	r4,r2,31
   81d48:	e0bff517 	ldw	r2,-44(fp)
   81d4c:	108007c3 	ldbu	r2,31(r2)
   81d50:	10c03fcc 	andi	r3,r2,255
   81d54:	00bfdfc4 	movi	r2,-129
   81d58:	1886703a 	and	r3,r3,r2
   81d5c:	2005883a 	mov	r2,r4
   81d60:	10c00025 	stbio	r3,0(r2)
    (next->control & ~ALTERA_AVALON_SGDMA_DESCRIPTOR_CONTROL_OWNED_BY_HW_MSK));

  desc->read_addr                = read_addr;
   81d64:	e13ff417 	ldw	r4,-48(fp)
   81d68:	e0bff617 	ldw	r2,-40(fp)
   81d6c:	11403fcc 	andi	r5,r2,255
   81d70:	20800003 	ldbu	r2,0(r4)
   81d74:	1004703a 	and	r2,r2,zero
   81d78:	1007883a 	mov	r3,r2
   81d7c:	2805883a 	mov	r2,r5
   81d80:	1884b03a 	or	r2,r3,r2
   81d84:	20800005 	stb	r2,0(r4)
   81d88:	e0bff617 	ldw	r2,-40(fp)
   81d8c:	1004d23a 	srli	r2,r2,8
   81d90:	11403fcc 	andi	r5,r2,255
   81d94:	20800043 	ldbu	r2,1(r4)
   81d98:	1004703a 	and	r2,r2,zero
   81d9c:	1007883a 	mov	r3,r2
   81da0:	2805883a 	mov	r2,r5
   81da4:	1884b03a 	or	r2,r3,r2
   81da8:	20800045 	stb	r2,1(r4)
   81dac:	e0bff617 	ldw	r2,-40(fp)
   81db0:	1004d43a 	srli	r2,r2,16
   81db4:	11403fcc 	andi	r5,r2,255
   81db8:	20800083 	ldbu	r2,2(r4)
   81dbc:	1004703a 	and	r2,r2,zero
   81dc0:	1007883a 	mov	r3,r2
   81dc4:	2805883a 	mov	r2,r5
   81dc8:	1884b03a 	or	r2,r3,r2
   81dcc:	20800085 	stb	r2,2(r4)
   81dd0:	e0bff617 	ldw	r2,-40(fp)
   81dd4:	100ad63a 	srli	r5,r2,24
   81dd8:	208000c3 	ldbu	r2,3(r4)
   81ddc:	1004703a 	and	r2,r2,zero
   81de0:	1007883a 	mov	r3,r2
   81de4:	2805883a 	mov	r2,r5
   81de8:	1884b03a 	or	r2,r3,r2
   81dec:	208000c5 	stb	r2,3(r4)
  desc->write_addr               = write_addr;
   81df0:	e13ff417 	ldw	r4,-48(fp)
   81df4:	e0bff717 	ldw	r2,-36(fp)
   81df8:	11403fcc 	andi	r5,r2,255
   81dfc:	20800203 	ldbu	r2,8(r4)
   81e00:	1004703a 	and	r2,r2,zero
   81e04:	1007883a 	mov	r3,r2
   81e08:	2805883a 	mov	r2,r5
   81e0c:	1884b03a 	or	r2,r3,r2
   81e10:	20800205 	stb	r2,8(r4)
   81e14:	e0bff717 	ldw	r2,-36(fp)
   81e18:	1004d23a 	srli	r2,r2,8
   81e1c:	11403fcc 	andi	r5,r2,255
   81e20:	20800243 	ldbu	r2,9(r4)
   81e24:	1004703a 	and	r2,r2,zero
   81e28:	1007883a 	mov	r3,r2
   81e2c:	2805883a 	mov	r2,r5
   81e30:	1884b03a 	or	r2,r3,r2
   81e34:	20800245 	stb	r2,9(r4)
   81e38:	e0bff717 	ldw	r2,-36(fp)
   81e3c:	1004d43a 	srli	r2,r2,16
   81e40:	11403fcc 	andi	r5,r2,255
   81e44:	20800283 	ldbu	r2,10(r4)
   81e48:	1004703a 	and	r2,r2,zero
   81e4c:	1007883a 	mov	r3,r2
   81e50:	2805883a 	mov	r2,r5
   81e54:	1884b03a 	or	r2,r3,r2
   81e58:	20800285 	stb	r2,10(r4)
   81e5c:	e0bff717 	ldw	r2,-36(fp)
   81e60:	100ad63a 	srli	r5,r2,24
   81e64:	208002c3 	ldbu	r2,11(r4)
   81e68:	1004703a 	and	r2,r2,zero
   81e6c:	1007883a 	mov	r3,r2
   81e70:	2805883a 	mov	r2,r5
   81e74:	1884b03a 	or	r2,r3,r2
   81e78:	208002c5 	stb	r2,11(r4)
  desc->next                     = (alt_u32 *) next;
   81e7c:	e1bff517 	ldw	r6,-44(fp)
   81e80:	e13ff417 	ldw	r4,-48(fp)
   81e84:	31403fcc 	andi	r5,r6,255
   81e88:	20800403 	ldbu	r2,16(r4)
   81e8c:	1004703a 	and	r2,r2,zero
   81e90:	1007883a 	mov	r3,r2
   81e94:	2805883a 	mov	r2,r5
   81e98:	1884b03a 	or	r2,r3,r2
   81e9c:	20800405 	stb	r2,16(r4)
   81ea0:	3004d23a 	srli	r2,r6,8
   81ea4:	11403fcc 	andi	r5,r2,255
   81ea8:	20800443 	ldbu	r2,17(r4)
   81eac:	1004703a 	and	r2,r2,zero
   81eb0:	1007883a 	mov	r3,r2
   81eb4:	2805883a 	mov	r2,r5
   81eb8:	1884b03a 	or	r2,r3,r2
   81ebc:	20800445 	stb	r2,17(r4)
   81ec0:	3004d43a 	srli	r2,r6,16
   81ec4:	11403fcc 	andi	r5,r2,255
   81ec8:	20800483 	ldbu	r2,18(r4)
   81ecc:	1004703a 	and	r2,r2,zero
   81ed0:	1007883a 	mov	r3,r2
   81ed4:	2805883a 	mov	r2,r5
   81ed8:	1884b03a 	or	r2,r3,r2
   81edc:	20800485 	stb	r2,18(r4)
   81ee0:	300ad63a 	srli	r5,r6,24
   81ee4:	208004c3 	ldbu	r2,19(r4)
   81ee8:	1004703a 	and	r2,r2,zero
   81eec:	1007883a 	mov	r3,r2
   81ef0:	2805883a 	mov	r2,r5
   81ef4:	1884b03a 	or	r2,r3,r2
   81ef8:	208004c5 	stb	r2,19(r4)
  desc->read_addr_pad            = 0x0;
   81efc:	e0fff417 	ldw	r3,-48(fp)
   81f00:	18800103 	ldbu	r2,4(r3)
   81f04:	1004703a 	and	r2,r2,zero
   81f08:	18800105 	stb	r2,4(r3)
   81f0c:	18800143 	ldbu	r2,5(r3)
   81f10:	1004703a 	and	r2,r2,zero
   81f14:	18800145 	stb	r2,5(r3)
   81f18:	18800183 	ldbu	r2,6(r3)
   81f1c:	1004703a 	and	r2,r2,zero
   81f20:	18800185 	stb	r2,6(r3)
   81f24:	188001c3 	ldbu	r2,7(r3)
   81f28:	1004703a 	and	r2,r2,zero
   81f2c:	188001c5 	stb	r2,7(r3)
  desc->write_addr_pad           = 0x0;
   81f30:	e0fff417 	ldw	r3,-48(fp)
   81f34:	18800303 	ldbu	r2,12(r3)
   81f38:	1004703a 	and	r2,r2,zero
   81f3c:	18800305 	stb	r2,12(r3)
   81f40:	18800343 	ldbu	r2,13(r3)
   81f44:	1004703a 	and	r2,r2,zero
   81f48:	18800345 	stb	r2,13(r3)
   81f4c:	18800383 	ldbu	r2,14(r3)
   81f50:	1004703a 	and	r2,r2,zero
   81f54:	18800385 	stb	r2,14(r3)
   81f58:	188003c3 	ldbu	r2,15(r3)
   81f5c:	1004703a 	and	r2,r2,zero
   81f60:	188003c5 	stb	r2,15(r3)
  desc->next_pad                 = 0x0;
   81f64:	e0fff417 	ldw	r3,-48(fp)
   81f68:	18800503 	ldbu	r2,20(r3)
   81f6c:	1004703a 	and	r2,r2,zero
   81f70:	18800505 	stb	r2,20(r3)
   81f74:	18800543 	ldbu	r2,21(r3)
   81f78:	1004703a 	and	r2,r2,zero
   81f7c:	18800545 	stb	r2,21(r3)
   81f80:	18800583 	ldbu	r2,22(r3)
   81f84:	1004703a 	and	r2,r2,zero
   81f88:	18800585 	stb	r2,22(r3)
   81f8c:	188005c3 	ldbu	r2,23(r3)
   81f90:	1004703a 	and	r2,r2,zero
   81f94:	188005c5 	stb	r2,23(r3)
  desc->bytes_to_transfer        = length_or_eop;
   81f98:	e13ff417 	ldw	r4,-48(fp)
   81f9c:	e0bff80b 	ldhu	r2,-32(fp)
   81fa0:	11403fcc 	andi	r5,r2,255
   81fa4:	20800603 	ldbu	r2,24(r4)
   81fa8:	1004703a 	and	r2,r2,zero
   81fac:	1007883a 	mov	r3,r2
   81fb0:	2805883a 	mov	r2,r5
   81fb4:	1884b03a 	or	r2,r3,r2
   81fb8:	20800605 	stb	r2,24(r4)
   81fbc:	e0bff80b 	ldhu	r2,-32(fp)
   81fc0:	1004d23a 	srli	r2,r2,8
   81fc4:	117fffcc 	andi	r5,r2,65535
   81fc8:	20800643 	ldbu	r2,25(r4)
   81fcc:	1004703a 	and	r2,r2,zero
   81fd0:	1007883a 	mov	r3,r2
   81fd4:	2805883a 	mov	r2,r5
   81fd8:	1884b03a 	or	r2,r3,r2
   81fdc:	20800645 	stb	r2,25(r4)
  desc->actual_bytes_transferred = 0;
   81fe0:	e0fff417 	ldw	r3,-48(fp)
   81fe4:	18800703 	ldbu	r2,28(r3)
   81fe8:	1004703a 	and	r2,r2,zero
   81fec:	18800705 	stb	r2,28(r3)
   81ff0:	18800743 	ldbu	r2,29(r3)
   81ff4:	1004703a 	and	r2,r2,zero
   81ff8:	18800745 	stb	r2,29(r3)
  desc->status                   = 0x0;
   81ffc:	e0bff417 	ldw	r2,-48(fp)
   82000:	10000785 	stb	zero,30(r2)

  /* SGDMA burst not currently supported */
  desc->read_burst               = read_burst;
   82004:	e0800617 	ldw	r2,24(fp)
   82008:	1007883a 	mov	r3,r2
   8200c:	e0bff417 	ldw	r2,-48(fp)
   82010:	10c00685 	stb	r3,26(r2)
  desc->write_burst              = write_burst;
   82014:	e0800717 	ldw	r2,28(fp)
   82018:	1007883a 	mov	r3,r2
   8201c:	e0bff417 	ldw	r2,-48(fp)
   82020:	10c006c5 	stb	r3,27(r2)
   * Note that this step is performed after all other descriptor information
   * has been filled out so that, if the controller already happens to be
   * pointing at this descriptor, it will not run (via the "owned by hardware"
   * bit) until all other descriptor information has been set up.
   */
  desc->control = (
   82024:	e0800317 	ldw	r2,12(fp)
   82028:	1005003a 	cmpeq	r2,r2,zero
   8202c:	1000031e 	bne	r2,zero,8203c <alt_avalon_sgdma_construct_descriptor_burst+0x32c>
   82030:	00bfe044 	movi	r2,-127
   82034:	e0bfff05 	stb	r2,-4(fp)
   82038:	00000206 	br	82044 <alt_avalon_sgdma_construct_descriptor_burst+0x334>
   8203c:	00bfe004 	movi	r2,-128
   82040:	e0bfff05 	stb	r2,-4(fp)
   82044:	e0800417 	ldw	r2,16(fp)
   82048:	1005003a 	cmpeq	r2,r2,zero
   8204c:	1000031e 	bne	r2,zero,8205c <alt_avalon_sgdma_construct_descriptor_burst+0x34c>
   82050:	00800084 	movi	r2,2
   82054:	e0bffe05 	stb	r2,-8(fp)
   82058:	00000106 	br	82060 <alt_avalon_sgdma_construct_descriptor_burst+0x350>
   8205c:	e03ffe05 	stb	zero,-8(fp)
   82060:	e0ffff03 	ldbu	r3,-4(fp)
   82064:	e13ffe03 	ldbu	r4,-8(fp)
   82068:	1904b03a 	or	r2,r3,r4
   8206c:	e0bffd05 	stb	r2,-12(fp)
   82070:	e0800517 	ldw	r2,20(fp)
   82074:	1005003a 	cmpeq	r2,r2,zero
   82078:	1000031e 	bne	r2,zero,82088 <alt_avalon_sgdma_construct_descriptor_burst+0x378>
   8207c:	00800104 	movi	r2,4
   82080:	e0bffc05 	stb	r2,-16(fp)
   82084:	00000106 	br	8208c <alt_avalon_sgdma_construct_descriptor_burst+0x37c>
   82088:	e03ffc05 	stb	zero,-16(fp)
   8208c:	e0fffd03 	ldbu	r3,-12(fp)
   82090:	e13ffc03 	ldbu	r4,-16(fp)
   82094:	1904b03a 	or	r2,r3,r4
   82098:	e0bffb05 	stb	r2,-20(fp)
   8209c:	e0bff903 	ldbu	r2,-28(fp)
   820a0:	1005003a 	cmpeq	r2,r2,zero
   820a4:	1000051e 	bne	r2,zero,820bc <alt_avalon_sgdma_construct_descriptor_burst+0x3ac>
   820a8:	e0bff903 	ldbu	r2,-28(fp)
   820ac:	108003cc 	andi	r2,r2,15
   820b0:	100490fa 	slli	r2,r2,3
   820b4:	e0bffa05 	stb	r2,-24(fp)
   820b8:	00000106 	br	820c0 <alt_avalon_sgdma_construct_descriptor_burst+0x3b0>
   820bc:	e03ffa05 	stb	zero,-24(fp)
   820c0:	e0fffb03 	ldbu	r3,-20(fp)
   820c4:	e13ffa03 	ldbu	r4,-24(fp)
   820c8:	1904b03a 	or	r2,r3,r4
   820cc:	1007883a 	mov	r3,r2
   820d0:	e0bff417 	ldw	r2,-48(fp)
   820d4:	10c007c5 	stb	r3,31(r2)
  /*
   * Flush completed buffer out of cache. This is done rather than
   * individual cache-bypassed writes to take advantage of any
   * burst-capabilities in the memory we're writing to
   */
  alt_remap_uncached(desc, sizeof(alt_sgdma_descriptor));
   820d8:	e13ff417 	ldw	r4,-48(fp)
   820dc:	01400804 	movi	r5,32
   820e0:	0082f280 	call	82f28 <alt_remap_uncached>
}
   820e4:	e037883a 	mov	sp,fp
   820e8:	dfc00117 	ldw	ra,4(sp)
   820ec:	df000017 	ldw	fp,0(sp)
   820f0:	dec00204 	addi	sp,sp,8
   820f4:	f800283a 	ret

000820f8 <alt_avalon_sgdma_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_sgdma_irq(void *context)
#else
static void alt_avalon_sgdma_irq(void *context, alt_u32 id)
#endif
{
   820f8:	defff904 	addi	sp,sp,-28
   820fc:	dfc00615 	stw	ra,24(sp)
   82100:	df000515 	stw	fp,20(sp)
   82104:	df000504 	addi	fp,sp,20
   82108:	e13fff15 	stw	r4,-4(fp)
  alt_sgdma_dev *dev = (alt_sgdma_dev *) context;
   8210c:	e0bfff17 	ldw	r2,-4(fp)
   82110:	e0bffe15 	stw	r2,-8(fp)
   * Note: This is explicitly done before calling user interrupt-handling
   * code rather than after; if user ISR code initiates another SGDMA
   * transfer which completes quickly, reading the control register after
   * the callback routine may result in a lost interrupt.
   */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, 
   82114:	e0bffe17 	ldw	r2,-8(fp)
   82118:	10800317 	ldw	r2,12(r2)
   8211c:	11000404 	addi	r4,r2,16
   82120:	e0bffe17 	ldw	r2,-8(fp)
   82124:	10800317 	ldw	r2,12(r2)
   82128:	10800404 	addi	r2,r2,16
   8212c:	10800037 	ldwio	r2,0(r2)
   82130:	10a00034 	orhi	r2,r2,32768
   82134:	1007883a 	mov	r3,r2
   82138:	2005883a 	mov	r2,r4
   8213c:	10c00035 	stwio	r3,0(r2)
    IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base) | 0x80000000);
  
  /* Dummy read to ensure IRQ is negated before the ISR returns */
  IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
   82140:	e0bffe17 	ldw	r2,-8(fp)
   82144:	10800317 	ldw	r2,12(r2)
   82148:	10800404 	addi	r2,r2,16
   8214c:	10800037 	ldwio	r2,0(r2)
   * Other interrupts are explicitly disabled if callbacks
   * are registered because there is no guarantee that they are 
   * preemption-safe. This allows the driver to support 
   * interrupt preemption.
   */
  if(dev->callback) {
   82150:	e0bffe17 	ldw	r2,-8(fp)
   82154:	10800917 	ldw	r2,36(r2)
   82158:	1005003a 	cmpeq	r2,r2,zero
   8215c:	1000111e 	bne	r2,zero,821a4 <alt_avalon_sgdma_irq+0xac>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   82160:	0005303a 	rdctl	r2,status
   82164:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   82168:	e0fffc17 	ldw	r3,-16(fp)
   8216c:	00bfff84 	movi	r2,-2
   82170:	1884703a 	and	r2,r3,r2
   82174:	1001703a 	wrctl	status,r2
  
  return context;
   82178:	e0bffc17 	ldw	r2,-16(fp)
    cpu_sr = alt_irq_disable_all();
   8217c:	e0bffd15 	stw	r2,-12(fp)
    (dev->callback)(dev->callback_context);
   82180:	e0bffe17 	ldw	r2,-8(fp)
   82184:	10c00917 	ldw	r3,36(r2)
   82188:	e0bffe17 	ldw	r2,-8(fp)
   8218c:	11000a17 	ldw	r4,40(r2)
   82190:	183ee83a 	callr	r3
   82194:	e0bffd17 	ldw	r2,-12(fp)
   82198:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8219c:	e0bffb17 	ldw	r2,-20(fp)
   821a0:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(cpu_sr);
  }
}
   821a4:	e037883a 	mov	sp,fp
   821a8:	dfc00117 	ldw	ra,4(sp)
   821ac:	df000017 	ldw	fp,0(sp)
   821b0:	dec00204 	addi	sp,sp,8
   821b4:	f800283a 	ret

000821b8 <alt_avalon_sgdma_init>:
 * This routine disables interrupts, future descriptor processing,
 * registers a specific instance of the device with the HAL,
 * and installs an interrupt handler for the device.
 */
void alt_avalon_sgdma_init (alt_sgdma_dev *dev, alt_u32 ic_id, alt_u32 irq)
{
   821b8:	defffa04 	addi	sp,sp,-24
   821bc:	dfc00515 	stw	ra,20(sp)
   821c0:	df000415 	stw	fp,16(sp)
   821c4:	df000404 	addi	fp,sp,16
   821c8:	e13ffd15 	stw	r4,-12(fp)
   821cc:	e17ffe15 	stw	r5,-8(fp)
   821d0:	e1bfff15 	stw	r6,-4(fp)

  /* 
   * Halt any current transactions (reset the device)
   * SW reset is written twice per SGDMA documentation 
   */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base,
   821d4:	e0bffd17 	ldw	r2,-12(fp)
   821d8:	10800317 	ldw	r2,12(r2)
   821dc:	10800404 	addi	r2,r2,16
   821e0:	1007883a 	mov	r3,r2
   821e4:	00800074 	movhi	r2,1
   821e8:	18800035 	stwio	r2,0(r3)
    ALTERA_AVALON_SGDMA_CONTROL_SOFTWARERESET_MSK);
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base,
   821ec:	e0bffd17 	ldw	r2,-12(fp)
   821f0:	10800317 	ldw	r2,12(r2)
   821f4:	10800404 	addi	r2,r2,16
   821f8:	1007883a 	mov	r3,r2
   821fc:	00800074 	movhi	r2,1
   82200:	18800035 	stwio	r2,0(r3)

  /*
   * Disable interrupts, halt future descriptor processing,
   * and clear status register content
   */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, 0x0);
   82204:	e0bffd17 	ldw	r2,-12(fp)
   82208:	10800317 	ldw	r2,12(r2)
   8220c:	10800404 	addi	r2,r2,16
   82210:	10000035 	stwio	zero,0(r2)
  IOWR_ALTERA_AVALON_SGDMA_STATUS(dev->base, 0xFF);
   82214:	e0bffd17 	ldw	r2,-12(fp)
   82218:	10800317 	ldw	r2,12(r2)
   8221c:	1007883a 	mov	r3,r2
   82220:	00803fc4 	movi	r2,255
   82224:	18800035 	stwio	r2,0(r3)

  /* Register this instance of the SGDMA controller with HAL */
  alt_dev_llist_insert((alt_dev_llist*) dev, &alt_sgdma_list);
   82228:	e13ffd17 	ldw	r4,-12(fp)
   8222c:	d1600004 	addi	r5,gp,-32768
   82230:	008255c0 	call	8255c <alt_dev_llist_insert>

  /* Install IRQ handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(ic_id, irq, alt_avalon_sgdma_irq, dev, 0x0);
   82234:	d8000015 	stw	zero,0(sp)
   82238:	e13ffe17 	ldw	r4,-8(fp)
   8223c:	e17fff17 	ldw	r5,-4(fp)
   82240:	01800234 	movhi	r6,8
   82244:	31883e04 	addi	r6,r6,8440
   82248:	e1fffd17 	ldw	r7,-12(fp)
   8224c:	00827fc0 	call	827fc <alt_ic_isr_register>
#else
  alt_irq_register(irq, dev, alt_avalon_sgdma_irq);
#endif  
}
   82250:	e037883a 	mov	sp,fp
   82254:	dfc00117 	ldw	ra,4(sp)
   82258:	df000017 	ldw	fp,0(sp)
   8225c:	dec00204 	addi	sp,sp,8
   82260:	f800283a 	ret

00082264 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   82264:	defff404 	addi	sp,sp,-48
   82268:	df000b15 	stw	fp,44(sp)
   8226c:	df000b04 	addi	fp,sp,44
   82270:	e13ffb15 	stw	r4,-20(fp)
   82274:	e17ffc15 	stw	r5,-16(fp)
   82278:	e1bffd15 	stw	r6,-12(fp)
   8227c:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   82280:	e03ff915 	stw	zero,-28(fp)
   82284:	00800274 	movhi	r2,9
   82288:	10a76204 	addi	r2,r2,-25208
   8228c:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
   82290:	1005003a 	cmpeq	r2,r2,zero
   82294:	1000411e 	bne	r2,zero,8239c <alt_alarm_start+0x138>
  {
    if (alarm)
   82298:	e0bffb17 	ldw	r2,-20(fp)
   8229c:	1005003a 	cmpeq	r2,r2,zero
   822a0:	10003b1e 	bne	r2,zero,82390 <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
   822a4:	e0fffb17 	ldw	r3,-20(fp)
   822a8:	e0bffd17 	ldw	r2,-12(fp)
   822ac:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
   822b0:	e0fffb17 	ldw	r3,-20(fp)
   822b4:	e0bffe17 	ldw	r2,-8(fp)
   822b8:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   822bc:	0005303a 	rdctl	r2,status
   822c0:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   822c4:	e0fff817 	ldw	r3,-32(fp)
   822c8:	00bfff84 	movi	r2,-2
   822cc:	1884703a 	and	r2,r3,r2
   822d0:	1001703a 	wrctl	status,r2
  
  return context;
   822d4:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
   822d8:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   822dc:	00800274 	movhi	r2,9
   822e0:	10a76304 	addi	r2,r2,-25204
   822e4:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
   822e8:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   822ec:	e0fffc17 	ldw	r3,-16(fp)
   822f0:	e0bff917 	ldw	r2,-28(fp)
   822f4:	1885883a 	add	r2,r3,r2
   822f8:	10c00044 	addi	r3,r2,1
   822fc:	e0bffb17 	ldw	r2,-20(fp)
   82300:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   82304:	e0bffb17 	ldw	r2,-20(fp)
   82308:	10c00217 	ldw	r3,8(r2)
   8230c:	e0bff917 	ldw	r2,-28(fp)
   82310:	1880042e 	bgeu	r3,r2,82324 <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
   82314:	e0fffb17 	ldw	r3,-20(fp)
   82318:	00800044 	movi	r2,1
   8231c:	18800405 	stb	r2,16(r3)
   82320:	00000206 	br	8232c <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
   82324:	e0bffb17 	ldw	r2,-20(fp)
   82328:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   8232c:	e0fffb17 	ldw	r3,-20(fp)
   82330:	00800234 	movhi	r2,8
   82334:	109fa804 	addi	r2,r2,32416
   82338:	e0bff615 	stw	r2,-40(fp)
   8233c:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   82340:	e0fff717 	ldw	r3,-36(fp)
   82344:	e0bff617 	ldw	r2,-40(fp)
   82348:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
   8234c:	e0bff617 	ldw	r2,-40(fp)
   82350:	10c00017 	ldw	r3,0(r2)
   82354:	e0bff717 	ldw	r2,-36(fp)
   82358:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   8235c:	e0bff617 	ldw	r2,-40(fp)
   82360:	10c00017 	ldw	r3,0(r2)
   82364:	e0bff717 	ldw	r2,-36(fp)
   82368:	18800115 	stw	r2,4(r3)
  list->next           = entry;
   8236c:	e0fff617 	ldw	r3,-40(fp)
   82370:	e0bff717 	ldw	r2,-36(fp)
   82374:	18800015 	stw	r2,0(r3)
   82378:	e0bffa17 	ldw	r2,-24(fp)
   8237c:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   82380:	e0bff517 	ldw	r2,-44(fp)
   82384:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   82388:	e03fff15 	stw	zero,-4(fp)
   8238c:	00000506 	br	823a4 <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
   82390:	00bffa84 	movi	r2,-22
   82394:	e0bfff15 	stw	r2,-4(fp)
   82398:	00000206 	br	823a4 <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
   8239c:	00bfde84 	movi	r2,-134
   823a0:	e0bfff15 	stw	r2,-4(fp)
   823a4:	e0bfff17 	ldw	r2,-4(fp)
  }
}
   823a8:	e037883a 	mov	sp,fp
   823ac:	df000017 	ldw	fp,0(sp)
   823b0:	dec00104 	addi	sp,sp,4
   823b4:	f800283a 	ret

000823b8 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   823b8:	defff804 	addi	sp,sp,-32
   823bc:	dfc00715 	stw	ra,28(sp)
   823c0:	df000615 	stw	fp,24(sp)
   823c4:	df000604 	addi	fp,sp,24
   823c8:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   823cc:	e0bffc17 	ldw	r2,-16(fp)
   823d0:	1004803a 	cmplt	r2,r2,zero
   823d4:	1000081e 	bne	r2,zero,823f8 <close+0x40>
   823d8:	e0bffc17 	ldw	r2,-16(fp)
   823dc:	10800324 	muli	r2,r2,12
   823e0:	1007883a 	mov	r3,r2
   823e4:	00800234 	movhi	r2,8
   823e8:	109d3d04 	addi	r2,r2,29940
   823ec:	1887883a 	add	r3,r3,r2
   823f0:	e0ffff15 	stw	r3,-4(fp)
   823f4:	00000106 	br	823fc <close+0x44>
   823f8:	e03fff15 	stw	zero,-4(fp)
   823fc:	e0bfff17 	ldw	r2,-4(fp)
   82400:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
   82404:	e0bffb17 	ldw	r2,-20(fp)
   82408:	1005003a 	cmpeq	r2,r2,zero
   8240c:	10001d1e 	bne	r2,zero,82484 <close+0xcc>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   82410:	e0bffb17 	ldw	r2,-20(fp)
   82414:	10800017 	ldw	r2,0(r2)
   82418:	10800417 	ldw	r2,16(r2)
   8241c:	1005003a 	cmpeq	r2,r2,zero
   82420:	1000071e 	bne	r2,zero,82440 <close+0x88>
   82424:	e0bffb17 	ldw	r2,-20(fp)
   82428:	10800017 	ldw	r2,0(r2)
   8242c:	10800417 	ldw	r2,16(r2)
   82430:	e13ffb17 	ldw	r4,-20(fp)
   82434:	103ee83a 	callr	r2
   82438:	e0bffe15 	stw	r2,-8(fp)
   8243c:	00000106 	br	82444 <close+0x8c>
   82440:	e03ffe15 	stw	zero,-8(fp)
   82444:	e0bffe17 	ldw	r2,-8(fp)
   82448:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   8244c:	e13ffc17 	ldw	r4,-16(fp)
   82450:	0082ec80 	call	82ec8 <alt_release_fd>
    if (rval < 0)
   82454:	e0bffa17 	ldw	r2,-24(fp)
   82458:	1004403a 	cmpge	r2,r2,zero
   8245c:	1000071e 	bne	r2,zero,8247c <close+0xc4>
    {
      ALT_ERRNO = -rval;
   82460:	00824b40 	call	824b4 <alt_get_errno>
   82464:	e0fffa17 	ldw	r3,-24(fp)
   82468:	00c7c83a 	sub	r3,zero,r3
   8246c:	10c00015 	stw	r3,0(r2)
      return -1;
   82470:	00bfffc4 	movi	r2,-1
   82474:	e0bffd15 	stw	r2,-12(fp)
   82478:	00000806 	br	8249c <close+0xe4>
    }
    return 0;
   8247c:	e03ffd15 	stw	zero,-12(fp)
   82480:	00000606 	br	8249c <close+0xe4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   82484:	00824b40 	call	824b4 <alt_get_errno>
   82488:	1007883a 	mov	r3,r2
   8248c:	00801444 	movi	r2,81
   82490:	18800015 	stw	r2,0(r3)
    return -1;
   82494:	00bfffc4 	movi	r2,-1
   82498:	e0bffd15 	stw	r2,-12(fp)
   8249c:	e0bffd17 	ldw	r2,-12(fp)
  }
}
   824a0:	e037883a 	mov	sp,fp
   824a4:	dfc00117 	ldw	ra,4(sp)
   824a8:	df000017 	ldw	fp,0(sp)
   824ac:	dec00204 	addi	sp,sp,8
   824b0:	f800283a 	ret

000824b4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   824b4:	defffd04 	addi	sp,sp,-12
   824b8:	dfc00215 	stw	ra,8(sp)
   824bc:	df000115 	stw	fp,4(sp)
   824c0:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   824c4:	00800234 	movhi	r2,8
   824c8:	109fa604 	addi	r2,r2,32408
   824cc:	10800017 	ldw	r2,0(r2)
   824d0:	1005003a 	cmpeq	r2,r2,zero
   824d4:	1000061e 	bne	r2,zero,824f0 <alt_get_errno+0x3c>
   824d8:	00800234 	movhi	r2,8
   824dc:	109fa604 	addi	r2,r2,32408
   824e0:	10800017 	ldw	r2,0(r2)
   824e4:	103ee83a 	callr	r2
   824e8:	e0bfff15 	stw	r2,-4(fp)
   824ec:	00000306 	br	824fc <alt_get_errno+0x48>
   824f0:	00800274 	movhi	r2,9
   824f4:	10a76404 	addi	r2,r2,-25200
   824f8:	e0bfff15 	stw	r2,-4(fp)
   824fc:	e0bfff17 	ldw	r2,-4(fp)
}
   82500:	e037883a 	mov	sp,fp
   82504:	dfc00117 	ldw	ra,4(sp)
   82508:	df000017 	ldw	fp,0(sp)
   8250c:	dec00204 	addi	sp,sp,8
   82510:	f800283a 	ret

00082514 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   82514:	deffff04 	addi	sp,sp,-4
   82518:	df000015 	stw	fp,0(sp)
   8251c:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   82520:	e037883a 	mov	sp,fp
   82524:	df000017 	ldw	fp,0(sp)
   82528:	dec00104 	addi	sp,sp,4
   8252c:	f800283a 	ret

00082530 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   82530:	defffc04 	addi	sp,sp,-16
   82534:	df000315 	stw	fp,12(sp)
   82538:	df000304 	addi	fp,sp,12
   8253c:	e13ffd15 	stw	r4,-12(fp)
   82540:	e17ffe15 	stw	r5,-8(fp)
   82544:	e1bfff15 	stw	r6,-4(fp)
  return len;
   82548:	e0bfff17 	ldw	r2,-4(fp)
}
   8254c:	e037883a 	mov	sp,fp
   82550:	df000017 	ldw	fp,0(sp)
   82554:	dec00104 	addi	sp,sp,4
   82558:	f800283a 	ret

0008255c <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   8255c:	defff904 	addi	sp,sp,-28
   82560:	dfc00615 	stw	ra,24(sp)
   82564:	df000515 	stw	fp,20(sp)
   82568:	df000504 	addi	fp,sp,20
   8256c:	e13ffd15 	stw	r4,-12(fp)
   82570:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   82574:	e0bffd17 	ldw	r2,-12(fp)
   82578:	1005003a 	cmpeq	r2,r2,zero
   8257c:	1000041e 	bne	r2,zero,82590 <alt_dev_llist_insert+0x34>
   82580:	e0bffd17 	ldw	r2,-12(fp)
   82584:	10800217 	ldw	r2,8(r2)
   82588:	1004c03a 	cmpne	r2,r2,zero
   8258c:	1000071e 	bne	r2,zero,825ac <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
   82590:	00826100 	call	82610 <alt_get_errno>
   82594:	1007883a 	mov	r3,r2
   82598:	00800584 	movi	r2,22
   8259c:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   825a0:	00bffa84 	movi	r2,-22
   825a4:	e0bfff15 	stw	r2,-4(fp)
   825a8:	00001306 	br	825f8 <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   825ac:	e0fffd17 	ldw	r3,-12(fp)
   825b0:	e0bffe17 	ldw	r2,-8(fp)
   825b4:	e0bffb15 	stw	r2,-20(fp)
   825b8:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   825bc:	e0fffc17 	ldw	r3,-16(fp)
   825c0:	e0bffb17 	ldw	r2,-20(fp)
   825c4:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
   825c8:	e0bffb17 	ldw	r2,-20(fp)
   825cc:	10c00017 	ldw	r3,0(r2)
   825d0:	e0bffc17 	ldw	r2,-16(fp)
   825d4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   825d8:	e0bffb17 	ldw	r2,-20(fp)
   825dc:	10c00017 	ldw	r3,0(r2)
   825e0:	e0bffc17 	ldw	r2,-16(fp)
   825e4:	18800115 	stw	r2,4(r3)
  list->next           = entry;
   825e8:	e0fffb17 	ldw	r3,-20(fp)
   825ec:	e0bffc17 	ldw	r2,-16(fp)
   825f0:	18800015 	stw	r2,0(r3)

  return 0;  
   825f4:	e03fff15 	stw	zero,-4(fp)
   825f8:	e0bfff17 	ldw	r2,-4(fp)
}
   825fc:	e037883a 	mov	sp,fp
   82600:	dfc00117 	ldw	ra,4(sp)
   82604:	df000017 	ldw	fp,0(sp)
   82608:	dec00204 	addi	sp,sp,8
   8260c:	f800283a 	ret

00082610 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   82610:	defffd04 	addi	sp,sp,-12
   82614:	dfc00215 	stw	ra,8(sp)
   82618:	df000115 	stw	fp,4(sp)
   8261c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   82620:	00800234 	movhi	r2,8
   82624:	109fa604 	addi	r2,r2,32408
   82628:	10800017 	ldw	r2,0(r2)
   8262c:	1005003a 	cmpeq	r2,r2,zero
   82630:	1000061e 	bne	r2,zero,8264c <alt_get_errno+0x3c>
   82634:	00800234 	movhi	r2,8
   82638:	109fa604 	addi	r2,r2,32408
   8263c:	10800017 	ldw	r2,0(r2)
   82640:	103ee83a 	callr	r2
   82644:	e0bfff15 	stw	r2,-4(fp)
   82648:	00000306 	br	82658 <alt_get_errno+0x48>
   8264c:	00800274 	movhi	r2,9
   82650:	10a76404 	addi	r2,r2,-25200
   82654:	e0bfff15 	stw	r2,-4(fp)
   82658:	e0bfff17 	ldw	r2,-4(fp)
}
   8265c:	e037883a 	mov	sp,fp
   82660:	dfc00117 	ldw	ra,4(sp)
   82664:	df000017 	ldw	fp,0(sp)
   82668:	dec00204 	addi	sp,sp,8
   8266c:	f800283a 	ret

00082670 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   82670:	defffd04 	addi	sp,sp,-12
   82674:	dfc00215 	stw	ra,8(sp)
   82678:	df000115 	stw	fp,4(sp)
   8267c:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   82680:	00bfff04 	movi	r2,-4
   82684:	00c00234 	movhi	r3,8
   82688:	18d7a904 	addi	r3,r3,24228
   8268c:	1885883a 	add	r2,r3,r2
   82690:	e0bfff15 	stw	r2,-4(fp)
   82694:	00000606 	br	826b0 <_do_ctors+0x40>
        (*ctor) (); 
   82698:	e0bfff17 	ldw	r2,-4(fp)
   8269c:	10800017 	ldw	r2,0(r2)
   826a0:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   826a4:	e0bfff17 	ldw	r2,-4(fp)
   826a8:	10bfff04 	addi	r2,r2,-4
   826ac:	e0bfff15 	stw	r2,-4(fp)
   826b0:	e0ffff17 	ldw	r3,-4(fp)
   826b4:	00800234 	movhi	r2,8
   826b8:	1097a804 	addi	r2,r2,24224
   826bc:	18bff62e 	bgeu	r3,r2,82698 <_do_ctors+0x28>
        (*ctor) (); 
}
   826c0:	e037883a 	mov	sp,fp
   826c4:	dfc00117 	ldw	ra,4(sp)
   826c8:	df000017 	ldw	fp,0(sp)
   826cc:	dec00204 	addi	sp,sp,8
   826d0:	f800283a 	ret

000826d4 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   826d4:	defffd04 	addi	sp,sp,-12
   826d8:	dfc00215 	stw	ra,8(sp)
   826dc:	df000115 	stw	fp,4(sp)
   826e0:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   826e4:	00bfff04 	movi	r2,-4
   826e8:	00c00234 	movhi	r3,8
   826ec:	18d7a904 	addi	r3,r3,24228
   826f0:	1885883a 	add	r2,r3,r2
   826f4:	e0bfff15 	stw	r2,-4(fp)
   826f8:	00000606 	br	82714 <_do_dtors+0x40>
        (*dtor) (); 
   826fc:	e0bfff17 	ldw	r2,-4(fp)
   82700:	10800017 	ldw	r2,0(r2)
   82704:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   82708:	e0bfff17 	ldw	r2,-4(fp)
   8270c:	10bfff04 	addi	r2,r2,-4
   82710:	e0bfff15 	stw	r2,-4(fp)
   82714:	e0ffff17 	ldw	r3,-4(fp)
   82718:	00800234 	movhi	r2,8
   8271c:	1097a904 	addi	r2,r2,24228
   82720:	18bff62e 	bgeu	r3,r2,826fc <_do_dtors+0x28>
        (*dtor) (); 
}
   82724:	e037883a 	mov	sp,fp
   82728:	dfc00117 	ldw	ra,4(sp)
   8272c:	df000017 	ldw	fp,0(sp)
   82730:	dec00204 	addi	sp,sp,8
   82734:	f800283a 	ret

00082738 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   82738:	defff904 	addi	sp,sp,-28
   8273c:	dfc00615 	stw	ra,24(sp)
   82740:	df000515 	stw	fp,20(sp)
   82744:	df000504 	addi	fp,sp,20
   82748:	e13ffd15 	stw	r4,-12(fp)
   8274c:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
   82750:	e0bffe17 	ldw	r2,-8(fp)
   82754:	10800017 	ldw	r2,0(r2)
   82758:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   8275c:	e13ffd17 	ldw	r4,-12(fp)
   82760:	00837040 	call	83704 <strlen>
   82764:	10800044 	addi	r2,r2,1
   82768:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   8276c:	00000d06 	br	827a4 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   82770:	e0bffc17 	ldw	r2,-16(fp)
   82774:	11000217 	ldw	r4,8(r2)
   82778:	e1bffb17 	ldw	r6,-20(fp)
   8277c:	e17ffd17 	ldw	r5,-12(fp)
   82780:	00834040 	call	83404 <memcmp>
   82784:	1004c03a 	cmpne	r2,r2,zero
   82788:	1000031e 	bne	r2,zero,82798 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   8278c:	e0bffc17 	ldw	r2,-16(fp)
   82790:	e0bfff15 	stw	r2,-4(fp)
   82794:	00000706 	br	827b4 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   82798:	e0bffc17 	ldw	r2,-16(fp)
   8279c:	10800017 	ldw	r2,0(r2)
   827a0:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   827a4:	e0fffe17 	ldw	r3,-8(fp)
   827a8:	e0bffc17 	ldw	r2,-16(fp)
   827ac:	10fff01e 	bne	r2,r3,82770 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   827b0:	e03fff15 	stw	zero,-4(fp)
   827b4:	e0bfff17 	ldw	r2,-4(fp)
}
   827b8:	e037883a 	mov	sp,fp
   827bc:	dfc00117 	ldw	ra,4(sp)
   827c0:	df000017 	ldw	fp,0(sp)
   827c4:	dec00204 	addi	sp,sp,8
   827c8:	f800283a 	ret

000827cc <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   827cc:	defffe04 	addi	sp,sp,-8
   827d0:	dfc00115 	stw	ra,4(sp)
   827d4:	df000015 	stw	fp,0(sp)
   827d8:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
   827dc:	0009883a 	mov	r4,zero
   827e0:	01440004 	movi	r5,4096
   827e4:	00833280 	call	83328 <alt_icache_flush>
#endif
}
   827e8:	e037883a 	mov	sp,fp
   827ec:	dfc00117 	ldw	ra,4(sp)
   827f0:	df000017 	ldw	fp,0(sp)
   827f4:	dec00204 	addi	sp,sp,8
   827f8:	f800283a 	ret

000827fc <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   827fc:	defff904 	addi	sp,sp,-28
   82800:	dfc00615 	stw	ra,24(sp)
   82804:	df000515 	stw	fp,20(sp)
   82808:	df000504 	addi	fp,sp,20
   8280c:	e13ffc15 	stw	r4,-16(fp)
   82810:	e17ffd15 	stw	r5,-12(fp)
   82814:	e1bffe15 	stw	r6,-8(fp)
   82818:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   8281c:	e0800217 	ldw	r2,8(fp)
   82820:	d8800015 	stw	r2,0(sp)
   82824:	e13ffc17 	ldw	r4,-16(fp)
   82828:	e17ffd17 	ldw	r5,-12(fp)
   8282c:	e1bffe17 	ldw	r6,-8(fp)
   82830:	e1ffff17 	ldw	r7,-4(fp)
   82834:	00829d00 	call	829d0 <alt_iic_isr_register>
}  
   82838:	e037883a 	mov	sp,fp
   8283c:	dfc00117 	ldw	ra,4(sp)
   82840:	df000017 	ldw	fp,0(sp)
   82844:	dec00204 	addi	sp,sp,8
   82848:	f800283a 	ret

0008284c <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   8284c:	defff904 	addi	sp,sp,-28
   82850:	df000615 	stw	fp,24(sp)
   82854:	df000604 	addi	fp,sp,24
   82858:	e13ffe15 	stw	r4,-8(fp)
   8285c:	e17fff15 	stw	r5,-4(fp)
   82860:	e0bfff17 	ldw	r2,-4(fp)
   82864:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   82868:	0005303a 	rdctl	r2,status
   8286c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   82870:	e0fffb17 	ldw	r3,-20(fp)
   82874:	00bfff84 	movi	r2,-2
   82878:	1884703a 	and	r2,r3,r2
   8287c:	1001703a 	wrctl	status,r2
  
  return context;
   82880:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   82884:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
   82888:	e0fffc17 	ldw	r3,-16(fp)
   8288c:	00800044 	movi	r2,1
   82890:	10c4983a 	sll	r2,r2,r3
   82894:	1007883a 	mov	r3,r2
   82898:	00800274 	movhi	r2,9
   8289c:	10a76104 	addi	r2,r2,-25212
   828a0:	10800017 	ldw	r2,0(r2)
   828a4:	1886b03a 	or	r3,r3,r2
   828a8:	00800274 	movhi	r2,9
   828ac:	10a76104 	addi	r2,r2,-25212
   828b0:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   828b4:	00800274 	movhi	r2,9
   828b8:	10a76104 	addi	r2,r2,-25212
   828bc:	10800017 	ldw	r2,0(r2)
   828c0:	100170fa 	wrctl	ienable,r2
   828c4:	e0bffd17 	ldw	r2,-12(fp)
   828c8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   828cc:	e0bffa17 	ldw	r2,-24(fp)
   828d0:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   828d4:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
   828d8:	e037883a 	mov	sp,fp
   828dc:	df000017 	ldw	fp,0(sp)
   828e0:	dec00104 	addi	sp,sp,4
   828e4:	f800283a 	ret

000828e8 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   828e8:	defff904 	addi	sp,sp,-28
   828ec:	df000615 	stw	fp,24(sp)
   828f0:	df000604 	addi	fp,sp,24
   828f4:	e13ffe15 	stw	r4,-8(fp)
   828f8:	e17fff15 	stw	r5,-4(fp)
   828fc:	e0bfff17 	ldw	r2,-4(fp)
   82900:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   82904:	0005303a 	rdctl	r2,status
   82908:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8290c:	e0fffb17 	ldw	r3,-20(fp)
   82910:	00bfff84 	movi	r2,-2
   82914:	1884703a 	and	r2,r3,r2
   82918:	1001703a 	wrctl	status,r2
  
  return context;
   8291c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   82920:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active &= ~(1 << id);
   82924:	e0fffc17 	ldw	r3,-16(fp)
   82928:	00800044 	movi	r2,1
   8292c:	10c4983a 	sll	r2,r2,r3
   82930:	0084303a 	nor	r2,zero,r2
   82934:	1007883a 	mov	r3,r2
   82938:	00800274 	movhi	r2,9
   8293c:	10a76104 	addi	r2,r2,-25212
   82940:	10800017 	ldw	r2,0(r2)
   82944:	1886703a 	and	r3,r3,r2
   82948:	00800274 	movhi	r2,9
   8294c:	10a76104 	addi	r2,r2,-25212
   82950:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   82954:	00800274 	movhi	r2,9
   82958:	10a76104 	addi	r2,r2,-25212
   8295c:	10800017 	ldw	r2,0(r2)
   82960:	100170fa 	wrctl	ienable,r2
   82964:	e0bffd17 	ldw	r2,-12(fp)
   82968:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8296c:	e0bffa17 	ldw	r2,-24(fp)
   82970:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   82974:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
   82978:	e037883a 	mov	sp,fp
   8297c:	df000017 	ldw	fp,0(sp)
   82980:	dec00104 	addi	sp,sp,4
   82984:	f800283a 	ret

00082988 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   82988:	defffc04 	addi	sp,sp,-16
   8298c:	df000315 	stw	fp,12(sp)
   82990:	df000304 	addi	fp,sp,12
   82994:	e13ffe15 	stw	r4,-8(fp)
   82998:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   8299c:	000530fa 	rdctl	r2,ienable
   829a0:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   829a4:	e0ffff17 	ldw	r3,-4(fp)
   829a8:	00800044 	movi	r2,1
   829ac:	10c4983a 	sll	r2,r2,r3
   829b0:	1007883a 	mov	r3,r2
   829b4:	e0bffd17 	ldw	r2,-12(fp)
   829b8:	1884703a 	and	r2,r3,r2
   829bc:	1004c03a 	cmpne	r2,r2,zero
}
   829c0:	e037883a 	mov	sp,fp
   829c4:	df000017 	ldw	fp,0(sp)
   829c8:	dec00104 	addi	sp,sp,4
   829cc:	f800283a 	ret

000829d0 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   829d0:	defff404 	addi	sp,sp,-48
   829d4:	dfc00b15 	stw	ra,44(sp)
   829d8:	df000a15 	stw	fp,40(sp)
   829dc:	df000a04 	addi	fp,sp,40
   829e0:	e13ffb15 	stw	r4,-20(fp)
   829e4:	e17ffc15 	stw	r5,-16(fp)
   829e8:	e1bffd15 	stw	r6,-12(fp)
   829ec:	e1fffe15 	stw	r7,-8(fp)
  int rc = -EINVAL;  
   829f0:	00bffa84 	movi	r2,-22
   829f4:	e0bffa15 	stw	r2,-24(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   829f8:	e0bffc17 	ldw	r2,-16(fp)
   829fc:	e0bff915 	stw	r2,-28(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   82a00:	e0bff917 	ldw	r2,-28(fp)
   82a04:	10800808 	cmpgei	r2,r2,32
   82a08:	1000291e 	bne	r2,zero,82ab0 <alt_iic_isr_register+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   82a0c:	0005303a 	rdctl	r2,status
   82a10:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   82a14:	e0fff717 	ldw	r3,-36(fp)
   82a18:	00bfff84 	movi	r2,-2
   82a1c:	1884703a 	and	r2,r3,r2
   82a20:	1001703a 	wrctl	status,r2
  
  return context;
   82a24:	e0bff717 	ldw	r2,-36(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   82a28:	e0bff815 	stw	r2,-32(fp)

    alt_irq[id].handler = isr;
   82a2c:	e0bff917 	ldw	r2,-28(fp)
   82a30:	00c00274 	movhi	r3,9
   82a34:	18e87204 	addi	r3,r3,-24120
   82a38:	100490fa 	slli	r2,r2,3
   82a3c:	10c7883a 	add	r3,r2,r3
   82a40:	e0bffd17 	ldw	r2,-12(fp)
   82a44:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = isr_context;
   82a48:	e0bff917 	ldw	r2,-28(fp)
   82a4c:	00c00274 	movhi	r3,9
   82a50:	18e87204 	addi	r3,r3,-24120
   82a54:	100490fa 	slli	r2,r2,3
   82a58:	10c5883a 	add	r2,r2,r3
   82a5c:	10c00104 	addi	r3,r2,4
   82a60:	e0bffe17 	ldw	r2,-8(fp)
   82a64:	18800015 	stw	r2,0(r3)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   82a68:	e0bffd17 	ldw	r2,-12(fp)
   82a6c:	1005003a 	cmpeq	r2,r2,zero
   82a70:	1000051e 	bne	r2,zero,82a88 <alt_iic_isr_register+0xb8>
   82a74:	e17ff917 	ldw	r5,-28(fp)
   82a78:	e13ffb17 	ldw	r4,-20(fp)
   82a7c:	008284c0 	call	8284c <alt_ic_irq_enable>
   82a80:	e0bfff15 	stw	r2,-4(fp)
   82a84:	00000406 	br	82a98 <alt_iic_isr_register+0xc8>
   82a88:	e17ff917 	ldw	r5,-28(fp)
   82a8c:	e13ffb17 	ldw	r4,-20(fp)
   82a90:	00828e80 	call	828e8 <alt_ic_irq_disable>
   82a94:	e0bfff15 	stw	r2,-4(fp)
   82a98:	e0bfff17 	ldw	r2,-4(fp)
   82a9c:	e0bffa15 	stw	r2,-24(fp)
   82aa0:	e0bff817 	ldw	r2,-32(fp)
   82aa4:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   82aa8:	e0bff617 	ldw	r2,-40(fp)
   82aac:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   82ab0:	e0bffa17 	ldw	r2,-24(fp)
}
   82ab4:	e037883a 	mov	sp,fp
   82ab8:	dfc00117 	ldw	ra,4(sp)
   82abc:	df000017 	ldw	fp,0(sp)
   82ac0:	dec00204 	addi	sp,sp,8
   82ac4:	f800283a 	ret

00082ac8 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   82ac8:	defff904 	addi	sp,sp,-28
   82acc:	dfc00615 	stw	ra,24(sp)
   82ad0:	df000515 	stw	fp,20(sp)
   82ad4:	df000504 	addi	fp,sp,20
   82ad8:	e13ffc15 	stw	r4,-16(fp)
   82adc:	e17ffd15 	stw	r5,-12(fp)
   82ae0:	e1bffe15 	stw	r6,-8(fp)
   82ae4:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   82ae8:	e13ffd17 	ldw	r4,-12(fp)
   82aec:	e17ffe17 	ldw	r5,-8(fp)
   82af0:	e1bfff17 	ldw	r6,-4(fp)
   82af4:	0082ce00 	call	82ce0 <open>
   82af8:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   82afc:	e0bffb17 	ldw	r2,-20(fp)
   82b00:	1004803a 	cmplt	r2,r2,zero
   82b04:	10001c1e 	bne	r2,zero,82b78 <alt_open_fd+0xb0>
  {
    fd->dev      = alt_fd_list[old].dev;
   82b08:	e0bffb17 	ldw	r2,-20(fp)
   82b0c:	00c00234 	movhi	r3,8
   82b10:	18dd3d04 	addi	r3,r3,29940
   82b14:	10800324 	muli	r2,r2,12
   82b18:	10c5883a 	add	r2,r2,r3
   82b1c:	10c00017 	ldw	r3,0(r2)
   82b20:	e0bffc17 	ldw	r2,-16(fp)
   82b24:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   82b28:	e0bffb17 	ldw	r2,-20(fp)
   82b2c:	00c00234 	movhi	r3,8
   82b30:	18dd3d04 	addi	r3,r3,29940
   82b34:	10800324 	muli	r2,r2,12
   82b38:	10c5883a 	add	r2,r2,r3
   82b3c:	10800104 	addi	r2,r2,4
   82b40:	10c00017 	ldw	r3,0(r2)
   82b44:	e0bffc17 	ldw	r2,-16(fp)
   82b48:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   82b4c:	e0bffb17 	ldw	r2,-20(fp)
   82b50:	00c00234 	movhi	r3,8
   82b54:	18dd3d04 	addi	r3,r3,29940
   82b58:	10800324 	muli	r2,r2,12
   82b5c:	10c5883a 	add	r2,r2,r3
   82b60:	10800204 	addi	r2,r2,8
   82b64:	10c00017 	ldw	r3,0(r2)
   82b68:	e0bffc17 	ldw	r2,-16(fp)
   82b6c:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   82b70:	e13ffb17 	ldw	r4,-20(fp)
   82b74:	0082ec80 	call	82ec8 <alt_release_fd>
  }
} 
   82b78:	e037883a 	mov	sp,fp
   82b7c:	dfc00117 	ldw	ra,4(sp)
   82b80:	df000017 	ldw	fp,0(sp)
   82b84:	dec00204 	addi	sp,sp,8
   82b88:	f800283a 	ret

00082b8c <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   82b8c:	defffb04 	addi	sp,sp,-20
   82b90:	dfc00415 	stw	ra,16(sp)
   82b94:	df000315 	stw	fp,12(sp)
   82b98:	df000304 	addi	fp,sp,12
   82b9c:	e13ffd15 	stw	r4,-12(fp)
   82ba0:	e17ffe15 	stw	r5,-8(fp)
   82ba4:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   82ba8:	01000234 	movhi	r4,8
   82bac:	211d4004 	addi	r4,r4,29952
   82bb0:	e17ffd17 	ldw	r5,-12(fp)
   82bb4:	01800044 	movi	r6,1
   82bb8:	01c07fc4 	movi	r7,511
   82bbc:	0082ac80 	call	82ac8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   82bc0:	01000234 	movhi	r4,8
   82bc4:	211d3d04 	addi	r4,r4,29940
   82bc8:	e17ffe17 	ldw	r5,-8(fp)
   82bcc:	000d883a 	mov	r6,zero
   82bd0:	01c07fc4 	movi	r7,511
   82bd4:	0082ac80 	call	82ac8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   82bd8:	01000234 	movhi	r4,8
   82bdc:	211d4304 	addi	r4,r4,29964
   82be0:	e17fff17 	ldw	r5,-4(fp)
   82be4:	01800044 	movi	r6,1
   82be8:	01c07fc4 	movi	r7,511
   82bec:	0082ac80 	call	82ac8 <alt_open_fd>
}  
   82bf0:	e037883a 	mov	sp,fp
   82bf4:	dfc00117 	ldw	ra,4(sp)
   82bf8:	df000017 	ldw	fp,0(sp)
   82bfc:	dec00204 	addi	sp,sp,8
   82c00:	f800283a 	ret

00082c04 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   82c04:	defffc04 	addi	sp,sp,-16
   82c08:	df000315 	stw	fp,12(sp)
   82c0c:	df000304 	addi	fp,sp,12
   82c10:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   82c14:	e0bffe17 	ldw	r2,-8(fp)
   82c18:	10800217 	ldw	r2,8(r2)
   82c1c:	10d00034 	orhi	r3,r2,16384
   82c20:	e0bffe17 	ldw	r2,-8(fp)
   82c24:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   82c28:	e03ffd15 	stw	zero,-12(fp)
   82c2c:	00002006 	br	82cb0 <alt_file_locked+0xac>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   82c30:	e0bffd17 	ldw	r2,-12(fp)
   82c34:	00c00234 	movhi	r3,8
   82c38:	18dd3d04 	addi	r3,r3,29940
   82c3c:	10800324 	muli	r2,r2,12
   82c40:	10c5883a 	add	r2,r2,r3
   82c44:	10c00017 	ldw	r3,0(r2)
   82c48:	e0bffe17 	ldw	r2,-8(fp)
   82c4c:	10800017 	ldw	r2,0(r2)
   82c50:	1880141e 	bne	r3,r2,82ca4 <alt_file_locked+0xa0>
   82c54:	e0bffd17 	ldw	r2,-12(fp)
   82c58:	00c00234 	movhi	r3,8
   82c5c:	18dd3d04 	addi	r3,r3,29940
   82c60:	10800324 	muli	r2,r2,12
   82c64:	10c5883a 	add	r2,r2,r3
   82c68:	10800204 	addi	r2,r2,8
   82c6c:	10800017 	ldw	r2,0(r2)
   82c70:	1004403a 	cmpge	r2,r2,zero
   82c74:	10000b1e 	bne	r2,zero,82ca4 <alt_file_locked+0xa0>
   82c78:	e0bffd17 	ldw	r2,-12(fp)
   82c7c:	10800324 	muli	r2,r2,12
   82c80:	1007883a 	mov	r3,r2
   82c84:	00800234 	movhi	r2,8
   82c88:	109d3d04 	addi	r2,r2,29940
   82c8c:	1887883a 	add	r3,r3,r2
   82c90:	e0bffe17 	ldw	r2,-8(fp)
   82c94:	18800326 	beq	r3,r2,82ca4 <alt_file_locked+0xa0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   82c98:	00bffcc4 	movi	r2,-13
   82c9c:	e0bfff15 	stw	r2,-4(fp)
   82ca0:	00000a06 	br	82ccc <alt_file_locked+0xc8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   82ca4:	e0bffd17 	ldw	r2,-12(fp)
   82ca8:	10800044 	addi	r2,r2,1
   82cac:	e0bffd15 	stw	r2,-12(fp)
   82cb0:	00800234 	movhi	r2,8
   82cb4:	109fa504 	addi	r2,r2,32404
   82cb8:	10800017 	ldw	r2,0(r2)
   82cbc:	1007883a 	mov	r3,r2
   82cc0:	e0bffd17 	ldw	r2,-12(fp)
   82cc4:	18bfda2e 	bgeu	r3,r2,82c30 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   82cc8:	e03fff15 	stw	zero,-4(fp)
   82ccc:	e0bfff17 	ldw	r2,-4(fp)
}
   82cd0:	e037883a 	mov	sp,fp
   82cd4:	df000017 	ldw	fp,0(sp)
   82cd8:	dec00104 	addi	sp,sp,4
   82cdc:	f800283a 	ret

00082ce0 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   82ce0:	defff404 	addi	sp,sp,-48
   82ce4:	dfc00b15 	stw	ra,44(sp)
   82ce8:	df000a15 	stw	fp,40(sp)
   82cec:	df000a04 	addi	fp,sp,40
   82cf0:	e13ffb15 	stw	r4,-20(fp)
   82cf4:	e17ffc15 	stw	r5,-16(fp)
   82cf8:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   82cfc:	00bfffc4 	movi	r2,-1
   82d00:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
   82d04:	00bffb44 	movi	r2,-19
   82d08:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
   82d0c:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   82d10:	e13ffb17 	ldw	r4,-20(fp)
   82d14:	01400234 	movhi	r5,8
   82d18:	295fa304 	addi	r5,r5,32396
   82d1c:	00827380 	call	82738 <alt_find_dev>
   82d20:	e0bffa15 	stw	r2,-24(fp)
   82d24:	e0bffa17 	ldw	r2,-24(fp)
   82d28:	1004c03a 	cmpne	r2,r2,zero
   82d2c:	1000051e 	bne	r2,zero,82d44 <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   82d30:	e13ffb17 	ldw	r4,-20(fp)
   82d34:	00831500 	call	83150 <alt_find_file>
   82d38:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
   82d3c:	00800044 	movi	r2,1
   82d40:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   82d44:	e0bffa17 	ldw	r2,-24(fp)
   82d48:	1005003a 	cmpeq	r2,r2,zero
   82d4c:	1000301e 	bne	r2,zero,82e10 <open+0x130>
  {
    if ((index = alt_get_fd (dev)) < 0)
   82d50:	e13ffa17 	ldw	r4,-24(fp)
   82d54:	00832700 	call	83270 <alt_get_fd>
   82d58:	e0bff815 	stw	r2,-32(fp)
   82d5c:	e0bff817 	ldw	r2,-32(fp)
   82d60:	1004403a 	cmpge	r2,r2,zero
   82d64:	1000031e 	bne	r2,zero,82d74 <open+0x94>
    {
      status = index;
   82d68:	e0bff817 	ldw	r2,-32(fp)
   82d6c:	e0bff715 	stw	r2,-36(fp)
   82d70:	00002906 	br	82e18 <open+0x138>
    }
    else
    {
      fd = &alt_fd_list[index];
   82d74:	e0bff817 	ldw	r2,-32(fp)
   82d78:	10800324 	muli	r2,r2,12
   82d7c:	1007883a 	mov	r3,r2
   82d80:	00800234 	movhi	r2,8
   82d84:	109d3d04 	addi	r2,r2,29940
   82d88:	1885883a 	add	r2,r3,r2
   82d8c:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   82d90:	e0fffc17 	ldw	r3,-16(fp)
   82d94:	00900034 	movhi	r2,16384
   82d98:	10bfffc4 	addi	r2,r2,-1
   82d9c:	1886703a 	and	r3,r3,r2
   82da0:	e0bff917 	ldw	r2,-28(fp)
   82da4:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   82da8:	e0bff617 	ldw	r2,-40(fp)
   82dac:	1004c03a 	cmpne	r2,r2,zero
   82db0:	1000061e 	bne	r2,zero,82dcc <open+0xec>
   82db4:	e13ff917 	ldw	r4,-28(fp)
   82db8:	0082c040 	call	82c04 <alt_file_locked>
   82dbc:	e0bff715 	stw	r2,-36(fp)
   82dc0:	e0bff717 	ldw	r2,-36(fp)
   82dc4:	1004803a 	cmplt	r2,r2,zero
   82dc8:	1000131e 	bne	r2,zero,82e18 <open+0x138>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   82dcc:	e0bffa17 	ldw	r2,-24(fp)
   82dd0:	10800317 	ldw	r2,12(r2)
   82dd4:	1005003a 	cmpeq	r2,r2,zero
   82dd8:	1000091e 	bne	r2,zero,82e00 <open+0x120>
   82ddc:	e0bffa17 	ldw	r2,-24(fp)
   82de0:	10800317 	ldw	r2,12(r2)
   82de4:	e13ff917 	ldw	r4,-28(fp)
   82de8:	e17ffb17 	ldw	r5,-20(fp)
   82dec:	e1bffc17 	ldw	r6,-16(fp)
   82df0:	e1fffd17 	ldw	r7,-12(fp)
   82df4:	103ee83a 	callr	r2
   82df8:	e0bfff15 	stw	r2,-4(fp)
   82dfc:	00000106 	br	82e04 <open+0x124>
   82e00:	e03fff15 	stw	zero,-4(fp)
   82e04:	e0bfff17 	ldw	r2,-4(fp)
   82e08:	e0bff715 	stw	r2,-36(fp)
   82e0c:	00000206 	br	82e18 <open+0x138>
      }
    }
  }
  else
  {
    status = -ENODEV;
   82e10:	00bffb44 	movi	r2,-19
   82e14:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   82e18:	e0bff717 	ldw	r2,-36(fp)
   82e1c:	1004403a 	cmpge	r2,r2,zero
   82e20:	1000091e 	bne	r2,zero,82e48 <open+0x168>
  {
    alt_release_fd (index);  
   82e24:	e13ff817 	ldw	r4,-32(fp)
   82e28:	0082ec80 	call	82ec8 <alt_release_fd>
    ALT_ERRNO = -status;
   82e2c:	0082e680 	call	82e68 <alt_get_errno>
   82e30:	e0fff717 	ldw	r3,-36(fp)
   82e34:	00c7c83a 	sub	r3,zero,r3
   82e38:	10c00015 	stw	r3,0(r2)
    return -1;
   82e3c:	00bfffc4 	movi	r2,-1
   82e40:	e0bffe15 	stw	r2,-8(fp)
   82e44:	00000206 	br	82e50 <open+0x170>
  }
  
  /* return the reference upon success */

  return index;
   82e48:	e0bff817 	ldw	r2,-32(fp)
   82e4c:	e0bffe15 	stw	r2,-8(fp)
   82e50:	e0bffe17 	ldw	r2,-8(fp)
}
   82e54:	e037883a 	mov	sp,fp
   82e58:	dfc00117 	ldw	ra,4(sp)
   82e5c:	df000017 	ldw	fp,0(sp)
   82e60:	dec00204 	addi	sp,sp,8
   82e64:	f800283a 	ret

00082e68 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   82e68:	defffd04 	addi	sp,sp,-12
   82e6c:	dfc00215 	stw	ra,8(sp)
   82e70:	df000115 	stw	fp,4(sp)
   82e74:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   82e78:	00800234 	movhi	r2,8
   82e7c:	109fa604 	addi	r2,r2,32408
   82e80:	10800017 	ldw	r2,0(r2)
   82e84:	1005003a 	cmpeq	r2,r2,zero
   82e88:	1000061e 	bne	r2,zero,82ea4 <alt_get_errno+0x3c>
   82e8c:	00800234 	movhi	r2,8
   82e90:	109fa604 	addi	r2,r2,32408
   82e94:	10800017 	ldw	r2,0(r2)
   82e98:	103ee83a 	callr	r2
   82e9c:	e0bfff15 	stw	r2,-4(fp)
   82ea0:	00000306 	br	82eb0 <alt_get_errno+0x48>
   82ea4:	00800274 	movhi	r2,9
   82ea8:	10a76404 	addi	r2,r2,-25200
   82eac:	e0bfff15 	stw	r2,-4(fp)
   82eb0:	e0bfff17 	ldw	r2,-4(fp)
}
   82eb4:	e037883a 	mov	sp,fp
   82eb8:	dfc00117 	ldw	ra,4(sp)
   82ebc:	df000017 	ldw	fp,0(sp)
   82ec0:	dec00204 	addi	sp,sp,8
   82ec4:	f800283a 	ret

00082ec8 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   82ec8:	defffe04 	addi	sp,sp,-8
   82ecc:	df000115 	stw	fp,4(sp)
   82ed0:	df000104 	addi	fp,sp,4
   82ed4:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   82ed8:	e0bfff17 	ldw	r2,-4(fp)
   82edc:	108000d0 	cmplti	r2,r2,3
   82ee0:	10000d1e 	bne	r2,zero,82f18 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
   82ee4:	e0bfff17 	ldw	r2,-4(fp)
   82ee8:	00c00234 	movhi	r3,8
   82eec:	18dd3d04 	addi	r3,r3,29940
   82ef0:	10800324 	muli	r2,r2,12
   82ef4:	10c5883a 	add	r2,r2,r3
   82ef8:	10800204 	addi	r2,r2,8
   82efc:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   82f00:	e0bfff17 	ldw	r2,-4(fp)
   82f04:	00c00234 	movhi	r3,8
   82f08:	18dd3d04 	addi	r3,r3,29940
   82f0c:	10800324 	muli	r2,r2,12
   82f10:	10c5883a 	add	r2,r2,r3
   82f14:	10000015 	stw	zero,0(r2)
  }
}
   82f18:	e037883a 	mov	sp,fp
   82f1c:	df000017 	ldw	fp,0(sp)
   82f20:	dec00104 	addi	sp,sp,4
   82f24:	f800283a 	ret

00082f28 <alt_remap_uncached>:
 * Convert a pointer to a block of cached memory, into a block of
 * uncached memory.
 */

volatile void* alt_remap_uncached (void* ptr, alt_u32 len)
{
   82f28:	defffc04 	addi	sp,sp,-16
   82f2c:	dfc00315 	stw	ra,12(sp)
   82f30:	df000215 	stw	fp,8(sp)
   82f34:	df000204 	addi	fp,sp,8
   82f38:	e13ffe15 	stw	r4,-8(fp)
   82f3c:	e17fff15 	stw	r5,-4(fp)
  alt_dcache_flush (ptr, len);
   82f40:	e13ffe17 	ldw	r4,-8(fp)
   82f44:	e17fff17 	ldw	r5,-4(fp)
   82f48:	008312c0 	call	8312c <alt_dcache_flush>
  return (volatile void*) (((alt_u32) ptr) | BYPASS_DCACHE_MASK);
   82f4c:	e0bffe17 	ldw	r2,-8(fp)
   82f50:	10a00034 	orhi	r2,r2,32768
}
   82f54:	e037883a 	mov	sp,fp
   82f58:	dfc00117 	ldw	ra,4(sp)
   82f5c:	df000017 	ldw	fp,0(sp)
   82f60:	dec00204 	addi	sp,sp,8
   82f64:	f800283a 	ret

00082f68 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   82f68:	defffa04 	addi	sp,sp,-24
   82f6c:	df000515 	stw	fp,20(sp)
   82f70:	df000504 	addi	fp,sp,20
   82f74:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   82f78:	0005303a 	rdctl	r2,status
   82f7c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   82f80:	e0fffd17 	ldw	r3,-12(fp)
   82f84:	00bfff84 	movi	r2,-2
   82f88:	1884703a 	and	r2,r3,r2
   82f8c:	1001703a 	wrctl	status,r2
  
  return context;
   82f90:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   82f94:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
   82f98:	e0bfff17 	ldw	r2,-4(fp)
   82f9c:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   82fa0:	e0bffc17 	ldw	r2,-16(fp)
   82fa4:	10c00017 	ldw	r3,0(r2)
   82fa8:	e0bffc17 	ldw	r2,-16(fp)
   82fac:	10800117 	ldw	r2,4(r2)
   82fb0:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
   82fb4:	e0bffc17 	ldw	r2,-16(fp)
   82fb8:	10c00117 	ldw	r3,4(r2)
   82fbc:	e0bffc17 	ldw	r2,-16(fp)
   82fc0:	10800017 	ldw	r2,0(r2)
   82fc4:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   82fc8:	e0fffc17 	ldw	r3,-16(fp)
   82fcc:	e0bffc17 	ldw	r2,-16(fp)
   82fd0:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
   82fd4:	e0fffc17 	ldw	r3,-16(fp)
   82fd8:	e0bffc17 	ldw	r2,-16(fp)
   82fdc:	18800015 	stw	r2,0(r3)
   82fe0:	e0bffe17 	ldw	r2,-8(fp)
   82fe4:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   82fe8:	e0bffb17 	ldw	r2,-20(fp)
   82fec:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   82ff0:	e037883a 	mov	sp,fp
   82ff4:	df000017 	ldw	fp,0(sp)
   82ff8:	dec00104 	addi	sp,sp,4
   82ffc:	f800283a 	ret

00083000 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   83000:	defffb04 	addi	sp,sp,-20
   83004:	dfc00415 	stw	ra,16(sp)
   83008:	df000315 	stw	fp,12(sp)
   8300c:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   83010:	d0a00917 	ldw	r2,-32732(gp)
   83014:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   83018:	d0a7c417 	ldw	r2,-24816(gp)
   8301c:	10800044 	addi	r2,r2,1
   83020:	d0a7c415 	stw	r2,-24816(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   83024:	00003106 	br	830ec <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
   83028:	e0bffe17 	ldw	r2,-8(fp)
   8302c:	10800017 	ldw	r2,0(r2)
   83030:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   83034:	e0bffe17 	ldw	r2,-8(fp)
   83038:	10800403 	ldbu	r2,16(r2)
   8303c:	10803fcc 	andi	r2,r2,255
   83040:	1005003a 	cmpeq	r2,r2,zero
   83044:	1000051e 	bne	r2,zero,8305c <alt_tick+0x5c>
   83048:	d0a7c417 	ldw	r2,-24816(gp)
   8304c:	1004c03a 	cmpne	r2,r2,zero
   83050:	1000021e 	bne	r2,zero,8305c <alt_tick+0x5c>
    {
      alarm->rollover = 0;
   83054:	e0bffe17 	ldw	r2,-8(fp)
   83058:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   8305c:	e0bffe17 	ldw	r2,-8(fp)
   83060:	10c00217 	ldw	r3,8(r2)
   83064:	d0a7c417 	ldw	r2,-24816(gp)
   83068:	10c01e36 	bltu	r2,r3,830e4 <alt_tick+0xe4>
   8306c:	e0bffe17 	ldw	r2,-8(fp)
   83070:	10800403 	ldbu	r2,16(r2)
   83074:	10803fcc 	andi	r2,r2,255
   83078:	1004c03a 	cmpne	r2,r2,zero
   8307c:	1000191e 	bne	r2,zero,830e4 <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
   83080:	e0bffe17 	ldw	r2,-8(fp)
   83084:	10c00317 	ldw	r3,12(r2)
   83088:	e0bffe17 	ldw	r2,-8(fp)
   8308c:	11000517 	ldw	r4,20(r2)
   83090:	183ee83a 	callr	r3
   83094:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   83098:	e0bffd17 	ldw	r2,-12(fp)
   8309c:	1004c03a 	cmpne	r2,r2,zero
   830a0:	1000031e 	bne	r2,zero,830b0 <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
   830a4:	e13ffe17 	ldw	r4,-8(fp)
   830a8:	0082f680 	call	82f68 <alt_alarm_stop>
   830ac:	00000d06 	br	830e4 <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
   830b0:	e0bffe17 	ldw	r2,-8(fp)
   830b4:	10c00217 	ldw	r3,8(r2)
   830b8:	e0bffd17 	ldw	r2,-12(fp)
   830bc:	1887883a 	add	r3,r3,r2
   830c0:	e0bffe17 	ldw	r2,-8(fp)
   830c4:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   830c8:	e0bffe17 	ldw	r2,-8(fp)
   830cc:	10c00217 	ldw	r3,8(r2)
   830d0:	d0a7c417 	ldw	r2,-24816(gp)
   830d4:	1880032e 	bgeu	r3,r2,830e4 <alt_tick+0xe4>
        {
          alarm->rollover = 1;
   830d8:	e0fffe17 	ldw	r3,-8(fp)
   830dc:	00800044 	movi	r2,1
   830e0:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
   830e4:	e0bfff17 	ldw	r2,-4(fp)
   830e8:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   830ec:	d0e00904 	addi	r3,gp,-32732
   830f0:	e0bffe17 	ldw	r2,-8(fp)
   830f4:	10ffcc1e 	bne	r2,r3,83028 <alt_tick+0x28>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
   830f8:	e037883a 	mov	sp,fp
   830fc:	dfc00117 	ldw	ra,4(sp)
   83100:	df000017 	ldw	fp,0(sp)
   83104:	dec00204 	addi	sp,sp,8
   83108:	f800283a 	ret

0008310c <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
   8310c:	deffff04 	addi	sp,sp,-4
   83110:	df000015 	stw	fp,0(sp)
   83114:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   83118:	000170fa 	wrctl	ienable,zero
}
   8311c:	e037883a 	mov	sp,fp
   83120:	df000017 	ldw	fp,0(sp)
   83124:	dec00104 	addi	sp,sp,4
   83128:	f800283a 	ret

0008312c <alt_dcache_flush>:
 *
 * Any dirty lines in the data cache are written back to memory.
 */

void alt_dcache_flush (void* start, alt_u32 len)
{
   8312c:	defffd04 	addi	sp,sp,-12
   83130:	df000215 	stw	fp,8(sp)
   83134:	df000204 	addi	fp,sp,8
   83138:	e13ffe15 	stw	r4,-8(fp)
   8313c:	e17fff15 	stw	r5,-4(fp)
  {
    ALT_FLUSH_DATA(i);
  }

#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   83140:	e037883a 	mov	sp,fp
   83144:	df000017 	ldw	fp,0(sp)
   83148:	dec00104 	addi	sp,sp,4
   8314c:	f800283a 	ret

00083150 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   83150:	defffa04 	addi	sp,sp,-24
   83154:	dfc00515 	stw	ra,20(sp)
   83158:	df000415 	stw	fp,16(sp)
   8315c:	df000404 	addi	fp,sp,16
   83160:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   83164:	00800234 	movhi	r2,8
   83168:	109fa104 	addi	r2,r2,32388
   8316c:	10800017 	ldw	r2,0(r2)
   83170:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   83174:	00003306 	br	83244 <alt_find_file+0xf4>
  {
    len = strlen(next->name);
   83178:	e0bffd17 	ldw	r2,-12(fp)
   8317c:	11000217 	ldw	r4,8(r2)
   83180:	00837040 	call	83704 <strlen>
   83184:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
   83188:	e0bffd17 	ldw	r2,-12(fp)
   8318c:	10c00217 	ldw	r3,8(r2)
   83190:	e0bffc17 	ldw	r2,-16(fp)
   83194:	1885883a 	add	r2,r3,r2
   83198:	10bfffc4 	addi	r2,r2,-1
   8319c:	10800003 	ldbu	r2,0(r2)
   831a0:	10803fcc 	andi	r2,r2,255
   831a4:	1080201c 	xori	r2,r2,128
   831a8:	10bfe004 	addi	r2,r2,-128
   831ac:	10800bd8 	cmpnei	r2,r2,47
   831b0:	1000031e 	bne	r2,zero,831c0 <alt_find_file+0x70>
    {
      len -= 1;
   831b4:	e0bffc17 	ldw	r2,-16(fp)
   831b8:	10bfffc4 	addi	r2,r2,-1
   831bc:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   831c0:	e0bffc17 	ldw	r2,-16(fp)
   831c4:	1007883a 	mov	r3,r2
   831c8:	e0bffe17 	ldw	r2,-8(fp)
   831cc:	1885883a 	add	r2,r3,r2
   831d0:	10800003 	ldbu	r2,0(r2)
   831d4:	10803fcc 	andi	r2,r2,255
   831d8:	1080201c 	xori	r2,r2,128
   831dc:	10bfe004 	addi	r2,r2,-128
   831e0:	10800be0 	cmpeqi	r2,r2,47
   831e4:	10000a1e 	bne	r2,zero,83210 <alt_find_file+0xc0>
   831e8:	e0bffc17 	ldw	r2,-16(fp)
   831ec:	1007883a 	mov	r3,r2
   831f0:	e0bffe17 	ldw	r2,-8(fp)
   831f4:	1885883a 	add	r2,r3,r2
   831f8:	10800003 	ldbu	r2,0(r2)
   831fc:	10803fcc 	andi	r2,r2,255
   83200:	1080201c 	xori	r2,r2,128
   83204:	10bfe004 	addi	r2,r2,-128
   83208:	1004c03a 	cmpne	r2,r2,zero
   8320c:	10000a1e 	bne	r2,zero,83238 <alt_find_file+0xe8>
   83210:	e0bffd17 	ldw	r2,-12(fp)
   83214:	11000217 	ldw	r4,8(r2)
   83218:	e1bffc17 	ldw	r6,-16(fp)
   8321c:	e17ffe17 	ldw	r5,-8(fp)
   83220:	00834040 	call	83404 <memcmp>
   83224:	1004c03a 	cmpne	r2,r2,zero
   83228:	1000031e 	bne	r2,zero,83238 <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   8322c:	e0bffd17 	ldw	r2,-12(fp)
   83230:	e0bfff15 	stw	r2,-4(fp)
   83234:	00000806 	br	83258 <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
   83238:	e0bffd17 	ldw	r2,-12(fp)
   8323c:	10800017 	ldw	r2,0(r2)
   83240:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   83244:	00c00234 	movhi	r3,8
   83248:	18dfa104 	addi	r3,r3,32388
   8324c:	e0bffd17 	ldw	r2,-12(fp)
   83250:	10ffc91e 	bne	r2,r3,83178 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   83254:	e03fff15 	stw	zero,-4(fp)
   83258:	e0bfff17 	ldw	r2,-4(fp)
}
   8325c:	e037883a 	mov	sp,fp
   83260:	dfc00117 	ldw	ra,4(sp)
   83264:	df000017 	ldw	fp,0(sp)
   83268:	dec00204 	addi	sp,sp,8
   8326c:	f800283a 	ret

00083270 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   83270:	defffc04 	addi	sp,sp,-16
   83274:	df000315 	stw	fp,12(sp)
   83278:	df000304 	addi	fp,sp,12
   8327c:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   83280:	00bffa04 	movi	r2,-24
   83284:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   83288:	e03ffe15 	stw	zero,-8(fp)
   8328c:	00001e06 	br	83308 <alt_get_fd+0x98>
  {
    if (!alt_fd_list[i].dev)
   83290:	e0bffe17 	ldw	r2,-8(fp)
   83294:	00c00234 	movhi	r3,8
   83298:	18dd3d04 	addi	r3,r3,29940
   8329c:	10800324 	muli	r2,r2,12
   832a0:	10c5883a 	add	r2,r2,r3
   832a4:	10800017 	ldw	r2,0(r2)
   832a8:	1004c03a 	cmpne	r2,r2,zero
   832ac:	1000131e 	bne	r2,zero,832fc <alt_get_fd+0x8c>
    {
      alt_fd_list[i].dev = dev;
   832b0:	e0bffe17 	ldw	r2,-8(fp)
   832b4:	00c00234 	movhi	r3,8
   832b8:	18dd3d04 	addi	r3,r3,29940
   832bc:	10800324 	muli	r2,r2,12
   832c0:	10c7883a 	add	r3,r2,r3
   832c4:	e0bfff17 	ldw	r2,-4(fp)
   832c8:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
   832cc:	00800234 	movhi	r2,8
   832d0:	109fa504 	addi	r2,r2,32404
   832d4:	10c00017 	ldw	r3,0(r2)
   832d8:	e0bffe17 	ldw	r2,-8(fp)
   832dc:	1880040e 	bge	r3,r2,832f0 <alt_get_fd+0x80>
      {
        alt_max_fd = i;
   832e0:	00c00234 	movhi	r3,8
   832e4:	18dfa504 	addi	r3,r3,32404
   832e8:	e0bffe17 	ldw	r2,-8(fp)
   832ec:	18800015 	stw	r2,0(r3)
      }
      rc = i;
   832f0:	e0bffe17 	ldw	r2,-8(fp)
   832f4:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
   832f8:	00000606 	br	83314 <alt_get_fd+0xa4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   832fc:	e0bffe17 	ldw	r2,-8(fp)
   83300:	10800044 	addi	r2,r2,1
   83304:	e0bffe15 	stw	r2,-8(fp)
   83308:	e0bffe17 	ldw	r2,-8(fp)
   8330c:	10800810 	cmplti	r2,r2,32
   83310:	103fdf1e 	bne	r2,zero,83290 <alt_get_fd+0x20>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   83314:	e0bffd17 	ldw	r2,-12(fp)
}
   83318:	e037883a 	mov	sp,fp
   8331c:	df000017 	ldw	fp,0(sp)
   83320:	dec00104 	addi	sp,sp,4
   83324:	f800283a 	ret

00083328 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
   83328:	defffb04 	addi	sp,sp,-20
   8332c:	df000415 	stw	fp,16(sp)
   83330:	df000404 	addi	fp,sp,16
   83334:	e13ffe15 	stw	r4,-8(fp)
   83338:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
   8333c:	e0bfff17 	ldw	r2,-4(fp)
   83340:	10840070 	cmpltui	r2,r2,4097
   83344:	1000021e 	bne	r2,zero,83350 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
   83348:	00840004 	movi	r2,4096
   8334c:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
   83350:	e0fffe17 	ldw	r3,-8(fp)
   83354:	e0bfff17 	ldw	r2,-4(fp)
   83358:	1885883a 	add	r2,r3,r2
   8335c:	e0bffc15 	stw	r2,-16(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   83360:	e0bffe17 	ldw	r2,-8(fp)
   83364:	e0bffd15 	stw	r2,-12(fp)
   83368:	00000506 	br	83380 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   8336c:	e0bffd17 	ldw	r2,-12(fp)
   83370:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   83374:	e0bffd17 	ldw	r2,-12(fp)
   83378:	10800804 	addi	r2,r2,32
   8337c:	e0bffd15 	stw	r2,-12(fp)
   83380:	e0fffd17 	ldw	r3,-12(fp)
   83384:	e0bffc17 	ldw	r2,-16(fp)
   83388:	18bff836 	bltu	r3,r2,8336c <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   8338c:	e0bffe17 	ldw	r2,-8(fp)
   83390:	108007cc 	andi	r2,r2,31
   83394:	1005003a 	cmpeq	r2,r2,zero
   83398:	1000021e 	bne	r2,zero,833a4 <alt_icache_flush+0x7c>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   8339c:	e0bffd17 	ldw	r2,-12(fp)
   833a0:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   833a4:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
   833a8:	e037883a 	mov	sp,fp
   833ac:	df000017 	ldw	fp,0(sp)
   833b0:	dec00104 	addi	sp,sp,4
   833b4:	f800283a 	ret

000833b8 <atexit>:
   833b8:	200b883a 	mov	r5,r4
   833bc:	000d883a 	mov	r6,zero
   833c0:	0009883a 	mov	r4,zero
   833c4:	000f883a 	mov	r7,zero
   833c8:	0083a001 	jmpi	83a00 <__register_exitproc>

000833cc <exit>:
   833cc:	defffe04 	addi	sp,sp,-8
   833d0:	000b883a 	mov	r5,zero
   833d4:	dc000015 	stw	r16,0(sp)
   833d8:	dfc00115 	stw	ra,4(sp)
   833dc:	2021883a 	mov	r16,r4
   833e0:	0083b380 	call	83b38 <__call_exitprocs>
   833e4:	00800234 	movhi	r2,8
   833e8:	109fab04 	addi	r2,r2,32428
   833ec:	11000017 	ldw	r4,0(r2)
   833f0:	20800f17 	ldw	r2,60(r4)
   833f4:	10000126 	beq	r2,zero,833fc <exit+0x30>
   833f8:	103ee83a 	callr	r2
   833fc:	8009883a 	mov	r4,r16
   83400:	00856e00 	call	856e0 <_exit>

00083404 <memcmp>:
   83404:	00c000c4 	movi	r3,3
   83408:	1980032e 	bgeu	r3,r6,83418 <memcmp+0x14>
   8340c:	2144b03a 	or	r2,r4,r5
   83410:	10c4703a 	and	r2,r2,r3
   83414:	10000f26 	beq	r2,zero,83454 <memcmp+0x50>
   83418:	31ffffc4 	addi	r7,r6,-1
   8341c:	3000061e 	bne	r6,zero,83438 <memcmp+0x34>
   83420:	00000a06 	br	8344c <memcmp+0x48>
   83424:	39ffffc4 	addi	r7,r7,-1
   83428:	00bfffc4 	movi	r2,-1
   8342c:	21000044 	addi	r4,r4,1
   83430:	29400044 	addi	r5,r5,1
   83434:	38800526 	beq	r7,r2,8344c <memcmp+0x48>
   83438:	20c00003 	ldbu	r3,0(r4)
   8343c:	28800003 	ldbu	r2,0(r5)
   83440:	18bff826 	beq	r3,r2,83424 <memcmp+0x20>
   83444:	1885c83a 	sub	r2,r3,r2
   83448:	f800283a 	ret
   8344c:	0005883a 	mov	r2,zero
   83450:	f800283a 	ret
   83454:	180f883a 	mov	r7,r3
   83458:	20c00017 	ldw	r3,0(r4)
   8345c:	28800017 	ldw	r2,0(r5)
   83460:	18bfed1e 	bne	r3,r2,83418 <memcmp+0x14>
   83464:	31bfff04 	addi	r6,r6,-4
   83468:	21000104 	addi	r4,r4,4
   8346c:	29400104 	addi	r5,r5,4
   83470:	39bff936 	bltu	r7,r6,83458 <memcmp+0x54>
   83474:	003fe806 	br	83418 <memcmp+0x14>

00083478 <memcpy>:
   83478:	01c003c4 	movi	r7,15
   8347c:	2007883a 	mov	r3,r4
   83480:	3980032e 	bgeu	r7,r6,83490 <memcpy+0x18>
   83484:	2904b03a 	or	r2,r5,r4
   83488:	108000cc 	andi	r2,r2,3
   8348c:	10000926 	beq	r2,zero,834b4 <memcpy+0x3c>
   83490:	30000626 	beq	r6,zero,834ac <memcpy+0x34>
   83494:	30cd883a 	add	r6,r6,r3
   83498:	28800003 	ldbu	r2,0(r5)
   8349c:	29400044 	addi	r5,r5,1
   834a0:	18800005 	stb	r2,0(r3)
   834a4:	18c00044 	addi	r3,r3,1
   834a8:	30fffb1e 	bne	r6,r3,83498 <memcpy+0x20>
   834ac:	2005883a 	mov	r2,r4
   834b0:	f800283a 	ret
   834b4:	3811883a 	mov	r8,r7
   834b8:	200f883a 	mov	r7,r4
   834bc:	28c00017 	ldw	r3,0(r5)
   834c0:	31bffc04 	addi	r6,r6,-16
   834c4:	38c00015 	stw	r3,0(r7)
   834c8:	28800117 	ldw	r2,4(r5)
   834cc:	38800115 	stw	r2,4(r7)
   834d0:	28c00217 	ldw	r3,8(r5)
   834d4:	38c00215 	stw	r3,8(r7)
   834d8:	28800317 	ldw	r2,12(r5)
   834dc:	29400404 	addi	r5,r5,16
   834e0:	38800315 	stw	r2,12(r7)
   834e4:	39c00404 	addi	r7,r7,16
   834e8:	41bff436 	bltu	r8,r6,834bc <memcpy+0x44>
   834ec:	008000c4 	movi	r2,3
   834f0:	1180072e 	bgeu	r2,r6,83510 <memcpy+0x98>
   834f4:	1007883a 	mov	r3,r2
   834f8:	28800017 	ldw	r2,0(r5)
   834fc:	31bfff04 	addi	r6,r6,-4
   83500:	29400104 	addi	r5,r5,4
   83504:	38800015 	stw	r2,0(r7)
   83508:	39c00104 	addi	r7,r7,4
   8350c:	19bffa36 	bltu	r3,r6,834f8 <memcpy+0x80>
   83510:	3807883a 	mov	r3,r7
   83514:	003fde06 	br	83490 <memcpy+0x18>

00083518 <putc>:
   83518:	defffc04 	addi	sp,sp,-16
   8351c:	dc800215 	stw	r18,8(sp)
   83520:	04800234 	movhi	r18,8
   83524:	949faa04 	addi	r18,r18,32424
   83528:	90c00017 	ldw	r3,0(r18)
   8352c:	dc400115 	stw	r17,4(sp)
   83530:	dc000015 	stw	r16,0(sp)
   83534:	dfc00315 	stw	ra,12(sp)
   83538:	2023883a 	mov	r17,r4
   8353c:	2821883a 	mov	r16,r5
   83540:	18000226 	beq	r3,zero,8354c <putc+0x34>
   83544:	18800e17 	ldw	r2,56(r3)
   83548:	10001126 	beq	r2,zero,83590 <putc+0x78>
   8354c:	80800217 	ldw	r2,8(r16)
   83550:	10ffffc4 	addi	r3,r2,-1
   83554:	80c00215 	stw	r3,8(r16)
   83558:	18001316 	blt	r3,zero,835a8 <putc+0x90>
   8355c:	80800017 	ldw	r2,0(r16)
   83560:	14400005 	stb	r17,0(r2)
   83564:	80c00017 	ldw	r3,0(r16)
   83568:	18800044 	addi	r2,r3,1
   8356c:	18c00003 	ldbu	r3,0(r3)
   83570:	80800015 	stw	r2,0(r16)
   83574:	1805883a 	mov	r2,r3
   83578:	dfc00317 	ldw	ra,12(sp)
   8357c:	dc800217 	ldw	r18,8(sp)
   83580:	dc400117 	ldw	r17,4(sp)
   83584:	dc000017 	ldw	r16,0(sp)
   83588:	dec00404 	addi	sp,sp,16
   8358c:	f800283a 	ret
   83590:	1809883a 	mov	r4,r3
   83594:	0083f800 	call	83f80 <__sinit>
   83598:	80800217 	ldw	r2,8(r16)
   8359c:	10ffffc4 	addi	r3,r2,-1
   835a0:	80c00215 	stw	r3,8(r16)
   835a4:	183fed0e 	bge	r3,zero,8355c <putc+0x44>
   835a8:	80800617 	ldw	r2,24(r16)
   835ac:	18800f16 	blt	r3,r2,835ec <putc+0xd4>
   835b0:	80800017 	ldw	r2,0(r16)
   835b4:	14400005 	stb	r17,0(r2)
   835b8:	81000017 	ldw	r4,0(r16)
   835bc:	00800284 	movi	r2,10
   835c0:	20c00003 	ldbu	r3,0(r4)
   835c4:	18801226 	beq	r3,r2,83610 <putc+0xf8>
   835c8:	20800044 	addi	r2,r4,1
   835cc:	80800015 	stw	r2,0(r16)
   835d0:	1805883a 	mov	r2,r3
   835d4:	dfc00317 	ldw	ra,12(sp)
   835d8:	dc800217 	ldw	r18,8(sp)
   835dc:	dc400117 	ldw	r17,4(sp)
   835e0:	dc000017 	ldw	r16,0(sp)
   835e4:	dec00404 	addi	sp,sp,16
   835e8:	f800283a 	ret
   835ec:	91000017 	ldw	r4,0(r18)
   835f0:	880b883a 	mov	r5,r17
   835f4:	800d883a 	mov	r6,r16
   835f8:	dfc00317 	ldw	ra,12(sp)
   835fc:	dc800217 	ldw	r18,8(sp)
   83600:	dc400117 	ldw	r17,4(sp)
   83604:	dc000017 	ldw	r16,0(sp)
   83608:	dec00404 	addi	sp,sp,16
   8360c:	00837781 	jmpi	83778 <__swbuf_r>
   83610:	91000017 	ldw	r4,0(r18)
   83614:	180b883a 	mov	r5,r3
   83618:	003ff606 	br	835f4 <putc+0xdc>

0008361c <_putc_r>:
   8361c:	defffc04 	addi	sp,sp,-16
   83620:	dc400215 	stw	r17,8(sp)
   83624:	dc000115 	stw	r16,4(sp)
   83628:	dfc00315 	stw	ra,12(sp)
   8362c:	2021883a 	mov	r16,r4
   83630:	2823883a 	mov	r17,r5
   83634:	20000226 	beq	r4,zero,83640 <_putc_r+0x24>
   83638:	20800e17 	ldw	r2,56(r4)
   8363c:	10001026 	beq	r2,zero,83680 <_putc_r+0x64>
   83640:	30800217 	ldw	r2,8(r6)
   83644:	10ffffc4 	addi	r3,r2,-1
   83648:	30c00215 	stw	r3,8(r6)
   8364c:	18001316 	blt	r3,zero,8369c <_putc_r+0x80>
   83650:	30800017 	ldw	r2,0(r6)
   83654:	14400005 	stb	r17,0(r2)
   83658:	30c00017 	ldw	r3,0(r6)
   8365c:	18800044 	addi	r2,r3,1
   83660:	18c00003 	ldbu	r3,0(r3)
   83664:	30800015 	stw	r2,0(r6)
   83668:	1805883a 	mov	r2,r3
   8366c:	dfc00317 	ldw	ra,12(sp)
   83670:	dc400217 	ldw	r17,8(sp)
   83674:	dc000117 	ldw	r16,4(sp)
   83678:	dec00404 	addi	sp,sp,16
   8367c:	f800283a 	ret
   83680:	d9800015 	stw	r6,0(sp)
   83684:	0083f800 	call	83f80 <__sinit>
   83688:	d9800017 	ldw	r6,0(sp)
   8368c:	30800217 	ldw	r2,8(r6)
   83690:	10ffffc4 	addi	r3,r2,-1
   83694:	30c00215 	stw	r3,8(r6)
   83698:	183fed0e 	bge	r3,zero,83650 <_putc_r+0x34>
   8369c:	30800617 	ldw	r2,24(r6)
   836a0:	18800e16 	blt	r3,r2,836dc <_putc_r+0xc0>
   836a4:	30800017 	ldw	r2,0(r6)
   836a8:	14400005 	stb	r17,0(r2)
   836ac:	31000017 	ldw	r4,0(r6)
   836b0:	00800284 	movi	r2,10
   836b4:	20c00003 	ldbu	r3,0(r4)
   836b8:	18800f26 	beq	r3,r2,836f8 <_putc_r+0xdc>
   836bc:	20800044 	addi	r2,r4,1
   836c0:	30800015 	stw	r2,0(r6)
   836c4:	1805883a 	mov	r2,r3
   836c8:	dfc00317 	ldw	ra,12(sp)
   836cc:	dc400217 	ldw	r17,8(sp)
   836d0:	dc000117 	ldw	r16,4(sp)
   836d4:	dec00404 	addi	sp,sp,16
   836d8:	f800283a 	ret
   836dc:	8009883a 	mov	r4,r16
   836e0:	880b883a 	mov	r5,r17
   836e4:	dfc00317 	ldw	ra,12(sp)
   836e8:	dc400217 	ldw	r17,8(sp)
   836ec:	dc000117 	ldw	r16,4(sp)
   836f0:	dec00404 	addi	sp,sp,16
   836f4:	00837781 	jmpi	83778 <__swbuf_r>
   836f8:	8009883a 	mov	r4,r16
   836fc:	180b883a 	mov	r5,r3
   83700:	003ff806 	br	836e4 <_putc_r+0xc8>

00083704 <strlen>:
   83704:	208000cc 	andi	r2,r4,3
   83708:	2011883a 	mov	r8,r4
   8370c:	1000161e 	bne	r2,zero,83768 <strlen+0x64>
   83710:	20c00017 	ldw	r3,0(r4)
   83714:	017fbff4 	movhi	r5,65279
   83718:	297fbfc4 	addi	r5,r5,-257
   8371c:	01e02074 	movhi	r7,32897
   83720:	39e02004 	addi	r7,r7,-32640
   83724:	1945883a 	add	r2,r3,r5
   83728:	11c4703a 	and	r2,r2,r7
   8372c:	00c6303a 	nor	r3,zero,r3
   83730:	1886703a 	and	r3,r3,r2
   83734:	18000c1e 	bne	r3,zero,83768 <strlen+0x64>
   83738:	280d883a 	mov	r6,r5
   8373c:	380b883a 	mov	r5,r7
   83740:	21000104 	addi	r4,r4,4
   83744:	20800017 	ldw	r2,0(r4)
   83748:	1187883a 	add	r3,r2,r6
   8374c:	1946703a 	and	r3,r3,r5
   83750:	0084303a 	nor	r2,zero,r2
   83754:	10c4703a 	and	r2,r2,r3
   83758:	103ff926 	beq	r2,zero,83740 <strlen+0x3c>
   8375c:	20800007 	ldb	r2,0(r4)
   83760:	10000326 	beq	r2,zero,83770 <strlen+0x6c>
   83764:	21000044 	addi	r4,r4,1
   83768:	20800007 	ldb	r2,0(r4)
   8376c:	103ffd1e 	bne	r2,zero,83764 <strlen+0x60>
   83770:	2205c83a 	sub	r2,r4,r8
   83774:	f800283a 	ret

00083778 <__swbuf_r>:
   83778:	defffc04 	addi	sp,sp,-16
   8377c:	dc400215 	stw	r17,8(sp)
   83780:	dc000115 	stw	r16,4(sp)
   83784:	dfc00315 	stw	ra,12(sp)
   83788:	2023883a 	mov	r17,r4
   8378c:	2821883a 	mov	r16,r5
   83790:	20000226 	beq	r4,zero,8379c <__swbuf_r+0x24>
   83794:	20800e17 	ldw	r2,56(r4)
   83798:	10002f26 	beq	r2,zero,83858 <__swbuf_r+0xe0>
   8379c:	3080030b 	ldhu	r2,12(r6)
   837a0:	30c00617 	ldw	r3,24(r6)
   837a4:	1080020c 	andi	r2,r2,8
   837a8:	30c00215 	stw	r3,8(r6)
   837ac:	10002226 	beq	r2,zero,83838 <__swbuf_r+0xc0>
   837b0:	30c00417 	ldw	r3,16(r6)
   837b4:	18002026 	beq	r3,zero,83838 <__swbuf_r+0xc0>
   837b8:	31000017 	ldw	r4,0(r6)
   837bc:	30800517 	ldw	r2,20(r6)
   837c0:	20c7c83a 	sub	r3,r4,r3
   837c4:	18802f0e 	bge	r3,r2,83884 <__swbuf_r+0x10c>
   837c8:	19400044 	addi	r5,r3,1
   837cc:	30800217 	ldw	r2,8(r6)
   837d0:	84003fcc 	andi	r16,r16,255
   837d4:	20c00044 	addi	r3,r4,1
   837d8:	10bfffc4 	addi	r2,r2,-1
   837dc:	30800215 	stw	r2,8(r6)
   837e0:	24000005 	stb	r16,0(r4)
   837e4:	30800517 	ldw	r2,20(r6)
   837e8:	30c00015 	stw	r3,0(r6)
   837ec:	11400c26 	beq	r2,r5,83820 <__swbuf_r+0xa8>
   837f0:	3080030b 	ldhu	r2,12(r6)
   837f4:	1080004c 	andi	r2,r2,1
   837f8:	1005003a 	cmpeq	r2,r2,zero
   837fc:	10000626 	beq	r2,zero,83818 <__swbuf_r+0xa0>
   83800:	8005883a 	mov	r2,r16
   83804:	dfc00317 	ldw	ra,12(sp)
   83808:	dc400217 	ldw	r17,8(sp)
   8380c:	dc000117 	ldw	r16,4(sp)
   83810:	dec00404 	addi	sp,sp,16
   83814:	f800283a 	ret
   83818:	00800284 	movi	r2,10
   8381c:	80bff81e 	bne	r16,r2,83800 <__swbuf_r+0x88>
   83820:	8809883a 	mov	r4,r17
   83824:	300b883a 	mov	r5,r6
   83828:	0083ce80 	call	83ce8 <_fflush_r>
   8382c:	103ff426 	beq	r2,zero,83800 <__swbuf_r+0x88>
   83830:	043fffc4 	movi	r16,-1
   83834:	003ff206 	br	83800 <__swbuf_r+0x88>
   83838:	300b883a 	mov	r5,r6
   8383c:	8809883a 	mov	r4,r17
   83840:	d9800015 	stw	r6,0(sp)
   83844:	00838c40 	call	838c4 <__swsetup_r>
   83848:	d9800017 	ldw	r6,0(sp)
   8384c:	1000061e 	bne	r2,zero,83868 <__swbuf_r+0xf0>
   83850:	30c00417 	ldw	r3,16(r6)
   83854:	003fd806 	br	837b8 <__swbuf_r+0x40>
   83858:	d9800015 	stw	r6,0(sp)
   8385c:	0083f800 	call	83f80 <__sinit>
   83860:	d9800017 	ldw	r6,0(sp)
   83864:	003fcd06 	br	8379c <__swbuf_r+0x24>
   83868:	3080030b 	ldhu	r2,12(r6)
   8386c:	00c00244 	movi	r3,9
   83870:	043fffc4 	movi	r16,-1
   83874:	10801014 	ori	r2,r2,64
   83878:	3080030d 	sth	r2,12(r6)
   8387c:	88c00015 	stw	r3,0(r17)
   83880:	003fdf06 	br	83800 <__swbuf_r+0x88>
   83884:	300b883a 	mov	r5,r6
   83888:	8809883a 	mov	r4,r17
   8388c:	d9800015 	stw	r6,0(sp)
   83890:	0083ce80 	call	83ce8 <_fflush_r>
   83894:	d9800017 	ldw	r6,0(sp)
   83898:	103fe51e 	bne	r2,zero,83830 <__swbuf_r+0xb8>
   8389c:	31000017 	ldw	r4,0(r6)
   838a0:	01400044 	movi	r5,1
   838a4:	003fc906 	br	837cc <__swbuf_r+0x54>

000838a8 <__swbuf>:
   838a8:	01800234 	movhi	r6,8
   838ac:	319faa04 	addi	r6,r6,32424
   838b0:	2007883a 	mov	r3,r4
   838b4:	31000017 	ldw	r4,0(r6)
   838b8:	280d883a 	mov	r6,r5
   838bc:	180b883a 	mov	r5,r3
   838c0:	00837781 	jmpi	83778 <__swbuf_r>

000838c4 <__swsetup_r>:
   838c4:	00800234 	movhi	r2,8
   838c8:	109faa04 	addi	r2,r2,32424
   838cc:	10c00017 	ldw	r3,0(r2)
   838d0:	defffd04 	addi	sp,sp,-12
   838d4:	dc400115 	stw	r17,4(sp)
   838d8:	dc000015 	stw	r16,0(sp)
   838dc:	dfc00215 	stw	ra,8(sp)
   838e0:	2023883a 	mov	r17,r4
   838e4:	2821883a 	mov	r16,r5
   838e8:	18000226 	beq	r3,zero,838f4 <__swsetup_r+0x30>
   838ec:	18800e17 	ldw	r2,56(r3)
   838f0:	10001f26 	beq	r2,zero,83970 <__swsetup_r+0xac>
   838f4:	8100030b 	ldhu	r4,12(r16)
   838f8:	2080020c 	andi	r2,r4,8
   838fc:	10002826 	beq	r2,zero,839a0 <__swsetup_r+0xdc>
   83900:	81400417 	ldw	r5,16(r16)
   83904:	28001d26 	beq	r5,zero,8397c <__swsetup_r+0xb8>
   83908:	2080004c 	andi	r2,r4,1
   8390c:	1005003a 	cmpeq	r2,r2,zero
   83910:	10000b26 	beq	r2,zero,83940 <__swsetup_r+0x7c>
   83914:	2080008c 	andi	r2,r4,2
   83918:	10001226 	beq	r2,zero,83964 <__swsetup_r+0xa0>
   8391c:	0005883a 	mov	r2,zero
   83920:	80800215 	stw	r2,8(r16)
   83924:	28000b26 	beq	r5,zero,83954 <__swsetup_r+0x90>
   83928:	0005883a 	mov	r2,zero
   8392c:	dfc00217 	ldw	ra,8(sp)
   83930:	dc400117 	ldw	r17,4(sp)
   83934:	dc000017 	ldw	r16,0(sp)
   83938:	dec00304 	addi	sp,sp,12
   8393c:	f800283a 	ret
   83940:	80800517 	ldw	r2,20(r16)
   83944:	80000215 	stw	zero,8(r16)
   83948:	0085c83a 	sub	r2,zero,r2
   8394c:	80800615 	stw	r2,24(r16)
   83950:	283ff51e 	bne	r5,zero,83928 <__swsetup_r+0x64>
   83954:	2080200c 	andi	r2,r4,128
   83958:	103ff326 	beq	r2,zero,83928 <__swsetup_r+0x64>
   8395c:	00bfffc4 	movi	r2,-1
   83960:	003ff206 	br	8392c <__swsetup_r+0x68>
   83964:	80800517 	ldw	r2,20(r16)
   83968:	80800215 	stw	r2,8(r16)
   8396c:	003fed06 	br	83924 <__swsetup_r+0x60>
   83970:	1809883a 	mov	r4,r3
   83974:	0083f800 	call	83f80 <__sinit>
   83978:	003fde06 	br	838f4 <__swsetup_r+0x30>
   8397c:	20c0a00c 	andi	r3,r4,640
   83980:	00808004 	movi	r2,512
   83984:	18bfe026 	beq	r3,r2,83908 <__swsetup_r+0x44>
   83988:	8809883a 	mov	r4,r17
   8398c:	800b883a 	mov	r5,r16
   83990:	00847980 	call	84798 <__smakebuf_r>
   83994:	8100030b 	ldhu	r4,12(r16)
   83998:	81400417 	ldw	r5,16(r16)
   8399c:	003fda06 	br	83908 <__swsetup_r+0x44>
   839a0:	2080040c 	andi	r2,r4,16
   839a4:	103fed26 	beq	r2,zero,8395c <__swsetup_r+0x98>
   839a8:	2080010c 	andi	r2,r4,4
   839ac:	10001226 	beq	r2,zero,839f8 <__swsetup_r+0x134>
   839b0:	81400c17 	ldw	r5,48(r16)
   839b4:	28000526 	beq	r5,zero,839cc <__swsetup_r+0x108>
   839b8:	80801004 	addi	r2,r16,64
   839bc:	28800226 	beq	r5,r2,839c8 <__swsetup_r+0x104>
   839c0:	8809883a 	mov	r4,r17
   839c4:	00843040 	call	84304 <_free_r>
   839c8:	80000c15 	stw	zero,48(r16)
   839cc:	8080030b 	ldhu	r2,12(r16)
   839d0:	81400417 	ldw	r5,16(r16)
   839d4:	80000115 	stw	zero,4(r16)
   839d8:	10bff6cc 	andi	r2,r2,65499
   839dc:	8080030d 	sth	r2,12(r16)
   839e0:	81400015 	stw	r5,0(r16)
   839e4:	8080030b 	ldhu	r2,12(r16)
   839e8:	10800214 	ori	r2,r2,8
   839ec:	113fffcc 	andi	r4,r2,65535
   839f0:	8080030d 	sth	r2,12(r16)
   839f4:	003fc306 	br	83904 <__swsetup_r+0x40>
   839f8:	81400417 	ldw	r5,16(r16)
   839fc:	003ff906 	br	839e4 <__swsetup_r+0x120>

00083a00 <__register_exitproc>:
   83a00:	defffa04 	addi	sp,sp,-24
   83a04:	00800234 	movhi	r2,8
   83a08:	109fab04 	addi	r2,r2,32428
   83a0c:	dc000015 	stw	r16,0(sp)
   83a10:	14000017 	ldw	r16,0(r2)
   83a14:	dd000415 	stw	r20,16(sp)
   83a18:	2829883a 	mov	r20,r5
   83a1c:	81405217 	ldw	r5,328(r16)
   83a20:	dcc00315 	stw	r19,12(sp)
   83a24:	dc800215 	stw	r18,8(sp)
   83a28:	dc400115 	stw	r17,4(sp)
   83a2c:	dfc00515 	stw	ra,20(sp)
   83a30:	2023883a 	mov	r17,r4
   83a34:	3027883a 	mov	r19,r6
   83a38:	3825883a 	mov	r18,r7
   83a3c:	28002526 	beq	r5,zero,83ad4 <__register_exitproc+0xd4>
   83a40:	29000117 	ldw	r4,4(r5)
   83a44:	008007c4 	movi	r2,31
   83a48:	11002716 	blt	r2,r4,83ae8 <__register_exitproc+0xe8>
   83a4c:	8800101e 	bne	r17,zero,83a90 <__register_exitproc+0x90>
   83a50:	2105883a 	add	r2,r4,r4
   83a54:	1085883a 	add	r2,r2,r2
   83a58:	20c00044 	addi	r3,r4,1
   83a5c:	1145883a 	add	r2,r2,r5
   83a60:	0009883a 	mov	r4,zero
   83a64:	15000215 	stw	r20,8(r2)
   83a68:	28c00115 	stw	r3,4(r5)
   83a6c:	2005883a 	mov	r2,r4
   83a70:	dfc00517 	ldw	ra,20(sp)
   83a74:	dd000417 	ldw	r20,16(sp)
   83a78:	dcc00317 	ldw	r19,12(sp)
   83a7c:	dc800217 	ldw	r18,8(sp)
   83a80:	dc400117 	ldw	r17,4(sp)
   83a84:	dc000017 	ldw	r16,0(sp)
   83a88:	dec00604 	addi	sp,sp,24
   83a8c:	f800283a 	ret
   83a90:	29802204 	addi	r6,r5,136
   83a94:	00800044 	movi	r2,1
   83a98:	110e983a 	sll	r7,r2,r4
   83a9c:	30c04017 	ldw	r3,256(r6)
   83aa0:	2105883a 	add	r2,r4,r4
   83aa4:	1085883a 	add	r2,r2,r2
   83aa8:	1185883a 	add	r2,r2,r6
   83aac:	19c6b03a 	or	r3,r3,r7
   83ab0:	14802015 	stw	r18,128(r2)
   83ab4:	14c00015 	stw	r19,0(r2)
   83ab8:	00800084 	movi	r2,2
   83abc:	30c04015 	stw	r3,256(r6)
   83ac0:	88bfe31e 	bne	r17,r2,83a50 <__register_exitproc+0x50>
   83ac4:	30804117 	ldw	r2,260(r6)
   83ac8:	11c4b03a 	or	r2,r2,r7
   83acc:	30804115 	stw	r2,260(r6)
   83ad0:	003fdf06 	br	83a50 <__register_exitproc+0x50>
   83ad4:	00800274 	movhi	r2,9
   83ad8:	10a8b204 	addi	r2,r2,-23864
   83adc:	100b883a 	mov	r5,r2
   83ae0:	80805215 	stw	r2,328(r16)
   83ae4:	003fd606 	br	83a40 <__register_exitproc+0x40>
   83ae8:	00800034 	movhi	r2,0
   83aec:	10800004 	addi	r2,r2,0
   83af0:	1000021e 	bne	r2,zero,83afc <__register_exitproc+0xfc>
   83af4:	013fffc4 	movi	r4,-1
   83af8:	003fdc06 	br	83a6c <__register_exitproc+0x6c>
   83afc:	01006404 	movi	r4,400
   83b00:	103ee83a 	callr	r2
   83b04:	1007883a 	mov	r3,r2
   83b08:	103ffa26 	beq	r2,zero,83af4 <__register_exitproc+0xf4>
   83b0c:	80805217 	ldw	r2,328(r16)
   83b10:	180b883a 	mov	r5,r3
   83b14:	18000115 	stw	zero,4(r3)
   83b18:	18800015 	stw	r2,0(r3)
   83b1c:	80c05215 	stw	r3,328(r16)
   83b20:	18006215 	stw	zero,392(r3)
   83b24:	18006315 	stw	zero,396(r3)
   83b28:	0009883a 	mov	r4,zero
   83b2c:	883fc826 	beq	r17,zero,83a50 <__register_exitproc+0x50>
   83b30:	003fd706 	br	83a90 <__register_exitproc+0x90>

00083b34 <register_fini>:
   83b34:	f800283a 	ret

00083b38 <__call_exitprocs>:
   83b38:	00800234 	movhi	r2,8
   83b3c:	109fab04 	addi	r2,r2,32428
   83b40:	10800017 	ldw	r2,0(r2)
   83b44:	defff304 	addi	sp,sp,-52
   83b48:	df000b15 	stw	fp,44(sp)
   83b4c:	d8800115 	stw	r2,4(sp)
   83b50:	00800034 	movhi	r2,0
   83b54:	10800004 	addi	r2,r2,0
   83b58:	1005003a 	cmpeq	r2,r2,zero
   83b5c:	d8800215 	stw	r2,8(sp)
   83b60:	d8800117 	ldw	r2,4(sp)
   83b64:	dd400815 	stw	r21,32(sp)
   83b68:	dd000715 	stw	r20,28(sp)
   83b6c:	10805204 	addi	r2,r2,328
   83b70:	dfc00c15 	stw	ra,48(sp)
   83b74:	ddc00a15 	stw	r23,40(sp)
   83b78:	dd800915 	stw	r22,36(sp)
   83b7c:	dcc00615 	stw	r19,24(sp)
   83b80:	dc800515 	stw	r18,20(sp)
   83b84:	dc400415 	stw	r17,16(sp)
   83b88:	dc000315 	stw	r16,12(sp)
   83b8c:	282b883a 	mov	r21,r5
   83b90:	2039883a 	mov	fp,r4
   83b94:	d8800015 	stw	r2,0(sp)
   83b98:	2829003a 	cmpeq	r20,r5,zero
   83b9c:	d8800117 	ldw	r2,4(sp)
   83ba0:	14405217 	ldw	r17,328(r2)
   83ba4:	88001026 	beq	r17,zero,83be8 <__call_exitprocs+0xb0>
   83ba8:	ddc00017 	ldw	r23,0(sp)
   83bac:	88800117 	ldw	r2,4(r17)
   83bb0:	8c802204 	addi	r18,r17,136
   83bb4:	143fffc4 	addi	r16,r2,-1
   83bb8:	80000916 	blt	r16,zero,83be0 <__call_exitprocs+0xa8>
   83bbc:	05bfffc4 	movi	r22,-1
   83bc0:	a000151e 	bne	r20,zero,83c18 <__call_exitprocs+0xe0>
   83bc4:	8409883a 	add	r4,r16,r16
   83bc8:	2105883a 	add	r2,r4,r4
   83bcc:	1485883a 	add	r2,r2,r18
   83bd0:	10c02017 	ldw	r3,128(r2)
   83bd4:	a8c01126 	beq	r21,r3,83c1c <__call_exitprocs+0xe4>
   83bd8:	843fffc4 	addi	r16,r16,-1
   83bdc:	85bff81e 	bne	r16,r22,83bc0 <__call_exitprocs+0x88>
   83be0:	d8800217 	ldw	r2,8(sp)
   83be4:	10003126 	beq	r2,zero,83cac <__call_exitprocs+0x174>
   83be8:	dfc00c17 	ldw	ra,48(sp)
   83bec:	df000b17 	ldw	fp,44(sp)
   83bf0:	ddc00a17 	ldw	r23,40(sp)
   83bf4:	dd800917 	ldw	r22,36(sp)
   83bf8:	dd400817 	ldw	r21,32(sp)
   83bfc:	dd000717 	ldw	r20,28(sp)
   83c00:	dcc00617 	ldw	r19,24(sp)
   83c04:	dc800517 	ldw	r18,20(sp)
   83c08:	dc400417 	ldw	r17,16(sp)
   83c0c:	dc000317 	ldw	r16,12(sp)
   83c10:	dec00d04 	addi	sp,sp,52
   83c14:	f800283a 	ret
   83c18:	8409883a 	add	r4,r16,r16
   83c1c:	88c00117 	ldw	r3,4(r17)
   83c20:	2105883a 	add	r2,r4,r4
   83c24:	1445883a 	add	r2,r2,r17
   83c28:	18ffffc4 	addi	r3,r3,-1
   83c2c:	11800217 	ldw	r6,8(r2)
   83c30:	1c001526 	beq	r3,r16,83c88 <__call_exitprocs+0x150>
   83c34:	10000215 	stw	zero,8(r2)
   83c38:	303fe726 	beq	r6,zero,83bd8 <__call_exitprocs+0xa0>
   83c3c:	00c00044 	movi	r3,1
   83c40:	1c06983a 	sll	r3,r3,r16
   83c44:	90804017 	ldw	r2,256(r18)
   83c48:	8cc00117 	ldw	r19,4(r17)
   83c4c:	1884703a 	and	r2,r3,r2
   83c50:	10001426 	beq	r2,zero,83ca4 <__call_exitprocs+0x16c>
   83c54:	90804117 	ldw	r2,260(r18)
   83c58:	1884703a 	and	r2,r3,r2
   83c5c:	10000c1e 	bne	r2,zero,83c90 <__call_exitprocs+0x158>
   83c60:	2105883a 	add	r2,r4,r4
   83c64:	1485883a 	add	r2,r2,r18
   83c68:	11400017 	ldw	r5,0(r2)
   83c6c:	e009883a 	mov	r4,fp
   83c70:	303ee83a 	callr	r6
   83c74:	88800117 	ldw	r2,4(r17)
   83c78:	98bfc81e 	bne	r19,r2,83b9c <__call_exitprocs+0x64>
   83c7c:	b8800017 	ldw	r2,0(r23)
   83c80:	147fd526 	beq	r2,r17,83bd8 <__call_exitprocs+0xa0>
   83c84:	003fc506 	br	83b9c <__call_exitprocs+0x64>
   83c88:	8c000115 	stw	r16,4(r17)
   83c8c:	003fea06 	br	83c38 <__call_exitprocs+0x100>
   83c90:	2105883a 	add	r2,r4,r4
   83c94:	1485883a 	add	r2,r2,r18
   83c98:	11000017 	ldw	r4,0(r2)
   83c9c:	303ee83a 	callr	r6
   83ca0:	003ff406 	br	83c74 <__call_exitprocs+0x13c>
   83ca4:	303ee83a 	callr	r6
   83ca8:	003ff206 	br	83c74 <__call_exitprocs+0x13c>
   83cac:	88800117 	ldw	r2,4(r17)
   83cb0:	1000081e 	bne	r2,zero,83cd4 <__call_exitprocs+0x19c>
   83cb4:	89000017 	ldw	r4,0(r17)
   83cb8:	20000726 	beq	r4,zero,83cd8 <__call_exitprocs+0x1a0>
   83cbc:	b9000015 	stw	r4,0(r23)
   83cc0:	8809883a 	mov	r4,r17
   83cc4:	00000000 	call	0 <__reset-0x80000>
   83cc8:	bc400017 	ldw	r17,0(r23)
   83ccc:	883fb71e 	bne	r17,zero,83bac <__call_exitprocs+0x74>
   83cd0:	003fc506 	br	83be8 <__call_exitprocs+0xb0>
   83cd4:	89000017 	ldw	r4,0(r17)
   83cd8:	882f883a 	mov	r23,r17
   83cdc:	2023883a 	mov	r17,r4
   83ce0:	883fb21e 	bne	r17,zero,83bac <__call_exitprocs+0x74>
   83ce4:	003fc006 	br	83be8 <__call_exitprocs+0xb0>

00083ce8 <_fflush_r>:
   83ce8:	defffb04 	addi	sp,sp,-20
   83cec:	dcc00315 	stw	r19,12(sp)
   83cf0:	dc800215 	stw	r18,8(sp)
   83cf4:	dfc00415 	stw	ra,16(sp)
   83cf8:	dc400115 	stw	r17,4(sp)
   83cfc:	dc000015 	stw	r16,0(sp)
   83d00:	2027883a 	mov	r19,r4
   83d04:	2825883a 	mov	r18,r5
   83d08:	20000226 	beq	r4,zero,83d14 <_fflush_r+0x2c>
   83d0c:	20800e17 	ldw	r2,56(r4)
   83d10:	10005626 	beq	r2,zero,83e6c <_fflush_r+0x184>
   83d14:	9100030b 	ldhu	r4,12(r18)
   83d18:	20ffffcc 	andi	r3,r4,65535
   83d1c:	18e0001c 	xori	r3,r3,32768
   83d20:	18e00004 	addi	r3,r3,-32768
   83d24:	1880020c 	andi	r2,r3,8
   83d28:	1000261e 	bne	r2,zero,83dc4 <_fflush_r+0xdc>
   83d2c:	90c00117 	ldw	r3,4(r18)
   83d30:	20820014 	ori	r2,r4,2048
   83d34:	9080030d 	sth	r2,12(r18)
   83d38:	1009883a 	mov	r4,r2
   83d3c:	00c0400e 	bge	zero,r3,83e40 <_fflush_r+0x158>
   83d40:	92000a17 	ldw	r8,40(r18)
   83d44:	40004026 	beq	r8,zero,83e48 <_fflush_r+0x160>
   83d48:	2084000c 	andi	r2,r4,4096
   83d4c:	10005326 	beq	r2,zero,83e9c <_fflush_r+0x1b4>
   83d50:	94001417 	ldw	r16,80(r18)
   83d54:	9080030b 	ldhu	r2,12(r18)
   83d58:	1080010c 	andi	r2,r2,4
   83d5c:	1000481e 	bne	r2,zero,83e80 <_fflush_r+0x198>
   83d60:	91400717 	ldw	r5,28(r18)
   83d64:	9809883a 	mov	r4,r19
   83d68:	800d883a 	mov	r6,r16
   83d6c:	000f883a 	mov	r7,zero
   83d70:	403ee83a 	callr	r8
   83d74:	8080261e 	bne	r16,r2,83e10 <_fflush_r+0x128>
   83d78:	9080030b 	ldhu	r2,12(r18)
   83d7c:	91000417 	ldw	r4,16(r18)
   83d80:	90000115 	stw	zero,4(r18)
   83d84:	10bdffcc 	andi	r2,r2,63487
   83d88:	10ffffcc 	andi	r3,r2,65535
   83d8c:	18c4000c 	andi	r3,r3,4096
   83d90:	9080030d 	sth	r2,12(r18)
   83d94:	91000015 	stw	r4,0(r18)
   83d98:	18002b26 	beq	r3,zero,83e48 <_fflush_r+0x160>
   83d9c:	0007883a 	mov	r3,zero
   83da0:	1805883a 	mov	r2,r3
   83da4:	94001415 	stw	r16,80(r18)
   83da8:	dfc00417 	ldw	ra,16(sp)
   83dac:	dcc00317 	ldw	r19,12(sp)
   83db0:	dc800217 	ldw	r18,8(sp)
   83db4:	dc400117 	ldw	r17,4(sp)
   83db8:	dc000017 	ldw	r16,0(sp)
   83dbc:	dec00504 	addi	sp,sp,20
   83dc0:	f800283a 	ret
   83dc4:	94400417 	ldw	r17,16(r18)
   83dc8:	88001f26 	beq	r17,zero,83e48 <_fflush_r+0x160>
   83dcc:	90800017 	ldw	r2,0(r18)
   83dd0:	18c000cc 	andi	r3,r3,3
   83dd4:	94400015 	stw	r17,0(r18)
   83dd8:	1461c83a 	sub	r16,r2,r17
   83ddc:	18002526 	beq	r3,zero,83e74 <_fflush_r+0x18c>
   83de0:	0005883a 	mov	r2,zero
   83de4:	90800215 	stw	r2,8(r18)
   83de8:	0400170e 	bge	zero,r16,83e48 <_fflush_r+0x160>
   83dec:	90c00917 	ldw	r3,36(r18)
   83df0:	91400717 	ldw	r5,28(r18)
   83df4:	880d883a 	mov	r6,r17
   83df8:	800f883a 	mov	r7,r16
   83dfc:	9809883a 	mov	r4,r19
   83e00:	183ee83a 	callr	r3
   83e04:	88a3883a 	add	r17,r17,r2
   83e08:	80a1c83a 	sub	r16,r16,r2
   83e0c:	00bff616 	blt	zero,r2,83de8 <_fflush_r+0x100>
   83e10:	9080030b 	ldhu	r2,12(r18)
   83e14:	00ffffc4 	movi	r3,-1
   83e18:	10801014 	ori	r2,r2,64
   83e1c:	9080030d 	sth	r2,12(r18)
   83e20:	1805883a 	mov	r2,r3
   83e24:	dfc00417 	ldw	ra,16(sp)
   83e28:	dcc00317 	ldw	r19,12(sp)
   83e2c:	dc800217 	ldw	r18,8(sp)
   83e30:	dc400117 	ldw	r17,4(sp)
   83e34:	dc000017 	ldw	r16,0(sp)
   83e38:	dec00504 	addi	sp,sp,20
   83e3c:	f800283a 	ret
   83e40:	90800f17 	ldw	r2,60(r18)
   83e44:	00bfbe16 	blt	zero,r2,83d40 <_fflush_r+0x58>
   83e48:	0007883a 	mov	r3,zero
   83e4c:	1805883a 	mov	r2,r3
   83e50:	dfc00417 	ldw	ra,16(sp)
   83e54:	dcc00317 	ldw	r19,12(sp)
   83e58:	dc800217 	ldw	r18,8(sp)
   83e5c:	dc400117 	ldw	r17,4(sp)
   83e60:	dc000017 	ldw	r16,0(sp)
   83e64:	dec00504 	addi	sp,sp,20
   83e68:	f800283a 	ret
   83e6c:	0083f800 	call	83f80 <__sinit>
   83e70:	003fa806 	br	83d14 <_fflush_r+0x2c>
   83e74:	90800517 	ldw	r2,20(r18)
   83e78:	90800215 	stw	r2,8(r18)
   83e7c:	003fda06 	br	83de8 <_fflush_r+0x100>
   83e80:	90800117 	ldw	r2,4(r18)
   83e84:	90c00c17 	ldw	r3,48(r18)
   83e88:	80a1c83a 	sub	r16,r16,r2
   83e8c:	183fb426 	beq	r3,zero,83d60 <_fflush_r+0x78>
   83e90:	90800f17 	ldw	r2,60(r18)
   83e94:	80a1c83a 	sub	r16,r16,r2
   83e98:	003fb106 	br	83d60 <_fflush_r+0x78>
   83e9c:	91400717 	ldw	r5,28(r18)
   83ea0:	9809883a 	mov	r4,r19
   83ea4:	000d883a 	mov	r6,zero
   83ea8:	01c00044 	movi	r7,1
   83eac:	403ee83a 	callr	r8
   83eb0:	1021883a 	mov	r16,r2
   83eb4:	00bfffc4 	movi	r2,-1
   83eb8:	80800226 	beq	r16,r2,83ec4 <_fflush_r+0x1dc>
   83ebc:	92000a17 	ldw	r8,40(r18)
   83ec0:	003fa406 	br	83d54 <_fflush_r+0x6c>
   83ec4:	98c00017 	ldw	r3,0(r19)
   83ec8:	00800744 	movi	r2,29
   83ecc:	18bfde26 	beq	r3,r2,83e48 <_fflush_r+0x160>
   83ed0:	9080030b 	ldhu	r2,12(r18)
   83ed4:	8007883a 	mov	r3,r16
   83ed8:	10801014 	ori	r2,r2,64
   83edc:	9080030d 	sth	r2,12(r18)
   83ee0:	003fcf06 	br	83e20 <_fflush_r+0x138>

00083ee4 <fflush>:
   83ee4:	01400234 	movhi	r5,8
   83ee8:	294f3a04 	addi	r5,r5,15592
   83eec:	2007883a 	mov	r3,r4
   83ef0:	20000526 	beq	r4,zero,83f08 <fflush+0x24>
   83ef4:	00800234 	movhi	r2,8
   83ef8:	109faa04 	addi	r2,r2,32424
   83efc:	11000017 	ldw	r4,0(r2)
   83f00:	180b883a 	mov	r5,r3
   83f04:	0083ce81 	jmpi	83ce8 <_fflush_r>
   83f08:	00800234 	movhi	r2,8
   83f0c:	109fab04 	addi	r2,r2,32428
   83f10:	11000017 	ldw	r4,0(r2)
   83f14:	00846181 	jmpi	84618 <_fwalk_reent>

00083f18 <std>:
   83f18:	00800234 	movhi	r2,8
   83f1c:	10945d04 	addi	r2,r2,20852
   83f20:	20800b15 	stw	r2,44(r4)
   83f24:	00800234 	movhi	r2,8
   83f28:	10949804 	addi	r2,r2,21088
   83f2c:	20800815 	stw	r2,32(r4)
   83f30:	00c00234 	movhi	r3,8
   83f34:	18d47904 	addi	r3,r3,20964
   83f38:	00800234 	movhi	r2,8
   83f3c:	10945f04 	addi	r2,r2,20860
   83f40:	2140030d 	sth	r5,12(r4)
   83f44:	2180038d 	sth	r6,14(r4)
   83f48:	20c00915 	stw	r3,36(r4)
   83f4c:	20800a15 	stw	r2,40(r4)
   83f50:	20000015 	stw	zero,0(r4)
   83f54:	20000115 	stw	zero,4(r4)
   83f58:	20000215 	stw	zero,8(r4)
   83f5c:	20000415 	stw	zero,16(r4)
   83f60:	20000515 	stw	zero,20(r4)
   83f64:	20000615 	stw	zero,24(r4)
   83f68:	21000715 	stw	r4,28(r4)
   83f6c:	f800283a 	ret

00083f70 <__sfp_lock_acquire>:
   83f70:	f800283a 	ret

00083f74 <__sfp_lock_release>:
   83f74:	f800283a 	ret

00083f78 <__sinit_lock_acquire>:
   83f78:	f800283a 	ret

00083f7c <__sinit_lock_release>:
   83f7c:	f800283a 	ret

00083f80 <__sinit>:
   83f80:	20800e17 	ldw	r2,56(r4)
   83f84:	defffd04 	addi	sp,sp,-12
   83f88:	dc400115 	stw	r17,4(sp)
   83f8c:	dc000015 	stw	r16,0(sp)
   83f90:	dfc00215 	stw	ra,8(sp)
   83f94:	04400044 	movi	r17,1
   83f98:	01400104 	movi	r5,4
   83f9c:	000d883a 	mov	r6,zero
   83fa0:	2021883a 	mov	r16,r4
   83fa4:	2200bb04 	addi	r8,r4,748
   83fa8:	200f883a 	mov	r7,r4
   83fac:	10000526 	beq	r2,zero,83fc4 <__sinit+0x44>
   83fb0:	dfc00217 	ldw	ra,8(sp)
   83fb4:	dc400117 	ldw	r17,4(sp)
   83fb8:	dc000017 	ldw	r16,0(sp)
   83fbc:	dec00304 	addi	sp,sp,12
   83fc0:	f800283a 	ret
   83fc4:	21000117 	ldw	r4,4(r4)
   83fc8:	00800234 	movhi	r2,8
   83fcc:	10901904 	addi	r2,r2,16484
   83fd0:	00c000c4 	movi	r3,3
   83fd4:	80800f15 	stw	r2,60(r16)
   83fd8:	80c0b915 	stw	r3,740(r16)
   83fdc:	8200ba15 	stw	r8,744(r16)
   83fe0:	84400e15 	stw	r17,56(r16)
   83fe4:	8000b815 	stw	zero,736(r16)
   83fe8:	0083f180 	call	83f18 <std>
   83fec:	81000217 	ldw	r4,8(r16)
   83ff0:	880d883a 	mov	r6,r17
   83ff4:	800f883a 	mov	r7,r16
   83ff8:	01400284 	movi	r5,10
   83ffc:	0083f180 	call	83f18 <std>
   84000:	81000317 	ldw	r4,12(r16)
   84004:	800f883a 	mov	r7,r16
   84008:	01400484 	movi	r5,18
   8400c:	01800084 	movi	r6,2
   84010:	dfc00217 	ldw	ra,8(sp)
   84014:	dc400117 	ldw	r17,4(sp)
   84018:	dc000017 	ldw	r16,0(sp)
   8401c:	dec00304 	addi	sp,sp,12
   84020:	0083f181 	jmpi	83f18 <std>

00084024 <__fp_lock>:
   84024:	0005883a 	mov	r2,zero
   84028:	f800283a 	ret

0008402c <__fp_unlock>:
   8402c:	0005883a 	mov	r2,zero
   84030:	f800283a 	ret

00084034 <__fp_unlock_all>:
   84034:	00800234 	movhi	r2,8
   84038:	109faa04 	addi	r2,r2,32424
   8403c:	11000017 	ldw	r4,0(r2)
   84040:	01400234 	movhi	r5,8
   84044:	29500b04 	addi	r5,r5,16428
   84048:	00846e01 	jmpi	846e0 <_fwalk>

0008404c <__fp_lock_all>:
   8404c:	00800234 	movhi	r2,8
   84050:	109faa04 	addi	r2,r2,32424
   84054:	11000017 	ldw	r4,0(r2)
   84058:	01400234 	movhi	r5,8
   8405c:	29500904 	addi	r5,r5,16420
   84060:	00846e01 	jmpi	846e0 <_fwalk>

00084064 <_cleanup_r>:
   84064:	01400234 	movhi	r5,8
   84068:	29552e04 	addi	r5,r5,21688
   8406c:	00846e01 	jmpi	846e0 <_fwalk>

00084070 <_cleanup>:
   84070:	00800234 	movhi	r2,8
   84074:	109fab04 	addi	r2,r2,32428
   84078:	11000017 	ldw	r4,0(r2)
   8407c:	00840641 	jmpi	84064 <_cleanup_r>

00084080 <__sfmoreglue>:
   84080:	defffc04 	addi	sp,sp,-16
   84084:	dc400115 	stw	r17,4(sp)
   84088:	2c401724 	muli	r17,r5,92
   8408c:	dc800215 	stw	r18,8(sp)
   84090:	2825883a 	mov	r18,r5
   84094:	89400304 	addi	r5,r17,12
   84098:	dc000015 	stw	r16,0(sp)
   8409c:	dfc00315 	stw	ra,12(sp)
   840a0:	008492c0 	call	8492c <_malloc_r>
   840a4:	0021883a 	mov	r16,zero
   840a8:	880d883a 	mov	r6,r17
   840ac:	000b883a 	mov	r5,zero
   840b0:	10000626 	beq	r2,zero,840cc <__sfmoreglue+0x4c>
   840b4:	11000304 	addi	r4,r2,12
   840b8:	14800115 	stw	r18,4(r2)
   840bc:	10000015 	stw	zero,0(r2)
   840c0:	11000215 	stw	r4,8(r2)
   840c4:	1021883a 	mov	r16,r2
   840c8:	008506c0 	call	8506c <memset>
   840cc:	8005883a 	mov	r2,r16
   840d0:	dfc00317 	ldw	ra,12(sp)
   840d4:	dc800217 	ldw	r18,8(sp)
   840d8:	dc400117 	ldw	r17,4(sp)
   840dc:	dc000017 	ldw	r16,0(sp)
   840e0:	dec00404 	addi	sp,sp,16
   840e4:	f800283a 	ret

000840e8 <__sfp>:
   840e8:	defffd04 	addi	sp,sp,-12
   840ec:	00800234 	movhi	r2,8
   840f0:	109fab04 	addi	r2,r2,32428
   840f4:	dc000015 	stw	r16,0(sp)
   840f8:	14000017 	ldw	r16,0(r2)
   840fc:	dc400115 	stw	r17,4(sp)
   84100:	dfc00215 	stw	ra,8(sp)
   84104:	80800e17 	ldw	r2,56(r16)
   84108:	2023883a 	mov	r17,r4
   8410c:	10002626 	beq	r2,zero,841a8 <__sfp+0xc0>
   84110:	8400b804 	addi	r16,r16,736
   84114:	80800117 	ldw	r2,4(r16)
   84118:	81000217 	ldw	r4,8(r16)
   8411c:	10ffffc4 	addi	r3,r2,-1
   84120:	18000916 	blt	r3,zero,84148 <__sfp+0x60>
   84124:	2080030f 	ldh	r2,12(r4)
   84128:	10000b26 	beq	r2,zero,84158 <__sfp+0x70>
   8412c:	017fffc4 	movi	r5,-1
   84130:	00000206 	br	8413c <__sfp+0x54>
   84134:	2080030f 	ldh	r2,12(r4)
   84138:	10000726 	beq	r2,zero,84158 <__sfp+0x70>
   8413c:	18ffffc4 	addi	r3,r3,-1
   84140:	21001704 	addi	r4,r4,92
   84144:	197ffb1e 	bne	r3,r5,84134 <__sfp+0x4c>
   84148:	80800017 	ldw	r2,0(r16)
   8414c:	10001926 	beq	r2,zero,841b4 <__sfp+0xcc>
   84150:	1021883a 	mov	r16,r2
   84154:	003fef06 	br	84114 <__sfp+0x2c>
   84158:	00bfffc4 	movi	r2,-1
   8415c:	00c00044 	movi	r3,1
   84160:	2080038d 	sth	r2,14(r4)
   84164:	20c0030d 	sth	r3,12(r4)
   84168:	20000015 	stw	zero,0(r4)
   8416c:	20000215 	stw	zero,8(r4)
   84170:	20000115 	stw	zero,4(r4)
   84174:	20000415 	stw	zero,16(r4)
   84178:	20000515 	stw	zero,20(r4)
   8417c:	20000615 	stw	zero,24(r4)
   84180:	20000c15 	stw	zero,48(r4)
   84184:	20000d15 	stw	zero,52(r4)
   84188:	20001115 	stw	zero,68(r4)
   8418c:	20001215 	stw	zero,72(r4)
   84190:	2005883a 	mov	r2,r4
   84194:	dfc00217 	ldw	ra,8(sp)
   84198:	dc400117 	ldw	r17,4(sp)
   8419c:	dc000017 	ldw	r16,0(sp)
   841a0:	dec00304 	addi	sp,sp,12
   841a4:	f800283a 	ret
   841a8:	8009883a 	mov	r4,r16
   841ac:	0083f800 	call	83f80 <__sinit>
   841b0:	003fd706 	br	84110 <__sfp+0x28>
   841b4:	8809883a 	mov	r4,r17
   841b8:	01400104 	movi	r5,4
   841bc:	00840800 	call	84080 <__sfmoreglue>
   841c0:	80800015 	stw	r2,0(r16)
   841c4:	103fe21e 	bne	r2,zero,84150 <__sfp+0x68>
   841c8:	00800304 	movi	r2,12
   841cc:	0009883a 	mov	r4,zero
   841d0:	88800015 	stw	r2,0(r17)
   841d4:	003fee06 	br	84190 <__sfp+0xa8>

000841d8 <_malloc_trim_r>:
   841d8:	defffb04 	addi	sp,sp,-20
   841dc:	dcc00315 	stw	r19,12(sp)
   841e0:	04c00234 	movhi	r19,8
   841e4:	9cde9d04 	addi	r19,r19,31348
   841e8:	dc800215 	stw	r18,8(sp)
   841ec:	dc400115 	stw	r17,4(sp)
   841f0:	dc000015 	stw	r16,0(sp)
   841f4:	2823883a 	mov	r17,r5
   841f8:	2025883a 	mov	r18,r4
   841fc:	dfc00415 	stw	ra,16(sp)
   84200:	0085aa40 	call	85aa4 <__malloc_lock>
   84204:	98800217 	ldw	r2,8(r19)
   84208:	9009883a 	mov	r4,r18
   8420c:	000b883a 	mov	r5,zero
   84210:	10c00117 	ldw	r3,4(r2)
   84214:	00bfff04 	movi	r2,-4
   84218:	18a0703a 	and	r16,r3,r2
   8421c:	8463c83a 	sub	r17,r16,r17
   84220:	8c43fbc4 	addi	r17,r17,4079
   84224:	8822d33a 	srli	r17,r17,12
   84228:	0083ffc4 	movi	r2,4095
   8422c:	8c7fffc4 	addi	r17,r17,-1
   84230:	8822933a 	slli	r17,r17,12
   84234:	1440060e 	bge	r2,r17,84250 <_malloc_trim_r+0x78>
   84238:	00851040 	call	85104 <_sbrk_r>
   8423c:	98c00217 	ldw	r3,8(r19)
   84240:	9009883a 	mov	r4,r18
   84244:	044bc83a 	sub	r5,zero,r17
   84248:	80c7883a 	add	r3,r16,r3
   8424c:	10c00926 	beq	r2,r3,84274 <_malloc_trim_r+0x9c>
   84250:	0085ac40 	call	85ac4 <__malloc_unlock>
   84254:	0005883a 	mov	r2,zero
   84258:	dfc00417 	ldw	ra,16(sp)
   8425c:	dcc00317 	ldw	r19,12(sp)
   84260:	dc800217 	ldw	r18,8(sp)
   84264:	dc400117 	ldw	r17,4(sp)
   84268:	dc000017 	ldw	r16,0(sp)
   8426c:	dec00504 	addi	sp,sp,20
   84270:	f800283a 	ret
   84274:	9009883a 	mov	r4,r18
   84278:	00851040 	call	85104 <_sbrk_r>
   8427c:	844dc83a 	sub	r6,r16,r17
   84280:	00ffffc4 	movi	r3,-1
   84284:	9009883a 	mov	r4,r18
   84288:	000b883a 	mov	r5,zero
   8428c:	01c00274 	movhi	r7,9
   84290:	39e86804 	addi	r7,r7,-24160
   84294:	31800054 	ori	r6,r6,1
   84298:	10c00926 	beq	r2,r3,842c0 <_malloc_trim_r+0xe8>
   8429c:	38800017 	ldw	r2,0(r7)
   842a0:	98c00217 	ldw	r3,8(r19)
   842a4:	9009883a 	mov	r4,r18
   842a8:	1445c83a 	sub	r2,r2,r17
   842ac:	38800015 	stw	r2,0(r7)
   842b0:	19800115 	stw	r6,4(r3)
   842b4:	0085ac40 	call	85ac4 <__malloc_unlock>
   842b8:	00800044 	movi	r2,1
   842bc:	003fe606 	br	84258 <_malloc_trim_r+0x80>
   842c0:	00851040 	call	85104 <_sbrk_r>
   842c4:	99800217 	ldw	r6,8(r19)
   842c8:	100f883a 	mov	r7,r2
   842cc:	9009883a 	mov	r4,r18
   842d0:	1187c83a 	sub	r3,r2,r6
   842d4:	008003c4 	movi	r2,15
   842d8:	19400054 	ori	r5,r3,1
   842dc:	10ffdc0e 	bge	r2,r3,84250 <_malloc_trim_r+0x78>
   842e0:	00800234 	movhi	r2,8
   842e4:	109fad04 	addi	r2,r2,32436
   842e8:	10c00017 	ldw	r3,0(r2)
   842ec:	00800274 	movhi	r2,9
   842f0:	10a86804 	addi	r2,r2,-24160
   842f4:	31400115 	stw	r5,4(r6)
   842f8:	38c7c83a 	sub	r3,r7,r3
   842fc:	10c00015 	stw	r3,0(r2)
   84300:	003fd306 	br	84250 <_malloc_trim_r+0x78>

00084304 <_free_r>:
   84304:	defffd04 	addi	sp,sp,-12
   84308:	dc400115 	stw	r17,4(sp)
   8430c:	dc000015 	stw	r16,0(sp)
   84310:	dfc00215 	stw	ra,8(sp)
   84314:	2821883a 	mov	r16,r5
   84318:	2023883a 	mov	r17,r4
   8431c:	28005a26 	beq	r5,zero,84488 <_free_r+0x184>
   84320:	0085aa40 	call	85aa4 <__malloc_lock>
   84324:	823ffe04 	addi	r8,r16,-8
   84328:	41400117 	ldw	r5,4(r8)
   8432c:	00bfff84 	movi	r2,-2
   84330:	02800234 	movhi	r10,8
   84334:	529e9d04 	addi	r10,r10,31348
   84338:	288e703a 	and	r7,r5,r2
   8433c:	41cd883a 	add	r6,r8,r7
   84340:	30c00117 	ldw	r3,4(r6)
   84344:	51000217 	ldw	r4,8(r10)
   84348:	00bfff04 	movi	r2,-4
   8434c:	1892703a 	and	r9,r3,r2
   84350:	5017883a 	mov	r11,r10
   84354:	31006726 	beq	r6,r4,844f4 <_free_r+0x1f0>
   84358:	2880004c 	andi	r2,r5,1
   8435c:	1005003a 	cmpeq	r2,r2,zero
   84360:	32400115 	stw	r9,4(r6)
   84364:	10001a1e 	bne	r2,zero,843d0 <_free_r+0xcc>
   84368:	000b883a 	mov	r5,zero
   8436c:	3247883a 	add	r3,r6,r9
   84370:	18800117 	ldw	r2,4(r3)
   84374:	1080004c 	andi	r2,r2,1
   84378:	1000231e 	bne	r2,zero,84408 <_free_r+0x104>
   8437c:	280ac03a 	cmpne	r5,r5,zero
   84380:	3a4f883a 	add	r7,r7,r9
   84384:	2800451e 	bne	r5,zero,8449c <_free_r+0x198>
   84388:	31000217 	ldw	r4,8(r6)
   8438c:	00800234 	movhi	r2,8
   84390:	109e9f04 	addi	r2,r2,31356
   84394:	20807b26 	beq	r4,r2,84584 <_free_r+0x280>
   84398:	30800317 	ldw	r2,12(r6)
   8439c:	3a07883a 	add	r3,r7,r8
   843a0:	19c00015 	stw	r7,0(r3)
   843a4:	11000215 	stw	r4,8(r2)
   843a8:	20800315 	stw	r2,12(r4)
   843ac:	38800054 	ori	r2,r7,1
   843b0:	40800115 	stw	r2,4(r8)
   843b4:	28001a26 	beq	r5,zero,84420 <_free_r+0x11c>
   843b8:	8809883a 	mov	r4,r17
   843bc:	dfc00217 	ldw	ra,8(sp)
   843c0:	dc400117 	ldw	r17,4(sp)
   843c4:	dc000017 	ldw	r16,0(sp)
   843c8:	dec00304 	addi	sp,sp,12
   843cc:	0085ac41 	jmpi	85ac4 <__malloc_unlock>
   843d0:	80bffe17 	ldw	r2,-8(r16)
   843d4:	50c00204 	addi	r3,r10,8
   843d8:	4091c83a 	sub	r8,r8,r2
   843dc:	41000217 	ldw	r4,8(r8)
   843e0:	388f883a 	add	r7,r7,r2
   843e4:	20c06126 	beq	r4,r3,8456c <_free_r+0x268>
   843e8:	40800317 	ldw	r2,12(r8)
   843ec:	3247883a 	add	r3,r6,r9
   843f0:	000b883a 	mov	r5,zero
   843f4:	11000215 	stw	r4,8(r2)
   843f8:	20800315 	stw	r2,12(r4)
   843fc:	18800117 	ldw	r2,4(r3)
   84400:	1080004c 	andi	r2,r2,1
   84404:	103fdd26 	beq	r2,zero,8437c <_free_r+0x78>
   84408:	38800054 	ori	r2,r7,1
   8440c:	3a07883a 	add	r3,r7,r8
   84410:	280ac03a 	cmpne	r5,r5,zero
   84414:	40800115 	stw	r2,4(r8)
   84418:	19c00015 	stw	r7,0(r3)
   8441c:	283fe61e 	bne	r5,zero,843b8 <_free_r+0xb4>
   84420:	00807fc4 	movi	r2,511
   84424:	11c01f2e 	bgeu	r2,r7,844a4 <_free_r+0x1a0>
   84428:	3806d27a 	srli	r3,r7,9
   8442c:	1800481e 	bne	r3,zero,84550 <_free_r+0x24c>
   84430:	3804d0fa 	srli	r2,r7,3
   84434:	100690fa 	slli	r3,r2,3
   84438:	1acd883a 	add	r6,r3,r11
   8443c:	31400217 	ldw	r5,8(r6)
   84440:	31405926 	beq	r6,r5,845a8 <_free_r+0x2a4>
   84444:	28800117 	ldw	r2,4(r5)
   84448:	00ffff04 	movi	r3,-4
   8444c:	10c4703a 	and	r2,r2,r3
   84450:	3880022e 	bgeu	r7,r2,8445c <_free_r+0x158>
   84454:	29400217 	ldw	r5,8(r5)
   84458:	317ffa1e 	bne	r6,r5,84444 <_free_r+0x140>
   8445c:	29800317 	ldw	r6,12(r5)
   84460:	41800315 	stw	r6,12(r8)
   84464:	41400215 	stw	r5,8(r8)
   84468:	8809883a 	mov	r4,r17
   8446c:	2a000315 	stw	r8,12(r5)
   84470:	32000215 	stw	r8,8(r6)
   84474:	dfc00217 	ldw	ra,8(sp)
   84478:	dc400117 	ldw	r17,4(sp)
   8447c:	dc000017 	ldw	r16,0(sp)
   84480:	dec00304 	addi	sp,sp,12
   84484:	0085ac41 	jmpi	85ac4 <__malloc_unlock>
   84488:	dfc00217 	ldw	ra,8(sp)
   8448c:	dc400117 	ldw	r17,4(sp)
   84490:	dc000017 	ldw	r16,0(sp)
   84494:	dec00304 	addi	sp,sp,12
   84498:	f800283a 	ret
   8449c:	31000217 	ldw	r4,8(r6)
   844a0:	003fbd06 	br	84398 <_free_r+0x94>
   844a4:	3806d0fa 	srli	r3,r7,3
   844a8:	00800044 	movi	r2,1
   844ac:	51400117 	ldw	r5,4(r10)
   844b0:	180890fa 	slli	r4,r3,3
   844b4:	1807d0ba 	srai	r3,r3,2
   844b8:	22c9883a 	add	r4,r4,r11
   844bc:	21800217 	ldw	r6,8(r4)
   844c0:	10c4983a 	sll	r2,r2,r3
   844c4:	41000315 	stw	r4,12(r8)
   844c8:	41800215 	stw	r6,8(r8)
   844cc:	288ab03a 	or	r5,r5,r2
   844d0:	22000215 	stw	r8,8(r4)
   844d4:	8809883a 	mov	r4,r17
   844d8:	51400115 	stw	r5,4(r10)
   844dc:	32000315 	stw	r8,12(r6)
   844e0:	dfc00217 	ldw	ra,8(sp)
   844e4:	dc400117 	ldw	r17,4(sp)
   844e8:	dc000017 	ldw	r16,0(sp)
   844ec:	dec00304 	addi	sp,sp,12
   844f0:	0085ac41 	jmpi	85ac4 <__malloc_unlock>
   844f4:	2880004c 	andi	r2,r5,1
   844f8:	3a4d883a 	add	r6,r7,r9
   844fc:	1000071e 	bne	r2,zero,8451c <_free_r+0x218>
   84500:	80bffe17 	ldw	r2,-8(r16)
   84504:	4091c83a 	sub	r8,r8,r2
   84508:	41000317 	ldw	r4,12(r8)
   8450c:	40c00217 	ldw	r3,8(r8)
   84510:	308d883a 	add	r6,r6,r2
   84514:	20c00215 	stw	r3,8(r4)
   84518:	19000315 	stw	r4,12(r3)
   8451c:	00800234 	movhi	r2,8
   84520:	109fac04 	addi	r2,r2,32432
   84524:	11000017 	ldw	r4,0(r2)
   84528:	30c00054 	ori	r3,r6,1
   8452c:	52000215 	stw	r8,8(r10)
   84530:	40c00115 	stw	r3,4(r8)
   84534:	313fa036 	bltu	r6,r4,843b8 <_free_r+0xb4>
   84538:	00800274 	movhi	r2,9
   8453c:	10a76504 	addi	r2,r2,-25196
   84540:	11400017 	ldw	r5,0(r2)
   84544:	8809883a 	mov	r4,r17
   84548:	00841d80 	call	841d8 <_malloc_trim_r>
   8454c:	003f9a06 	br	843b8 <_free_r+0xb4>
   84550:	00800104 	movi	r2,4
   84554:	10c0072e 	bgeu	r2,r3,84574 <_free_r+0x270>
   84558:	00800504 	movi	r2,20
   8455c:	10c01936 	bltu	r2,r3,845c4 <_free_r+0x2c0>
   84560:	188016c4 	addi	r2,r3,91
   84564:	100690fa 	slli	r3,r2,3
   84568:	003fb306 	br	84438 <_free_r+0x134>
   8456c:	01400044 	movi	r5,1
   84570:	003f7e06 	br	8436c <_free_r+0x68>
   84574:	3804d1ba 	srli	r2,r7,6
   84578:	10800e04 	addi	r2,r2,56
   8457c:	100690fa 	slli	r3,r2,3
   84580:	003fad06 	br	84438 <_free_r+0x134>
   84584:	22000315 	stw	r8,12(r4)
   84588:	22000215 	stw	r8,8(r4)
   8458c:	3a05883a 	add	r2,r7,r8
   84590:	38c00054 	ori	r3,r7,1
   84594:	11c00015 	stw	r7,0(r2)
   84598:	41000215 	stw	r4,8(r8)
   8459c:	40c00115 	stw	r3,4(r8)
   845a0:	41000315 	stw	r4,12(r8)
   845a4:	003f8406 	br	843b8 <_free_r+0xb4>
   845a8:	1005d0ba 	srai	r2,r2,2
   845ac:	00c00044 	movi	r3,1
   845b0:	51000117 	ldw	r4,4(r10)
   845b4:	1886983a 	sll	r3,r3,r2
   845b8:	20c8b03a 	or	r4,r4,r3
   845bc:	51000115 	stw	r4,4(r10)
   845c0:	003fa706 	br	84460 <_free_r+0x15c>
   845c4:	00801504 	movi	r2,84
   845c8:	10c00436 	bltu	r2,r3,845dc <_free_r+0x2d8>
   845cc:	3804d33a 	srli	r2,r7,12
   845d0:	10801b84 	addi	r2,r2,110
   845d4:	100690fa 	slli	r3,r2,3
   845d8:	003f9706 	br	84438 <_free_r+0x134>
   845dc:	00805504 	movi	r2,340
   845e0:	10c00436 	bltu	r2,r3,845f4 <_free_r+0x2f0>
   845e4:	3804d3fa 	srli	r2,r7,15
   845e8:	10801dc4 	addi	r2,r2,119
   845ec:	100690fa 	slli	r3,r2,3
   845f0:	003f9106 	br	84438 <_free_r+0x134>
   845f4:	00815504 	movi	r2,1364
   845f8:	10c0032e 	bgeu	r2,r3,84608 <_free_r+0x304>
   845fc:	00801f84 	movi	r2,126
   84600:	00c0fc04 	movi	r3,1008
   84604:	003f8c06 	br	84438 <_free_r+0x134>
   84608:	3804d4ba 	srli	r2,r7,18
   8460c:	10801f04 	addi	r2,r2,124
   84610:	100690fa 	slli	r3,r2,3
   84614:	003f8806 	br	84438 <_free_r+0x134>

00084618 <_fwalk_reent>:
   84618:	defff704 	addi	sp,sp,-36
   8461c:	dcc00315 	stw	r19,12(sp)
   84620:	24c0b804 	addi	r19,r4,736
   84624:	dd800615 	stw	r22,24(sp)
   84628:	dd400515 	stw	r21,20(sp)
   8462c:	dfc00815 	stw	ra,32(sp)
   84630:	ddc00715 	stw	r23,28(sp)
   84634:	dd000415 	stw	r20,16(sp)
   84638:	dc800215 	stw	r18,8(sp)
   8463c:	dc400115 	stw	r17,4(sp)
   84640:	dc000015 	stw	r16,0(sp)
   84644:	202b883a 	mov	r21,r4
   84648:	282d883a 	mov	r22,r5
   8464c:	0083f700 	call	83f70 <__sfp_lock_acquire>
   84650:	98002126 	beq	r19,zero,846d8 <_fwalk_reent+0xc0>
   84654:	002f883a 	mov	r23,zero
   84658:	9c800117 	ldw	r18,4(r19)
   8465c:	9c000217 	ldw	r16,8(r19)
   84660:	90bfffc4 	addi	r2,r18,-1
   84664:	10000d16 	blt	r2,zero,8469c <_fwalk_reent+0x84>
   84668:	0023883a 	mov	r17,zero
   8466c:	053fffc4 	movi	r20,-1
   84670:	8080030f 	ldh	r2,12(r16)
   84674:	8c400044 	addi	r17,r17,1
   84678:	10000626 	beq	r2,zero,84694 <_fwalk_reent+0x7c>
   8467c:	8080038f 	ldh	r2,14(r16)
   84680:	800b883a 	mov	r5,r16
   84684:	a809883a 	mov	r4,r21
   84688:	15000226 	beq	r2,r20,84694 <_fwalk_reent+0x7c>
   8468c:	b03ee83a 	callr	r22
   84690:	b8aeb03a 	or	r23,r23,r2
   84694:	84001704 	addi	r16,r16,92
   84698:	947ff51e 	bne	r18,r17,84670 <_fwalk_reent+0x58>
   8469c:	9cc00017 	ldw	r19,0(r19)
   846a0:	983fed1e 	bne	r19,zero,84658 <_fwalk_reent+0x40>
   846a4:	0083f740 	call	83f74 <__sfp_lock_release>
   846a8:	b805883a 	mov	r2,r23
   846ac:	dfc00817 	ldw	ra,32(sp)
   846b0:	ddc00717 	ldw	r23,28(sp)
   846b4:	dd800617 	ldw	r22,24(sp)
   846b8:	dd400517 	ldw	r21,20(sp)
   846bc:	dd000417 	ldw	r20,16(sp)
   846c0:	dcc00317 	ldw	r19,12(sp)
   846c4:	dc800217 	ldw	r18,8(sp)
   846c8:	dc400117 	ldw	r17,4(sp)
   846cc:	dc000017 	ldw	r16,0(sp)
   846d0:	dec00904 	addi	sp,sp,36
   846d4:	f800283a 	ret
   846d8:	002f883a 	mov	r23,zero
   846dc:	003ff106 	br	846a4 <_fwalk_reent+0x8c>

000846e0 <_fwalk>:
   846e0:	defff804 	addi	sp,sp,-32
   846e4:	dcc00315 	stw	r19,12(sp)
   846e8:	24c0b804 	addi	r19,r4,736
   846ec:	dd400515 	stw	r21,20(sp)
   846f0:	dfc00715 	stw	ra,28(sp)
   846f4:	dd800615 	stw	r22,24(sp)
   846f8:	dd000415 	stw	r20,16(sp)
   846fc:	dc800215 	stw	r18,8(sp)
   84700:	dc400115 	stw	r17,4(sp)
   84704:	dc000015 	stw	r16,0(sp)
   84708:	282b883a 	mov	r21,r5
   8470c:	0083f700 	call	83f70 <__sfp_lock_acquire>
   84710:	98001f26 	beq	r19,zero,84790 <_fwalk+0xb0>
   84714:	002d883a 	mov	r22,zero
   84718:	9c800117 	ldw	r18,4(r19)
   8471c:	9c000217 	ldw	r16,8(r19)
   84720:	90bfffc4 	addi	r2,r18,-1
   84724:	10000c16 	blt	r2,zero,84758 <_fwalk+0x78>
   84728:	0023883a 	mov	r17,zero
   8472c:	053fffc4 	movi	r20,-1
   84730:	8080030f 	ldh	r2,12(r16)
   84734:	8c400044 	addi	r17,r17,1
   84738:	10000526 	beq	r2,zero,84750 <_fwalk+0x70>
   8473c:	8080038f 	ldh	r2,14(r16)
   84740:	8009883a 	mov	r4,r16
   84744:	15000226 	beq	r2,r20,84750 <_fwalk+0x70>
   84748:	a83ee83a 	callr	r21
   8474c:	b0acb03a 	or	r22,r22,r2
   84750:	84001704 	addi	r16,r16,92
   84754:	947ff61e 	bne	r18,r17,84730 <_fwalk+0x50>
   84758:	9cc00017 	ldw	r19,0(r19)
   8475c:	983fee1e 	bne	r19,zero,84718 <_fwalk+0x38>
   84760:	0083f740 	call	83f74 <__sfp_lock_release>
   84764:	b005883a 	mov	r2,r22
   84768:	dfc00717 	ldw	ra,28(sp)
   8476c:	dd800617 	ldw	r22,24(sp)
   84770:	dd400517 	ldw	r21,20(sp)
   84774:	dd000417 	ldw	r20,16(sp)
   84778:	dcc00317 	ldw	r19,12(sp)
   8477c:	dc800217 	ldw	r18,8(sp)
   84780:	dc400117 	ldw	r17,4(sp)
   84784:	dc000017 	ldw	r16,0(sp)
   84788:	dec00804 	addi	sp,sp,32
   8478c:	f800283a 	ret
   84790:	002d883a 	mov	r22,zero
   84794:	003ff206 	br	84760 <_fwalk+0x80>

00084798 <__smakebuf_r>:
   84798:	2880030b 	ldhu	r2,12(r5)
   8479c:	deffed04 	addi	sp,sp,-76
   847a0:	dc401015 	stw	r17,64(sp)
   847a4:	1080008c 	andi	r2,r2,2
   847a8:	dc000f15 	stw	r16,60(sp)
   847ac:	dfc01215 	stw	ra,72(sp)
   847b0:	dc801115 	stw	r18,68(sp)
   847b4:	2821883a 	mov	r16,r5
   847b8:	2023883a 	mov	r17,r4
   847bc:	10000b26 	beq	r2,zero,847ec <__smakebuf_r+0x54>
   847c0:	28c010c4 	addi	r3,r5,67
   847c4:	00800044 	movi	r2,1
   847c8:	28800515 	stw	r2,20(r5)
   847cc:	28c00415 	stw	r3,16(r5)
   847d0:	28c00015 	stw	r3,0(r5)
   847d4:	dfc01217 	ldw	ra,72(sp)
   847d8:	dc801117 	ldw	r18,68(sp)
   847dc:	dc401017 	ldw	r17,64(sp)
   847e0:	dc000f17 	ldw	r16,60(sp)
   847e4:	dec01304 	addi	sp,sp,76
   847e8:	f800283a 	ret
   847ec:	2940038f 	ldh	r5,14(r5)
   847f0:	28002116 	blt	r5,zero,84878 <__smakebuf_r+0xe0>
   847f4:	d80d883a 	mov	r6,sp
   847f8:	00854cc0 	call	854cc <_fstat_r>
   847fc:	10001e16 	blt	r2,zero,84878 <__smakebuf_r+0xe0>
   84800:	d8800117 	ldw	r2,4(sp)
   84804:	00e00014 	movui	r3,32768
   84808:	113c000c 	andi	r4,r2,61440
   8480c:	20c03126 	beq	r4,r3,848d4 <__smakebuf_r+0x13c>
   84810:	8080030b 	ldhu	r2,12(r16)
   84814:	00c80004 	movi	r3,8192
   84818:	10820014 	ori	r2,r2,2048
   8481c:	8080030d 	sth	r2,12(r16)
   84820:	20c01e26 	beq	r4,r3,8489c <__smakebuf_r+0x104>
   84824:	04810004 	movi	r18,1024
   84828:	8809883a 	mov	r4,r17
   8482c:	900b883a 	mov	r5,r18
   84830:	008492c0 	call	8492c <_malloc_r>
   84834:	1009883a 	mov	r4,r2
   84838:	10003126 	beq	r2,zero,84900 <__smakebuf_r+0x168>
   8483c:	80c0030b 	ldhu	r3,12(r16)
   84840:	00800234 	movhi	r2,8
   84844:	10901904 	addi	r2,r2,16484
   84848:	88800f15 	stw	r2,60(r17)
   8484c:	18c02014 	ori	r3,r3,128
   84850:	84800515 	stw	r18,20(r16)
   84854:	80c0030d 	sth	r3,12(r16)
   84858:	81000415 	stw	r4,16(r16)
   8485c:	81000015 	stw	r4,0(r16)
   84860:	dfc01217 	ldw	ra,72(sp)
   84864:	dc801117 	ldw	r18,68(sp)
   84868:	dc401017 	ldw	r17,64(sp)
   8486c:	dc000f17 	ldw	r16,60(sp)
   84870:	dec01304 	addi	sp,sp,76
   84874:	f800283a 	ret
   84878:	80c0030b 	ldhu	r3,12(r16)
   8487c:	1880200c 	andi	r2,r3,128
   84880:	10000426 	beq	r2,zero,84894 <__smakebuf_r+0xfc>
   84884:	04801004 	movi	r18,64
   84888:	18820014 	ori	r2,r3,2048
   8488c:	8080030d 	sth	r2,12(r16)
   84890:	003fe506 	br	84828 <__smakebuf_r+0x90>
   84894:	04810004 	movi	r18,1024
   84898:	003ffb06 	br	84888 <__smakebuf_r+0xf0>
   8489c:	8140038f 	ldh	r5,14(r16)
   848a0:	8809883a 	mov	r4,r17
   848a4:	00855400 	call	85540 <_isatty_r>
   848a8:	103fde26 	beq	r2,zero,84824 <__smakebuf_r+0x8c>
   848ac:	8080030b 	ldhu	r2,12(r16)
   848b0:	80c010c4 	addi	r3,r16,67
   848b4:	04810004 	movi	r18,1024
   848b8:	10800054 	ori	r2,r2,1
   848bc:	8080030d 	sth	r2,12(r16)
   848c0:	00800044 	movi	r2,1
   848c4:	80c00415 	stw	r3,16(r16)
   848c8:	80800515 	stw	r2,20(r16)
   848cc:	80c00015 	stw	r3,0(r16)
   848d0:	003fd506 	br	84828 <__smakebuf_r+0x90>
   848d4:	80c00a17 	ldw	r3,40(r16)
   848d8:	00800234 	movhi	r2,8
   848dc:	10945f04 	addi	r2,r2,20860
   848e0:	18bfcb1e 	bne	r3,r2,84810 <__smakebuf_r+0x78>
   848e4:	8080030b 	ldhu	r2,12(r16)
   848e8:	00c10004 	movi	r3,1024
   848ec:	1825883a 	mov	r18,r3
   848f0:	10c4b03a 	or	r2,r2,r3
   848f4:	8080030d 	sth	r2,12(r16)
   848f8:	80c01315 	stw	r3,76(r16)
   848fc:	003fca06 	br	84828 <__smakebuf_r+0x90>
   84900:	8100030b 	ldhu	r4,12(r16)
   84904:	2080800c 	andi	r2,r4,512
   84908:	103fb21e 	bne	r2,zero,847d4 <__smakebuf_r+0x3c>
   8490c:	80c010c4 	addi	r3,r16,67
   84910:	21000094 	ori	r4,r4,2
   84914:	00800044 	movi	r2,1
   84918:	80800515 	stw	r2,20(r16)
   8491c:	8100030d 	sth	r4,12(r16)
   84920:	80c00415 	stw	r3,16(r16)
   84924:	80c00015 	stw	r3,0(r16)
   84928:	003faa06 	br	847d4 <__smakebuf_r+0x3c>

0008492c <_malloc_r>:
   8492c:	defff604 	addi	sp,sp,-40
   84930:	28c002c4 	addi	r3,r5,11
   84934:	00800584 	movi	r2,22
   84938:	dc800215 	stw	r18,8(sp)
   8493c:	dfc00915 	stw	ra,36(sp)
   84940:	df000815 	stw	fp,32(sp)
   84944:	ddc00715 	stw	r23,28(sp)
   84948:	dd800615 	stw	r22,24(sp)
   8494c:	dd400515 	stw	r21,20(sp)
   84950:	dd000415 	stw	r20,16(sp)
   84954:	dcc00315 	stw	r19,12(sp)
   84958:	dc400115 	stw	r17,4(sp)
   8495c:	dc000015 	stw	r16,0(sp)
   84960:	2025883a 	mov	r18,r4
   84964:	10c01236 	bltu	r2,r3,849b0 <_malloc_r+0x84>
   84968:	04400404 	movi	r17,16
   8496c:	8940142e 	bgeu	r17,r5,849c0 <_malloc_r+0x94>
   84970:	00800304 	movi	r2,12
   84974:	0007883a 	mov	r3,zero
   84978:	90800015 	stw	r2,0(r18)
   8497c:	1805883a 	mov	r2,r3
   84980:	dfc00917 	ldw	ra,36(sp)
   84984:	df000817 	ldw	fp,32(sp)
   84988:	ddc00717 	ldw	r23,28(sp)
   8498c:	dd800617 	ldw	r22,24(sp)
   84990:	dd400517 	ldw	r21,20(sp)
   84994:	dd000417 	ldw	r20,16(sp)
   84998:	dcc00317 	ldw	r19,12(sp)
   8499c:	dc800217 	ldw	r18,8(sp)
   849a0:	dc400117 	ldw	r17,4(sp)
   849a4:	dc000017 	ldw	r16,0(sp)
   849a8:	dec00a04 	addi	sp,sp,40
   849ac:	f800283a 	ret
   849b0:	00bffe04 	movi	r2,-8
   849b4:	18a2703a 	and	r17,r3,r2
   849b8:	883fed16 	blt	r17,zero,84970 <_malloc_r+0x44>
   849bc:	897fec36 	bltu	r17,r5,84970 <_malloc_r+0x44>
   849c0:	9009883a 	mov	r4,r18
   849c4:	0085aa40 	call	85aa4 <__malloc_lock>
   849c8:	00807dc4 	movi	r2,503
   849cc:	14402b2e 	bgeu	r2,r17,84a7c <_malloc_r+0x150>
   849d0:	8806d27a 	srli	r3,r17,9
   849d4:	18003f1e 	bne	r3,zero,84ad4 <_malloc_r+0x1a8>
   849d8:	880cd0fa 	srli	r6,r17,3
   849dc:	300490fa 	slli	r2,r6,3
   849e0:	02c00234 	movhi	r11,8
   849e4:	5ade9d04 	addi	r11,r11,31348
   849e8:	12cb883a 	add	r5,r2,r11
   849ec:	2c000317 	ldw	r16,12(r5)
   849f0:	580f883a 	mov	r7,r11
   849f4:	2c00041e 	bne	r5,r16,84a08 <_malloc_r+0xdc>
   849f8:	00000a06 	br	84a24 <_malloc_r+0xf8>
   849fc:	1800860e 	bge	r3,zero,84c18 <_malloc_r+0x2ec>
   84a00:	84000317 	ldw	r16,12(r16)
   84a04:	2c000726 	beq	r5,r16,84a24 <_malloc_r+0xf8>
   84a08:	80800117 	ldw	r2,4(r16)
   84a0c:	00ffff04 	movi	r3,-4
   84a10:	10c8703a 	and	r4,r2,r3
   84a14:	2447c83a 	sub	r3,r4,r17
   84a18:	008003c4 	movi	r2,15
   84a1c:	10fff70e 	bge	r2,r3,849fc <_malloc_r+0xd0>
   84a20:	31bfffc4 	addi	r6,r6,-1
   84a24:	32400044 	addi	r9,r6,1
   84a28:	02800234 	movhi	r10,8
   84a2c:	529e9f04 	addi	r10,r10,31356
   84a30:	54000217 	ldw	r16,8(r10)
   84a34:	8280a026 	beq	r16,r10,84cb8 <_malloc_r+0x38c>
   84a38:	80800117 	ldw	r2,4(r16)
   84a3c:	00ffff04 	movi	r3,-4
   84a40:	10ca703a 	and	r5,r2,r3
   84a44:	2c4dc83a 	sub	r6,r5,r17
   84a48:	008003c4 	movi	r2,15
   84a4c:	11808316 	blt	r2,r6,84c5c <_malloc_r+0x330>
   84a50:	52800315 	stw	r10,12(r10)
   84a54:	52800215 	stw	r10,8(r10)
   84a58:	30002916 	blt	r6,zero,84b00 <_malloc_r+0x1d4>
   84a5c:	8147883a 	add	r3,r16,r5
   84a60:	18800117 	ldw	r2,4(r3)
   84a64:	9009883a 	mov	r4,r18
   84a68:	10800054 	ori	r2,r2,1
   84a6c:	18800115 	stw	r2,4(r3)
   84a70:	0085ac40 	call	85ac4 <__malloc_unlock>
   84a74:	80c00204 	addi	r3,r16,8
   84a78:	003fc006 	br	8497c <_malloc_r+0x50>
   84a7c:	02c00234 	movhi	r11,8
   84a80:	5ade9d04 	addi	r11,r11,31348
   84a84:	8ac5883a 	add	r2,r17,r11
   84a88:	14000317 	ldw	r16,12(r2)
   84a8c:	580f883a 	mov	r7,r11
   84a90:	8806d0fa 	srli	r3,r17,3
   84a94:	14006c26 	beq	r2,r16,84c48 <_malloc_r+0x31c>
   84a98:	80c00117 	ldw	r3,4(r16)
   84a9c:	00bfff04 	movi	r2,-4
   84aa0:	81800317 	ldw	r6,12(r16)
   84aa4:	1886703a 	and	r3,r3,r2
   84aa8:	80c7883a 	add	r3,r16,r3
   84aac:	18800117 	ldw	r2,4(r3)
   84ab0:	81400217 	ldw	r5,8(r16)
   84ab4:	9009883a 	mov	r4,r18
   84ab8:	10800054 	ori	r2,r2,1
   84abc:	18800115 	stw	r2,4(r3)
   84ac0:	31400215 	stw	r5,8(r6)
   84ac4:	29800315 	stw	r6,12(r5)
   84ac8:	0085ac40 	call	85ac4 <__malloc_unlock>
   84acc:	80c00204 	addi	r3,r16,8
   84ad0:	003faa06 	br	8497c <_malloc_r+0x50>
   84ad4:	00800104 	movi	r2,4
   84ad8:	10c0052e 	bgeu	r2,r3,84af0 <_malloc_r+0x1c4>
   84adc:	00800504 	movi	r2,20
   84ae0:	10c07836 	bltu	r2,r3,84cc4 <_malloc_r+0x398>
   84ae4:	198016c4 	addi	r6,r3,91
   84ae8:	300490fa 	slli	r2,r6,3
   84aec:	003fbc06 	br	849e0 <_malloc_r+0xb4>
   84af0:	8804d1ba 	srli	r2,r17,6
   84af4:	11800e04 	addi	r6,r2,56
   84af8:	300490fa 	slli	r2,r6,3
   84afc:	003fb806 	br	849e0 <_malloc_r+0xb4>
   84b00:	00807fc4 	movi	r2,511
   84b04:	1140bb36 	bltu	r2,r5,84df4 <_malloc_r+0x4c8>
   84b08:	2806d0fa 	srli	r3,r5,3
   84b0c:	573ffe04 	addi	fp,r10,-8
   84b10:	00800044 	movi	r2,1
   84b14:	180890fa 	slli	r4,r3,3
   84b18:	1807d0ba 	srai	r3,r3,2
   84b1c:	e1c00117 	ldw	r7,4(fp)
   84b20:	5909883a 	add	r4,r11,r4
   84b24:	21400217 	ldw	r5,8(r4)
   84b28:	10c4983a 	sll	r2,r2,r3
   84b2c:	81000315 	stw	r4,12(r16)
   84b30:	81400215 	stw	r5,8(r16)
   84b34:	388eb03a 	or	r7,r7,r2
   84b38:	2c000315 	stw	r16,12(r5)
   84b3c:	24000215 	stw	r16,8(r4)
   84b40:	e1c00115 	stw	r7,4(fp)
   84b44:	4807883a 	mov	r3,r9
   84b48:	4800cd16 	blt	r9,zero,84e80 <_malloc_r+0x554>
   84b4c:	1807d0ba 	srai	r3,r3,2
   84b50:	00800044 	movi	r2,1
   84b54:	10c8983a 	sll	r4,r2,r3
   84b58:	39004436 	bltu	r7,r4,84c6c <_malloc_r+0x340>
   84b5c:	21c4703a 	and	r2,r4,r7
   84b60:	10000a1e 	bne	r2,zero,84b8c <_malloc_r+0x260>
   84b64:	2109883a 	add	r4,r4,r4
   84b68:	00bfff04 	movi	r2,-4
   84b6c:	4884703a 	and	r2,r9,r2
   84b70:	3906703a 	and	r3,r7,r4
   84b74:	12400104 	addi	r9,r2,4
   84b78:	1800041e 	bne	r3,zero,84b8c <_malloc_r+0x260>
   84b7c:	2109883a 	add	r4,r4,r4
   84b80:	3904703a 	and	r2,r7,r4
   84b84:	4a400104 	addi	r9,r9,4
   84b88:	103ffc26 	beq	r2,zero,84b7c <_malloc_r+0x250>
   84b8c:	480490fa 	slli	r2,r9,3
   84b90:	4819883a 	mov	r12,r9
   84b94:	023fff04 	movi	r8,-4
   84b98:	589b883a 	add	r13,r11,r2
   84b9c:	6807883a 	mov	r3,r13
   84ba0:	014003c4 	movi	r5,15
   84ba4:	1c000317 	ldw	r16,12(r3)
   84ba8:	1c00041e 	bne	r3,r16,84bbc <_malloc_r+0x290>
   84bac:	0000a706 	br	84e4c <_malloc_r+0x520>
   84bb0:	3000ab0e 	bge	r6,zero,84e60 <_malloc_r+0x534>
   84bb4:	84000317 	ldw	r16,12(r16)
   84bb8:	1c00a426 	beq	r3,r16,84e4c <_malloc_r+0x520>
   84bbc:	80800117 	ldw	r2,4(r16)
   84bc0:	1204703a 	and	r2,r2,r8
   84bc4:	144dc83a 	sub	r6,r2,r17
   84bc8:	29bff90e 	bge	r5,r6,84bb0 <_malloc_r+0x284>
   84bcc:	81000317 	ldw	r4,12(r16)
   84bd0:	80c00217 	ldw	r3,8(r16)
   84bd4:	89400054 	ori	r5,r17,1
   84bd8:	8445883a 	add	r2,r16,r17
   84bdc:	20c00215 	stw	r3,8(r4)
   84be0:	19000315 	stw	r4,12(r3)
   84be4:	81400115 	stw	r5,4(r16)
   84be8:	1187883a 	add	r3,r2,r6
   84bec:	31000054 	ori	r4,r6,1
   84bf0:	50800315 	stw	r2,12(r10)
   84bf4:	50800215 	stw	r2,8(r10)
   84bf8:	19800015 	stw	r6,0(r3)
   84bfc:	11000115 	stw	r4,4(r2)
   84c00:	12800215 	stw	r10,8(r2)
   84c04:	12800315 	stw	r10,12(r2)
   84c08:	9009883a 	mov	r4,r18
   84c0c:	0085ac40 	call	85ac4 <__malloc_unlock>
   84c10:	80c00204 	addi	r3,r16,8
   84c14:	003f5906 	br	8497c <_malloc_r+0x50>
   84c18:	8109883a 	add	r4,r16,r4
   84c1c:	20800117 	ldw	r2,4(r4)
   84c20:	80c00217 	ldw	r3,8(r16)
   84c24:	81400317 	ldw	r5,12(r16)
   84c28:	10800054 	ori	r2,r2,1
   84c2c:	20800115 	stw	r2,4(r4)
   84c30:	28c00215 	stw	r3,8(r5)
   84c34:	19400315 	stw	r5,12(r3)
   84c38:	9009883a 	mov	r4,r18
   84c3c:	0085ac40 	call	85ac4 <__malloc_unlock>
   84c40:	80c00204 	addi	r3,r16,8
   84c44:	003f4d06 	br	8497c <_malloc_r+0x50>
   84c48:	80800204 	addi	r2,r16,8
   84c4c:	14000317 	ldw	r16,12(r2)
   84c50:	143f911e 	bne	r2,r16,84a98 <_malloc_r+0x16c>
   84c54:	1a400084 	addi	r9,r3,2
   84c58:	003f7306 	br	84a28 <_malloc_r+0xfc>
   84c5c:	88c00054 	ori	r3,r17,1
   84c60:	8445883a 	add	r2,r16,r17
   84c64:	80c00115 	stw	r3,4(r16)
   84c68:	003fdf06 	br	84be8 <_malloc_r+0x2bc>
   84c6c:	e4000217 	ldw	r16,8(fp)
   84c70:	00bfff04 	movi	r2,-4
   84c74:	80c00117 	ldw	r3,4(r16)
   84c78:	802d883a 	mov	r22,r16
   84c7c:	18aa703a 	and	r21,r3,r2
   84c80:	ac401636 	bltu	r21,r17,84cdc <_malloc_r+0x3b0>
   84c84:	ac49c83a 	sub	r4,r21,r17
   84c88:	008003c4 	movi	r2,15
   84c8c:	1100130e 	bge	r2,r4,84cdc <_malloc_r+0x3b0>
   84c90:	88800054 	ori	r2,r17,1
   84c94:	8447883a 	add	r3,r16,r17
   84c98:	80800115 	stw	r2,4(r16)
   84c9c:	20800054 	ori	r2,r4,1
   84ca0:	18800115 	stw	r2,4(r3)
   84ca4:	e0c00215 	stw	r3,8(fp)
   84ca8:	9009883a 	mov	r4,r18
   84cac:	0085ac40 	call	85ac4 <__malloc_unlock>
   84cb0:	80c00204 	addi	r3,r16,8
   84cb4:	003f3106 	br	8497c <_malloc_r+0x50>
   84cb8:	39c00117 	ldw	r7,4(r7)
   84cbc:	573ffe04 	addi	fp,r10,-8
   84cc0:	003fa006 	br	84b44 <_malloc_r+0x218>
   84cc4:	00801504 	movi	r2,84
   84cc8:	10c06736 	bltu	r2,r3,84e68 <_malloc_r+0x53c>
   84ccc:	8804d33a 	srli	r2,r17,12
   84cd0:	11801b84 	addi	r6,r2,110
   84cd4:	300490fa 	slli	r2,r6,3
   84cd8:	003f4106 	br	849e0 <_malloc_r+0xb4>
   84cdc:	d0a7c617 	ldw	r2,-24808(gp)
   84ce0:	d0e00e17 	ldw	r3,-32712(gp)
   84ce4:	053fffc4 	movi	r20,-1
   84ce8:	10800404 	addi	r2,r2,16
   84cec:	88a7883a 	add	r19,r17,r2
   84cf0:	1d000326 	beq	r3,r20,84d00 <_malloc_r+0x3d4>
   84cf4:	98c3ffc4 	addi	r3,r19,4095
   84cf8:	00bc0004 	movi	r2,-4096
   84cfc:	18a6703a 	and	r19,r3,r2
   84d00:	9009883a 	mov	r4,r18
   84d04:	980b883a 	mov	r5,r19
   84d08:	00851040 	call	85104 <_sbrk_r>
   84d0c:	1009883a 	mov	r4,r2
   84d10:	15000426 	beq	r2,r20,84d24 <_malloc_r+0x3f8>
   84d14:	854b883a 	add	r5,r16,r21
   84d18:	1029883a 	mov	r20,r2
   84d1c:	11405a2e 	bgeu	r2,r5,84e88 <_malloc_r+0x55c>
   84d20:	87000c26 	beq	r16,fp,84d54 <_malloc_r+0x428>
   84d24:	e4000217 	ldw	r16,8(fp)
   84d28:	80c00117 	ldw	r3,4(r16)
   84d2c:	00bfff04 	movi	r2,-4
   84d30:	1884703a 	and	r2,r3,r2
   84d34:	14400336 	bltu	r2,r17,84d44 <_malloc_r+0x418>
   84d38:	1449c83a 	sub	r4,r2,r17
   84d3c:	008003c4 	movi	r2,15
   84d40:	113fd316 	blt	r2,r4,84c90 <_malloc_r+0x364>
   84d44:	9009883a 	mov	r4,r18
   84d48:	0085ac40 	call	85ac4 <__malloc_unlock>
   84d4c:	0007883a 	mov	r3,zero
   84d50:	003f0a06 	br	8497c <_malloc_r+0x50>
   84d54:	05c00274 	movhi	r23,9
   84d58:	bde86804 	addi	r23,r23,-24160
   84d5c:	b8800017 	ldw	r2,0(r23)
   84d60:	988d883a 	add	r6,r19,r2
   84d64:	b9800015 	stw	r6,0(r23)
   84d68:	d0e00e17 	ldw	r3,-32712(gp)
   84d6c:	00bfffc4 	movi	r2,-1
   84d70:	18808e26 	beq	r3,r2,84fac <_malloc_r+0x680>
   84d74:	2145c83a 	sub	r2,r4,r5
   84d78:	3085883a 	add	r2,r6,r2
   84d7c:	b8800015 	stw	r2,0(r23)
   84d80:	20c001cc 	andi	r3,r4,7
   84d84:	18005f1e 	bne	r3,zero,84f04 <_malloc_r+0x5d8>
   84d88:	000b883a 	mov	r5,zero
   84d8c:	a4c5883a 	add	r2,r20,r19
   84d90:	1083ffcc 	andi	r2,r2,4095
   84d94:	00c40004 	movi	r3,4096
   84d98:	1887c83a 	sub	r3,r3,r2
   84d9c:	28e7883a 	add	r19,r5,r3
   84da0:	9009883a 	mov	r4,r18
   84da4:	980b883a 	mov	r5,r19
   84da8:	00851040 	call	85104 <_sbrk_r>
   84dac:	1007883a 	mov	r3,r2
   84db0:	00bfffc4 	movi	r2,-1
   84db4:	18807a26 	beq	r3,r2,84fa0 <_malloc_r+0x674>
   84db8:	1d05c83a 	sub	r2,r3,r20
   84dbc:	9885883a 	add	r2,r19,r2
   84dc0:	10c00054 	ori	r3,r2,1
   84dc4:	b8800017 	ldw	r2,0(r23)
   84dc8:	a021883a 	mov	r16,r20
   84dcc:	a0c00115 	stw	r3,4(r20)
   84dd0:	9885883a 	add	r2,r19,r2
   84dd4:	b8800015 	stw	r2,0(r23)
   84dd8:	e5000215 	stw	r20,8(fp)
   84ddc:	b7003626 	beq	r22,fp,84eb8 <_malloc_r+0x58c>
   84de0:	018003c4 	movi	r6,15
   84de4:	35404b36 	bltu	r6,r21,84f14 <_malloc_r+0x5e8>
   84de8:	00800044 	movi	r2,1
   84dec:	a0800115 	stw	r2,4(r20)
   84df0:	003fcd06 	br	84d28 <_malloc_r+0x3fc>
   84df4:	2808d27a 	srli	r4,r5,9
   84df8:	2000371e 	bne	r4,zero,84ed8 <_malloc_r+0x5ac>
   84dfc:	2808d0fa 	srli	r4,r5,3
   84e00:	200690fa 	slli	r3,r4,3
   84e04:	1ad1883a 	add	r8,r3,r11
   84e08:	41800217 	ldw	r6,8(r8)
   84e0c:	41805b26 	beq	r8,r6,84f7c <_malloc_r+0x650>
   84e10:	30800117 	ldw	r2,4(r6)
   84e14:	00ffff04 	movi	r3,-4
   84e18:	10c4703a 	and	r2,r2,r3
   84e1c:	2880022e 	bgeu	r5,r2,84e28 <_malloc_r+0x4fc>
   84e20:	31800217 	ldw	r6,8(r6)
   84e24:	41bffa1e 	bne	r8,r6,84e10 <_malloc_r+0x4e4>
   84e28:	32000317 	ldw	r8,12(r6)
   84e2c:	39c00117 	ldw	r7,4(r7)
   84e30:	82000315 	stw	r8,12(r16)
   84e34:	81800215 	stw	r6,8(r16)
   84e38:	07000234 	movhi	fp,8
   84e3c:	e71e9d04 	addi	fp,fp,31348
   84e40:	34000315 	stw	r16,12(r6)
   84e44:	44000215 	stw	r16,8(r8)
   84e48:	003f3e06 	br	84b44 <_malloc_r+0x218>
   84e4c:	63000044 	addi	r12,r12,1
   84e50:	608000cc 	andi	r2,r12,3
   84e54:	10005d26 	beq	r2,zero,84fcc <_malloc_r+0x6a0>
   84e58:	18c00204 	addi	r3,r3,8
   84e5c:	003f5106 	br	84ba4 <_malloc_r+0x278>
   84e60:	8089883a 	add	r4,r16,r2
   84e64:	003f6d06 	br	84c1c <_malloc_r+0x2f0>
   84e68:	00805504 	movi	r2,340
   84e6c:	10c02036 	bltu	r2,r3,84ef0 <_malloc_r+0x5c4>
   84e70:	8804d3fa 	srli	r2,r17,15
   84e74:	11801dc4 	addi	r6,r2,119
   84e78:	300490fa 	slli	r2,r6,3
   84e7c:	003ed806 	br	849e0 <_malloc_r+0xb4>
   84e80:	48c000c4 	addi	r3,r9,3
   84e84:	003f3106 	br	84b4c <_malloc_r+0x220>
   84e88:	05c00274 	movhi	r23,9
   84e8c:	bde86804 	addi	r23,r23,-24160
   84e90:	b8800017 	ldw	r2,0(r23)
   84e94:	988d883a 	add	r6,r19,r2
   84e98:	b9800015 	stw	r6,0(r23)
   84e9c:	293fb21e 	bne	r5,r4,84d68 <_malloc_r+0x43c>
   84ea0:	2083ffcc 	andi	r2,r4,4095
   84ea4:	103fb01e 	bne	r2,zero,84d68 <_malloc_r+0x43c>
   84ea8:	e4000217 	ldw	r16,8(fp)
   84eac:	9d45883a 	add	r2,r19,r21
   84eb0:	10800054 	ori	r2,r2,1
   84eb4:	80800115 	stw	r2,4(r16)
   84eb8:	b8c00017 	ldw	r3,0(r23)
   84ebc:	d0a7c717 	ldw	r2,-24804(gp)
   84ec0:	10c0012e 	bgeu	r2,r3,84ec8 <_malloc_r+0x59c>
   84ec4:	d0e7c715 	stw	r3,-24804(gp)
   84ec8:	d0a7c817 	ldw	r2,-24800(gp)
   84ecc:	10ff962e 	bgeu	r2,r3,84d28 <_malloc_r+0x3fc>
   84ed0:	d0e7c815 	stw	r3,-24800(gp)
   84ed4:	003f9406 	br	84d28 <_malloc_r+0x3fc>
   84ed8:	00800104 	movi	r2,4
   84edc:	11001e36 	bltu	r2,r4,84f58 <_malloc_r+0x62c>
   84ee0:	2804d1ba 	srli	r2,r5,6
   84ee4:	11000e04 	addi	r4,r2,56
   84ee8:	200690fa 	slli	r3,r4,3
   84eec:	003fc506 	br	84e04 <_malloc_r+0x4d8>
   84ef0:	00815504 	movi	r2,1364
   84ef4:	10c01d2e 	bgeu	r2,r3,84f6c <_malloc_r+0x640>
   84ef8:	01801f84 	movi	r6,126
   84efc:	0080fc04 	movi	r2,1008
   84f00:	003eb706 	br	849e0 <_malloc_r+0xb4>
   84f04:	00800204 	movi	r2,8
   84f08:	10cbc83a 	sub	r5,r2,r3
   84f0c:	2169883a 	add	r20,r4,r5
   84f10:	003f9e06 	br	84d8c <_malloc_r+0x460>
   84f14:	00bffe04 	movi	r2,-8
   84f18:	a93ffd04 	addi	r4,r21,-12
   84f1c:	2088703a 	and	r4,r4,r2
   84f20:	b10b883a 	add	r5,r22,r4
   84f24:	00c00144 	movi	r3,5
   84f28:	28c00215 	stw	r3,8(r5)
   84f2c:	28c00115 	stw	r3,4(r5)
   84f30:	b0800117 	ldw	r2,4(r22)
   84f34:	1080004c 	andi	r2,r2,1
   84f38:	2084b03a 	or	r2,r4,r2
   84f3c:	b0800115 	stw	r2,4(r22)
   84f40:	313fdd2e 	bgeu	r6,r4,84eb8 <_malloc_r+0x58c>
   84f44:	b1400204 	addi	r5,r22,8
   84f48:	9009883a 	mov	r4,r18
   84f4c:	00843040 	call	84304 <_free_r>
   84f50:	e4000217 	ldw	r16,8(fp)
   84f54:	003fd806 	br	84eb8 <_malloc_r+0x58c>
   84f58:	00800504 	movi	r2,20
   84f5c:	11001536 	bltu	r2,r4,84fb4 <_malloc_r+0x688>
   84f60:	210016c4 	addi	r4,r4,91
   84f64:	200690fa 	slli	r3,r4,3
   84f68:	003fa606 	br	84e04 <_malloc_r+0x4d8>
   84f6c:	8804d4ba 	srli	r2,r17,18
   84f70:	11801f04 	addi	r6,r2,124
   84f74:	300490fa 	slli	r2,r6,3
   84f78:	003e9906 	br	849e0 <_malloc_r+0xb4>
   84f7c:	2009d0ba 	srai	r4,r4,2
   84f80:	01400234 	movhi	r5,8
   84f84:	295e9d04 	addi	r5,r5,31348
   84f88:	00c00044 	movi	r3,1
   84f8c:	28800117 	ldw	r2,4(r5)
   84f90:	1906983a 	sll	r3,r3,r4
   84f94:	10c4b03a 	or	r2,r2,r3
   84f98:	28800115 	stw	r2,4(r5)
   84f9c:	003fa306 	br	84e2c <_malloc_r+0x500>
   84fa0:	0027883a 	mov	r19,zero
   84fa4:	00c00044 	movi	r3,1
   84fa8:	003f8606 	br	84dc4 <_malloc_r+0x498>
   84fac:	d1200e15 	stw	r4,-32712(gp)
   84fb0:	003f7306 	br	84d80 <_malloc_r+0x454>
   84fb4:	00801504 	movi	r2,84
   84fb8:	11001936 	bltu	r2,r4,85020 <_malloc_r+0x6f4>
   84fbc:	2804d33a 	srli	r2,r5,12
   84fc0:	11001b84 	addi	r4,r2,110
   84fc4:	200690fa 	slli	r3,r4,3
   84fc8:	003f8e06 	br	84e04 <_malloc_r+0x4d8>
   84fcc:	480b883a 	mov	r5,r9
   84fd0:	6807883a 	mov	r3,r13
   84fd4:	288000cc 	andi	r2,r5,3
   84fd8:	18fffe04 	addi	r3,r3,-8
   84fdc:	297fffc4 	addi	r5,r5,-1
   84fe0:	10001526 	beq	r2,zero,85038 <_malloc_r+0x70c>
   84fe4:	18800217 	ldw	r2,8(r3)
   84fe8:	10fffa26 	beq	r2,r3,84fd4 <_malloc_r+0x6a8>
   84fec:	2109883a 	add	r4,r4,r4
   84ff0:	393f1e36 	bltu	r7,r4,84c6c <_malloc_r+0x340>
   84ff4:	203f1d26 	beq	r4,zero,84c6c <_malloc_r+0x340>
   84ff8:	21c4703a 	and	r2,r4,r7
   84ffc:	10000226 	beq	r2,zero,85008 <_malloc_r+0x6dc>
   85000:	6013883a 	mov	r9,r12
   85004:	003ee106 	br	84b8c <_malloc_r+0x260>
   85008:	2109883a 	add	r4,r4,r4
   8500c:	3904703a 	and	r2,r7,r4
   85010:	63000104 	addi	r12,r12,4
   85014:	103ffc26 	beq	r2,zero,85008 <_malloc_r+0x6dc>
   85018:	6013883a 	mov	r9,r12
   8501c:	003edb06 	br	84b8c <_malloc_r+0x260>
   85020:	00805504 	movi	r2,340
   85024:	11000836 	bltu	r2,r4,85048 <_malloc_r+0x71c>
   85028:	2804d3fa 	srli	r2,r5,15
   8502c:	11001dc4 	addi	r4,r2,119
   85030:	200690fa 	slli	r3,r4,3
   85034:	003f7306 	br	84e04 <_malloc_r+0x4d8>
   85038:	0104303a 	nor	r2,zero,r4
   8503c:	388e703a 	and	r7,r7,r2
   85040:	e1c00115 	stw	r7,4(fp)
   85044:	003fe906 	br	84fec <_malloc_r+0x6c0>
   85048:	00815504 	movi	r2,1364
   8504c:	1100032e 	bgeu	r2,r4,8505c <_malloc_r+0x730>
   85050:	01001f84 	movi	r4,126
   85054:	00c0fc04 	movi	r3,1008
   85058:	003f6a06 	br	84e04 <_malloc_r+0x4d8>
   8505c:	2804d4ba 	srli	r2,r5,18
   85060:	11001f04 	addi	r4,r2,124
   85064:	200690fa 	slli	r3,r4,3
   85068:	003f6606 	br	84e04 <_malloc_r+0x4d8>

0008506c <memset>:
   8506c:	008000c4 	movi	r2,3
   85070:	29403fcc 	andi	r5,r5,255
   85074:	2007883a 	mov	r3,r4
   85078:	1180022e 	bgeu	r2,r6,85084 <memset+0x18>
   8507c:	2084703a 	and	r2,r4,r2
   85080:	10000826 	beq	r2,zero,850a4 <memset+0x38>
   85084:	30000526 	beq	r6,zero,8509c <memset+0x30>
   85088:	2805883a 	mov	r2,r5
   8508c:	30cd883a 	add	r6,r6,r3
   85090:	18800005 	stb	r2,0(r3)
   85094:	18c00044 	addi	r3,r3,1
   85098:	19bffd1e 	bne	r3,r6,85090 <memset+0x24>
   8509c:	2005883a 	mov	r2,r4
   850a0:	f800283a 	ret
   850a4:	2804923a 	slli	r2,r5,8
   850a8:	020003c4 	movi	r8,15
   850ac:	200f883a 	mov	r7,r4
   850b0:	2884b03a 	or	r2,r5,r2
   850b4:	1006943a 	slli	r3,r2,16
   850b8:	10c6b03a 	or	r3,r2,r3
   850bc:	41800a2e 	bgeu	r8,r6,850e8 <memset+0x7c>
   850c0:	4005883a 	mov	r2,r8
   850c4:	31bffc04 	addi	r6,r6,-16
   850c8:	38c00015 	stw	r3,0(r7)
   850cc:	38c00115 	stw	r3,4(r7)
   850d0:	38c00215 	stw	r3,8(r7)
   850d4:	38c00315 	stw	r3,12(r7)
   850d8:	39c00404 	addi	r7,r7,16
   850dc:	11bff936 	bltu	r2,r6,850c4 <memset+0x58>
   850e0:	008000c4 	movi	r2,3
   850e4:	1180052e 	bgeu	r2,r6,850fc <memset+0x90>
   850e8:	31bfff04 	addi	r6,r6,-4
   850ec:	008000c4 	movi	r2,3
   850f0:	38c00015 	stw	r3,0(r7)
   850f4:	39c00104 	addi	r7,r7,4
   850f8:	11bffb36 	bltu	r2,r6,850e8 <memset+0x7c>
   850fc:	3807883a 	mov	r3,r7
   85100:	003fe006 	br	85084 <memset+0x18>

00085104 <_sbrk_r>:
   85104:	defffd04 	addi	sp,sp,-12
   85108:	dc000015 	stw	r16,0(sp)
   8510c:	04000274 	movhi	r16,9
   85110:	84276404 	addi	r16,r16,-25200
   85114:	dc400115 	stw	r17,4(sp)
   85118:	80000015 	stw	zero,0(r16)
   8511c:	2023883a 	mov	r17,r4
   85120:	2809883a 	mov	r4,r5
   85124:	dfc00215 	stw	ra,8(sp)
   85128:	0085c640 	call	85c64 <sbrk>
   8512c:	1007883a 	mov	r3,r2
   85130:	00bfffc4 	movi	r2,-1
   85134:	18800626 	beq	r3,r2,85150 <_sbrk_r+0x4c>
   85138:	1805883a 	mov	r2,r3
   8513c:	dfc00217 	ldw	ra,8(sp)
   85140:	dc400117 	ldw	r17,4(sp)
   85144:	dc000017 	ldw	r16,0(sp)
   85148:	dec00304 	addi	sp,sp,12
   8514c:	f800283a 	ret
   85150:	80800017 	ldw	r2,0(r16)
   85154:	103ff826 	beq	r2,zero,85138 <_sbrk_r+0x34>
   85158:	88800015 	stw	r2,0(r17)
   8515c:	1805883a 	mov	r2,r3
   85160:	dfc00217 	ldw	ra,8(sp)
   85164:	dc400117 	ldw	r17,4(sp)
   85168:	dc000017 	ldw	r16,0(sp)
   8516c:	dec00304 	addi	sp,sp,12
   85170:	f800283a 	ret

00085174 <__sclose>:
   85174:	2940038f 	ldh	r5,14(r5)
   85178:	00853381 	jmpi	85338 <_close_r>

0008517c <__sseek>:
   8517c:	defffe04 	addi	sp,sp,-8
   85180:	dc000015 	stw	r16,0(sp)
   85184:	2821883a 	mov	r16,r5
   85188:	2940038f 	ldh	r5,14(r5)
   8518c:	dfc00115 	stw	ra,4(sp)
   85190:	00855b00 	call	855b0 <_lseek_r>
   85194:	1007883a 	mov	r3,r2
   85198:	00bfffc4 	movi	r2,-1
   8519c:	18800926 	beq	r3,r2,851c4 <__sseek+0x48>
   851a0:	8080030b 	ldhu	r2,12(r16)
   851a4:	80c01415 	stw	r3,80(r16)
   851a8:	10840014 	ori	r2,r2,4096
   851ac:	8080030d 	sth	r2,12(r16)
   851b0:	1805883a 	mov	r2,r3
   851b4:	dfc00117 	ldw	ra,4(sp)
   851b8:	dc000017 	ldw	r16,0(sp)
   851bc:	dec00204 	addi	sp,sp,8
   851c0:	f800283a 	ret
   851c4:	8080030b 	ldhu	r2,12(r16)
   851c8:	10bbffcc 	andi	r2,r2,61439
   851cc:	8080030d 	sth	r2,12(r16)
   851d0:	1805883a 	mov	r2,r3
   851d4:	dfc00117 	ldw	ra,4(sp)
   851d8:	dc000017 	ldw	r16,0(sp)
   851dc:	dec00204 	addi	sp,sp,8
   851e0:	f800283a 	ret

000851e4 <__swrite>:
   851e4:	2880030b 	ldhu	r2,12(r5)
   851e8:	defffb04 	addi	sp,sp,-20
   851ec:	dcc00315 	stw	r19,12(sp)
   851f0:	1080400c 	andi	r2,r2,256
   851f4:	dc800215 	stw	r18,8(sp)
   851f8:	dc400115 	stw	r17,4(sp)
   851fc:	dc000015 	stw	r16,0(sp)
   85200:	3027883a 	mov	r19,r6
   85204:	3825883a 	mov	r18,r7
   85208:	dfc00415 	stw	ra,16(sp)
   8520c:	2821883a 	mov	r16,r5
   85210:	000d883a 	mov	r6,zero
   85214:	01c00084 	movi	r7,2
   85218:	2023883a 	mov	r17,r4
   8521c:	10000226 	beq	r2,zero,85228 <__swrite+0x44>
   85220:	2940038f 	ldh	r5,14(r5)
   85224:	00855b00 	call	855b0 <_lseek_r>
   85228:	8080030b 	ldhu	r2,12(r16)
   8522c:	8140038f 	ldh	r5,14(r16)
   85230:	8809883a 	mov	r4,r17
   85234:	10bbffcc 	andi	r2,r2,61439
   85238:	980d883a 	mov	r6,r19
   8523c:	900f883a 	mov	r7,r18
   85240:	8080030d 	sth	r2,12(r16)
   85244:	dfc00417 	ldw	ra,16(sp)
   85248:	dcc00317 	ldw	r19,12(sp)
   8524c:	dc800217 	ldw	r18,8(sp)
   85250:	dc400117 	ldw	r17,4(sp)
   85254:	dc000017 	ldw	r16,0(sp)
   85258:	dec00504 	addi	sp,sp,20
   8525c:	00852c01 	jmpi	852c0 <_write_r>

00085260 <__sread>:
   85260:	defffe04 	addi	sp,sp,-8
   85264:	dc000015 	stw	r16,0(sp)
   85268:	2821883a 	mov	r16,r5
   8526c:	2940038f 	ldh	r5,14(r5)
   85270:	dfc00115 	stw	ra,4(sp)
   85274:	00856280 	call	85628 <_read_r>
   85278:	1007883a 	mov	r3,r2
   8527c:	10000816 	blt	r2,zero,852a0 <__sread+0x40>
   85280:	80801417 	ldw	r2,80(r16)
   85284:	10c5883a 	add	r2,r2,r3
   85288:	80801415 	stw	r2,80(r16)
   8528c:	1805883a 	mov	r2,r3
   85290:	dfc00117 	ldw	ra,4(sp)
   85294:	dc000017 	ldw	r16,0(sp)
   85298:	dec00204 	addi	sp,sp,8
   8529c:	f800283a 	ret
   852a0:	8080030b 	ldhu	r2,12(r16)
   852a4:	10bbffcc 	andi	r2,r2,61439
   852a8:	8080030d 	sth	r2,12(r16)
   852ac:	1805883a 	mov	r2,r3
   852b0:	dfc00117 	ldw	ra,4(sp)
   852b4:	dc000017 	ldw	r16,0(sp)
   852b8:	dec00204 	addi	sp,sp,8
   852bc:	f800283a 	ret

000852c0 <_write_r>:
   852c0:	defffd04 	addi	sp,sp,-12
   852c4:	dc000015 	stw	r16,0(sp)
   852c8:	04000274 	movhi	r16,9
   852cc:	84276404 	addi	r16,r16,-25200
   852d0:	dc400115 	stw	r17,4(sp)
   852d4:	80000015 	stw	zero,0(r16)
   852d8:	2023883a 	mov	r17,r4
   852dc:	2809883a 	mov	r4,r5
   852e0:	300b883a 	mov	r5,r6
   852e4:	380d883a 	mov	r6,r7
   852e8:	dfc00215 	stw	ra,8(sp)
   852ec:	0085d200 	call	85d20 <write>
   852f0:	1007883a 	mov	r3,r2
   852f4:	00bfffc4 	movi	r2,-1
   852f8:	18800626 	beq	r3,r2,85314 <_write_r+0x54>
   852fc:	1805883a 	mov	r2,r3
   85300:	dfc00217 	ldw	ra,8(sp)
   85304:	dc400117 	ldw	r17,4(sp)
   85308:	dc000017 	ldw	r16,0(sp)
   8530c:	dec00304 	addi	sp,sp,12
   85310:	f800283a 	ret
   85314:	80800017 	ldw	r2,0(r16)
   85318:	103ff826 	beq	r2,zero,852fc <_write_r+0x3c>
   8531c:	88800015 	stw	r2,0(r17)
   85320:	1805883a 	mov	r2,r3
   85324:	dfc00217 	ldw	ra,8(sp)
   85328:	dc400117 	ldw	r17,4(sp)
   8532c:	dc000017 	ldw	r16,0(sp)
   85330:	dec00304 	addi	sp,sp,12
   85334:	f800283a 	ret

00085338 <_close_r>:
   85338:	defffd04 	addi	sp,sp,-12
   8533c:	dc000015 	stw	r16,0(sp)
   85340:	04000274 	movhi	r16,9
   85344:	84276404 	addi	r16,r16,-25200
   85348:	dc400115 	stw	r17,4(sp)
   8534c:	80000015 	stw	zero,0(r16)
   85350:	2023883a 	mov	r17,r4
   85354:	2809883a 	mov	r4,r5
   85358:	dfc00215 	stw	ra,8(sp)
   8535c:	00823b80 	call	823b8 <close>
   85360:	1007883a 	mov	r3,r2
   85364:	00bfffc4 	movi	r2,-1
   85368:	18800626 	beq	r3,r2,85384 <_close_r+0x4c>
   8536c:	1805883a 	mov	r2,r3
   85370:	dfc00217 	ldw	ra,8(sp)
   85374:	dc400117 	ldw	r17,4(sp)
   85378:	dc000017 	ldw	r16,0(sp)
   8537c:	dec00304 	addi	sp,sp,12
   85380:	f800283a 	ret
   85384:	80800017 	ldw	r2,0(r16)
   85388:	103ff826 	beq	r2,zero,8536c <_close_r+0x34>
   8538c:	88800015 	stw	r2,0(r17)
   85390:	1805883a 	mov	r2,r3
   85394:	dfc00217 	ldw	ra,8(sp)
   85398:	dc400117 	ldw	r17,4(sp)
   8539c:	dc000017 	ldw	r16,0(sp)
   853a0:	dec00304 	addi	sp,sp,12
   853a4:	f800283a 	ret

000853a8 <_fclose_r>:
   853a8:	defffc04 	addi	sp,sp,-16
   853ac:	dc400115 	stw	r17,4(sp)
   853b0:	dc000015 	stw	r16,0(sp)
   853b4:	dfc00315 	stw	ra,12(sp)
   853b8:	dc800215 	stw	r18,8(sp)
   853bc:	2821883a 	mov	r16,r5
   853c0:	2023883a 	mov	r17,r4
   853c4:	28002926 	beq	r5,zero,8546c <_fclose_r+0xc4>
   853c8:	0083f700 	call	83f70 <__sfp_lock_acquire>
   853cc:	88000226 	beq	r17,zero,853d8 <_fclose_r+0x30>
   853d0:	88800e17 	ldw	r2,56(r17)
   853d4:	10002d26 	beq	r2,zero,8548c <_fclose_r+0xe4>
   853d8:	8080030f 	ldh	r2,12(r16)
   853dc:	10002226 	beq	r2,zero,85468 <_fclose_r+0xc0>
   853e0:	8809883a 	mov	r4,r17
   853e4:	800b883a 	mov	r5,r16
   853e8:	0083ce80 	call	83ce8 <_fflush_r>
   853ec:	1025883a 	mov	r18,r2
   853f0:	80800b17 	ldw	r2,44(r16)
   853f4:	10000426 	beq	r2,zero,85408 <_fclose_r+0x60>
   853f8:	81400717 	ldw	r5,28(r16)
   853fc:	8809883a 	mov	r4,r17
   85400:	103ee83a 	callr	r2
   85404:	10002a16 	blt	r2,zero,854b0 <_fclose_r+0x108>
   85408:	8080030b 	ldhu	r2,12(r16)
   8540c:	1080200c 	andi	r2,r2,128
   85410:	1000231e 	bne	r2,zero,854a0 <_fclose_r+0xf8>
   85414:	81400c17 	ldw	r5,48(r16)
   85418:	28000526 	beq	r5,zero,85430 <_fclose_r+0x88>
   8541c:	80801004 	addi	r2,r16,64
   85420:	28800226 	beq	r5,r2,8542c <_fclose_r+0x84>
   85424:	8809883a 	mov	r4,r17
   85428:	00843040 	call	84304 <_free_r>
   8542c:	80000c15 	stw	zero,48(r16)
   85430:	81401117 	ldw	r5,68(r16)
   85434:	28000326 	beq	r5,zero,85444 <_fclose_r+0x9c>
   85438:	8809883a 	mov	r4,r17
   8543c:	00843040 	call	84304 <_free_r>
   85440:	80001115 	stw	zero,68(r16)
   85444:	8000030d 	sth	zero,12(r16)
   85448:	0083f740 	call	83f74 <__sfp_lock_release>
   8544c:	9005883a 	mov	r2,r18
   85450:	dfc00317 	ldw	ra,12(sp)
   85454:	dc800217 	ldw	r18,8(sp)
   85458:	dc400117 	ldw	r17,4(sp)
   8545c:	dc000017 	ldw	r16,0(sp)
   85460:	dec00404 	addi	sp,sp,16
   85464:	f800283a 	ret
   85468:	0083f740 	call	83f74 <__sfp_lock_release>
   8546c:	0025883a 	mov	r18,zero
   85470:	9005883a 	mov	r2,r18
   85474:	dfc00317 	ldw	ra,12(sp)
   85478:	dc800217 	ldw	r18,8(sp)
   8547c:	dc400117 	ldw	r17,4(sp)
   85480:	dc000017 	ldw	r16,0(sp)
   85484:	dec00404 	addi	sp,sp,16
   85488:	f800283a 	ret
   8548c:	8809883a 	mov	r4,r17
   85490:	0083f800 	call	83f80 <__sinit>
   85494:	8080030f 	ldh	r2,12(r16)
   85498:	103fd11e 	bne	r2,zero,853e0 <_fclose_r+0x38>
   8549c:	003ff206 	br	85468 <_fclose_r+0xc0>
   854a0:	81400417 	ldw	r5,16(r16)
   854a4:	8809883a 	mov	r4,r17
   854a8:	00843040 	call	84304 <_free_r>
   854ac:	003fd906 	br	85414 <_fclose_r+0x6c>
   854b0:	04bfffc4 	movi	r18,-1
   854b4:	003fd406 	br	85408 <_fclose_r+0x60>

000854b8 <fclose>:
   854b8:	00800234 	movhi	r2,8
   854bc:	109faa04 	addi	r2,r2,32424
   854c0:	200b883a 	mov	r5,r4
   854c4:	11000017 	ldw	r4,0(r2)
   854c8:	00853a81 	jmpi	853a8 <_fclose_r>

000854cc <_fstat_r>:
   854cc:	defffd04 	addi	sp,sp,-12
   854d0:	dc000015 	stw	r16,0(sp)
   854d4:	04000274 	movhi	r16,9
   854d8:	84276404 	addi	r16,r16,-25200
   854dc:	dc400115 	stw	r17,4(sp)
   854e0:	80000015 	stw	zero,0(r16)
   854e4:	2023883a 	mov	r17,r4
   854e8:	2809883a 	mov	r4,r5
   854ec:	300b883a 	mov	r5,r6
   854f0:	dfc00215 	stw	ra,8(sp)
   854f4:	00857000 	call	85700 <fstat>
   854f8:	1007883a 	mov	r3,r2
   854fc:	00bfffc4 	movi	r2,-1
   85500:	18800626 	beq	r3,r2,8551c <_fstat_r+0x50>
   85504:	1805883a 	mov	r2,r3
   85508:	dfc00217 	ldw	ra,8(sp)
   8550c:	dc400117 	ldw	r17,4(sp)
   85510:	dc000017 	ldw	r16,0(sp)
   85514:	dec00304 	addi	sp,sp,12
   85518:	f800283a 	ret
   8551c:	80800017 	ldw	r2,0(r16)
   85520:	103ff826 	beq	r2,zero,85504 <_fstat_r+0x38>
   85524:	88800015 	stw	r2,0(r17)
   85528:	1805883a 	mov	r2,r3
   8552c:	dfc00217 	ldw	ra,8(sp)
   85530:	dc400117 	ldw	r17,4(sp)
   85534:	dc000017 	ldw	r16,0(sp)
   85538:	dec00304 	addi	sp,sp,12
   8553c:	f800283a 	ret

00085540 <_isatty_r>:
   85540:	defffd04 	addi	sp,sp,-12
   85544:	dc000015 	stw	r16,0(sp)
   85548:	04000274 	movhi	r16,9
   8554c:	84276404 	addi	r16,r16,-25200
   85550:	dc400115 	stw	r17,4(sp)
   85554:	80000015 	stw	zero,0(r16)
   85558:	2023883a 	mov	r17,r4
   8555c:	2809883a 	mov	r4,r5
   85560:	dfc00215 	stw	ra,8(sp)
   85564:	00858340 	call	85834 <isatty>
   85568:	1007883a 	mov	r3,r2
   8556c:	00bfffc4 	movi	r2,-1
   85570:	18800626 	beq	r3,r2,8558c <_isatty_r+0x4c>
   85574:	1805883a 	mov	r2,r3
   85578:	dfc00217 	ldw	ra,8(sp)
   8557c:	dc400117 	ldw	r17,4(sp)
   85580:	dc000017 	ldw	r16,0(sp)
   85584:	dec00304 	addi	sp,sp,12
   85588:	f800283a 	ret
   8558c:	80800017 	ldw	r2,0(r16)
   85590:	103ff826 	beq	r2,zero,85574 <_isatty_r+0x34>
   85594:	88800015 	stw	r2,0(r17)
   85598:	1805883a 	mov	r2,r3
   8559c:	dfc00217 	ldw	ra,8(sp)
   855a0:	dc400117 	ldw	r17,4(sp)
   855a4:	dc000017 	ldw	r16,0(sp)
   855a8:	dec00304 	addi	sp,sp,12
   855ac:	f800283a 	ret

000855b0 <_lseek_r>:
   855b0:	defffd04 	addi	sp,sp,-12
   855b4:	dc000015 	stw	r16,0(sp)
   855b8:	04000274 	movhi	r16,9
   855bc:	84276404 	addi	r16,r16,-25200
   855c0:	dc400115 	stw	r17,4(sp)
   855c4:	80000015 	stw	zero,0(r16)
   855c8:	2023883a 	mov	r17,r4
   855cc:	2809883a 	mov	r4,r5
   855d0:	300b883a 	mov	r5,r6
   855d4:	380d883a 	mov	r6,r7
   855d8:	dfc00215 	stw	ra,8(sp)
   855dc:	00859540 	call	85954 <lseek>
   855e0:	1007883a 	mov	r3,r2
   855e4:	00bfffc4 	movi	r2,-1
   855e8:	18800626 	beq	r3,r2,85604 <_lseek_r+0x54>
   855ec:	1805883a 	mov	r2,r3
   855f0:	dfc00217 	ldw	ra,8(sp)
   855f4:	dc400117 	ldw	r17,4(sp)
   855f8:	dc000017 	ldw	r16,0(sp)
   855fc:	dec00304 	addi	sp,sp,12
   85600:	f800283a 	ret
   85604:	80800017 	ldw	r2,0(r16)
   85608:	103ff826 	beq	r2,zero,855ec <_lseek_r+0x3c>
   8560c:	88800015 	stw	r2,0(r17)
   85610:	1805883a 	mov	r2,r3
   85614:	dfc00217 	ldw	ra,8(sp)
   85618:	dc400117 	ldw	r17,4(sp)
   8561c:	dc000017 	ldw	r16,0(sp)
   85620:	dec00304 	addi	sp,sp,12
   85624:	f800283a 	ret

00085628 <_read_r>:
   85628:	defffd04 	addi	sp,sp,-12
   8562c:	dc000015 	stw	r16,0(sp)
   85630:	04000274 	movhi	r16,9
   85634:	84276404 	addi	r16,r16,-25200
   85638:	dc400115 	stw	r17,4(sp)
   8563c:	80000015 	stw	zero,0(r16)
   85640:	2023883a 	mov	r17,r4
   85644:	2809883a 	mov	r4,r5
   85648:	300b883a 	mov	r5,r6
   8564c:	380d883a 	mov	r6,r7
   85650:	dfc00215 	stw	ra,8(sp)
   85654:	0085ae40 	call	85ae4 <read>
   85658:	1007883a 	mov	r3,r2
   8565c:	00bfffc4 	movi	r2,-1
   85660:	18800626 	beq	r3,r2,8567c <_read_r+0x54>
   85664:	1805883a 	mov	r2,r3
   85668:	dfc00217 	ldw	ra,8(sp)
   8566c:	dc400117 	ldw	r17,4(sp)
   85670:	dc000017 	ldw	r16,0(sp)
   85674:	dec00304 	addi	sp,sp,12
   85678:	f800283a 	ret
   8567c:	80800017 	ldw	r2,0(r16)
   85680:	103ff826 	beq	r2,zero,85664 <_read_r+0x3c>
   85684:	88800015 	stw	r2,0(r17)
   85688:	1805883a 	mov	r2,r3
   8568c:	dfc00217 	ldw	ra,8(sp)
   85690:	dc400117 	ldw	r17,4(sp)
   85694:	dc000017 	ldw	r16,0(sp)
   85698:	dec00304 	addi	sp,sp,12
   8569c:	f800283a 	ret

000856a0 <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
   856a0:	defffd04 	addi	sp,sp,-12
   856a4:	df000215 	stw	fp,8(sp)
   856a8:	df000204 	addi	fp,sp,8
   856ac:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
   856b0:	e0bfff17 	ldw	r2,-4(fp)
   856b4:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   856b8:	e0bffe17 	ldw	r2,-8(fp)
   856bc:	1005003a 	cmpeq	r2,r2,zero
   856c0:	1000021e 	bne	r2,zero,856cc <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
   856c4:	002af070 	cmpltui	zero,zero,43969
   856c8:	00000106 	br	856d0 <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
   856cc:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
   856d0:	e037883a 	mov	sp,fp
   856d4:	df000017 	ldw	fp,0(sp)
   856d8:	dec00104 	addi	sp,sp,4
   856dc:	f800283a 	ret

000856e0 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   856e0:	defffd04 	addi	sp,sp,-12
   856e4:	dfc00215 	stw	ra,8(sp)
   856e8:	df000115 	stw	fp,4(sp)
   856ec:	df000104 	addi	fp,sp,4
   856f0:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
   856f4:	e13fff17 	ldw	r4,-4(fp)
   856f8:	00856a00 	call	856a0 <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   856fc:	003fff06 	br	856fc <_exit+0x1c>

00085700 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   85700:	defff904 	addi	sp,sp,-28
   85704:	dfc00615 	stw	ra,24(sp)
   85708:	df000515 	stw	fp,20(sp)
   8570c:	df000504 	addi	fp,sp,20
   85710:	e13ffc15 	stw	r4,-16(fp)
   85714:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   85718:	e0bffc17 	ldw	r2,-16(fp)
   8571c:	1004803a 	cmplt	r2,r2,zero
   85720:	1000081e 	bne	r2,zero,85744 <fstat+0x44>
   85724:	e0bffc17 	ldw	r2,-16(fp)
   85728:	10800324 	muli	r2,r2,12
   8572c:	1007883a 	mov	r3,r2
   85730:	00800234 	movhi	r2,8
   85734:	109d3d04 	addi	r2,r2,29940
   85738:	1887883a 	add	r3,r3,r2
   8573c:	e0ffff15 	stw	r3,-4(fp)
   85740:	00000106 	br	85748 <fstat+0x48>
   85744:	e03fff15 	stw	zero,-4(fp)
   85748:	e0bfff17 	ldw	r2,-4(fp)
   8574c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   85750:	e0bffb17 	ldw	r2,-20(fp)
   85754:	1005003a 	cmpeq	r2,r2,zero
   85758:	1000121e 	bne	r2,zero,857a4 <fstat+0xa4>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   8575c:	e0bffb17 	ldw	r2,-20(fp)
   85760:	10800017 	ldw	r2,0(r2)
   85764:	10800817 	ldw	r2,32(r2)
   85768:	1005003a 	cmpeq	r2,r2,zero
   8576c:	1000081e 	bne	r2,zero,85790 <fstat+0x90>
    {
      return fd->dev->fstat(fd, st);
   85770:	e0bffb17 	ldw	r2,-20(fp)
   85774:	10800017 	ldw	r2,0(r2)
   85778:	10800817 	ldw	r2,32(r2)
   8577c:	e13ffb17 	ldw	r4,-20(fp)
   85780:	e17ffd17 	ldw	r5,-12(fp)
   85784:	103ee83a 	callr	r2
   85788:	e0bffe15 	stw	r2,-8(fp)
   8578c:	00000b06 	br	857bc <fstat+0xbc>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   85790:	e0fffd17 	ldw	r3,-12(fp)
   85794:	00880004 	movi	r2,8192
   85798:	18800115 	stw	r2,4(r3)
      return 0;
   8579c:	e03ffe15 	stw	zero,-8(fp)
   857a0:	00000606 	br	857bc <fstat+0xbc>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   857a4:	00857d40 	call	857d4 <alt_get_errno>
   857a8:	1007883a 	mov	r3,r2
   857ac:	00801444 	movi	r2,81
   857b0:	18800015 	stw	r2,0(r3)
    return -1;
   857b4:	00bfffc4 	movi	r2,-1
   857b8:	e0bffe15 	stw	r2,-8(fp)
   857bc:	e0bffe17 	ldw	r2,-8(fp)
  }
}
   857c0:	e037883a 	mov	sp,fp
   857c4:	dfc00117 	ldw	ra,4(sp)
   857c8:	df000017 	ldw	fp,0(sp)
   857cc:	dec00204 	addi	sp,sp,8
   857d0:	f800283a 	ret

000857d4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   857d4:	defffd04 	addi	sp,sp,-12
   857d8:	dfc00215 	stw	ra,8(sp)
   857dc:	df000115 	stw	fp,4(sp)
   857e0:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   857e4:	00800234 	movhi	r2,8
   857e8:	109fa604 	addi	r2,r2,32408
   857ec:	10800017 	ldw	r2,0(r2)
   857f0:	1005003a 	cmpeq	r2,r2,zero
   857f4:	1000061e 	bne	r2,zero,85810 <alt_get_errno+0x3c>
   857f8:	00800234 	movhi	r2,8
   857fc:	109fa604 	addi	r2,r2,32408
   85800:	10800017 	ldw	r2,0(r2)
   85804:	103ee83a 	callr	r2
   85808:	e0bfff15 	stw	r2,-4(fp)
   8580c:	00000306 	br	8581c <alt_get_errno+0x48>
   85810:	00800274 	movhi	r2,9
   85814:	10a76404 	addi	r2,r2,-25200
   85818:	e0bfff15 	stw	r2,-4(fp)
   8581c:	e0bfff17 	ldw	r2,-4(fp)
}
   85820:	e037883a 	mov	sp,fp
   85824:	dfc00117 	ldw	ra,4(sp)
   85828:	df000017 	ldw	fp,0(sp)
   8582c:	dec00204 	addi	sp,sp,8
   85830:	f800283a 	ret

00085834 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   85834:	deffeb04 	addi	sp,sp,-84
   85838:	dfc01415 	stw	ra,80(sp)
   8583c:	df001315 	stw	fp,76(sp)
   85840:	df001304 	addi	fp,sp,76
   85844:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   85848:	e0bffd17 	ldw	r2,-12(fp)
   8584c:	1004803a 	cmplt	r2,r2,zero
   85850:	1000081e 	bne	r2,zero,85874 <isatty+0x40>
   85854:	e0bffd17 	ldw	r2,-12(fp)
   85858:	10800324 	muli	r2,r2,12
   8585c:	1007883a 	mov	r3,r2
   85860:	00800234 	movhi	r2,8
   85864:	109d3d04 	addi	r2,r2,29940
   85868:	1887883a 	add	r3,r3,r2
   8586c:	e0ffff15 	stw	r3,-4(fp)
   85870:	00000106 	br	85878 <isatty+0x44>
   85874:	e03fff15 	stw	zero,-4(fp)
   85878:	e0bfff17 	ldw	r2,-4(fp)
   8587c:	e0bfed15 	stw	r2,-76(fp)
  
  if (fd)
   85880:	e0bfed17 	ldw	r2,-76(fp)
   85884:	1005003a 	cmpeq	r2,r2,zero
   85888:	10000f1e 	bne	r2,zero,858c8 <isatty+0x94>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   8588c:	e0bfed17 	ldw	r2,-76(fp)
   85890:	10800017 	ldw	r2,0(r2)
   85894:	10800817 	ldw	r2,32(r2)
   85898:	1004c03a 	cmpne	r2,r2,zero
   8589c:	1000031e 	bne	r2,zero,858ac <isatty+0x78>
    {
      return 1;
   858a0:	00800044 	movi	r2,1
   858a4:	e0bffe15 	stw	r2,-8(fp)
   858a8:	00000c06 	br	858dc <isatty+0xa8>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   858ac:	e17fee04 	addi	r5,fp,-72
   858b0:	e13ffd17 	ldw	r4,-12(fp)
   858b4:	00857000 	call	85700 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   858b8:	e0bfef17 	ldw	r2,-68(fp)
   858bc:	10880020 	cmpeqi	r2,r2,8192
   858c0:	e0bffe15 	stw	r2,-8(fp)
   858c4:	00000506 	br	858dc <isatty+0xa8>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   858c8:	00858f40 	call	858f4 <alt_get_errno>
   858cc:	1007883a 	mov	r3,r2
   858d0:	00801444 	movi	r2,81
   858d4:	18800015 	stw	r2,0(r3)
    return 0;
   858d8:	e03ffe15 	stw	zero,-8(fp)
   858dc:	e0bffe17 	ldw	r2,-8(fp)
  }
}
   858e0:	e037883a 	mov	sp,fp
   858e4:	dfc00117 	ldw	ra,4(sp)
   858e8:	df000017 	ldw	fp,0(sp)
   858ec:	dec00204 	addi	sp,sp,8
   858f0:	f800283a 	ret

000858f4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   858f4:	defffd04 	addi	sp,sp,-12
   858f8:	dfc00215 	stw	ra,8(sp)
   858fc:	df000115 	stw	fp,4(sp)
   85900:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   85904:	00800234 	movhi	r2,8
   85908:	109fa604 	addi	r2,r2,32408
   8590c:	10800017 	ldw	r2,0(r2)
   85910:	1005003a 	cmpeq	r2,r2,zero
   85914:	1000061e 	bne	r2,zero,85930 <alt_get_errno+0x3c>
   85918:	00800234 	movhi	r2,8
   8591c:	109fa604 	addi	r2,r2,32408
   85920:	10800017 	ldw	r2,0(r2)
   85924:	103ee83a 	callr	r2
   85928:	e0bfff15 	stw	r2,-4(fp)
   8592c:	00000306 	br	8593c <alt_get_errno+0x48>
   85930:	00800274 	movhi	r2,9
   85934:	10a76404 	addi	r2,r2,-25200
   85938:	e0bfff15 	stw	r2,-4(fp)
   8593c:	e0bfff17 	ldw	r2,-4(fp)
}
   85940:	e037883a 	mov	sp,fp
   85944:	dfc00117 	ldw	ra,4(sp)
   85948:	df000017 	ldw	fp,0(sp)
   8594c:	dec00204 	addi	sp,sp,8
   85950:	f800283a 	ret

00085954 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   85954:	defff804 	addi	sp,sp,-32
   85958:	dfc00715 	stw	ra,28(sp)
   8595c:	df000615 	stw	fp,24(sp)
   85960:	df000604 	addi	fp,sp,24
   85964:	e13ffc15 	stw	r4,-16(fp)
   85968:	e17ffd15 	stw	r5,-12(fp)
   8596c:	e1bffe15 	stw	r6,-8(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   85970:	e03ffa15 	stw	zero,-24(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   85974:	e0bffc17 	ldw	r2,-16(fp)
   85978:	1004803a 	cmplt	r2,r2,zero
   8597c:	1000081e 	bne	r2,zero,859a0 <lseek+0x4c>
   85980:	e0bffc17 	ldw	r2,-16(fp)
   85984:	10800324 	muli	r2,r2,12
   85988:	1007883a 	mov	r3,r2
   8598c:	00800234 	movhi	r2,8
   85990:	109d3d04 	addi	r2,r2,29940
   85994:	1887883a 	add	r3,r3,r2
   85998:	e0ffff15 	stw	r3,-4(fp)
   8599c:	00000106 	br	859a4 <lseek+0x50>
   859a0:	e03fff15 	stw	zero,-4(fp)
   859a4:	e0bfff17 	ldw	r2,-4(fp)
   859a8:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd) 
   859ac:	e0bffb17 	ldw	r2,-20(fp)
   859b0:	1005003a 	cmpeq	r2,r2,zero
   859b4:	1000111e 	bne	r2,zero,859fc <lseek+0xa8>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   859b8:	e0bffb17 	ldw	r2,-20(fp)
   859bc:	10800017 	ldw	r2,0(r2)
   859c0:	10800717 	ldw	r2,28(r2)
   859c4:	1005003a 	cmpeq	r2,r2,zero
   859c8:	1000091e 	bne	r2,zero,859f0 <lseek+0x9c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   859cc:	e0bffb17 	ldw	r2,-20(fp)
   859d0:	10800017 	ldw	r2,0(r2)
   859d4:	10800717 	ldw	r2,28(r2)
   859d8:	e13ffb17 	ldw	r4,-20(fp)
   859dc:	e17ffd17 	ldw	r5,-12(fp)
   859e0:	e1bffe17 	ldw	r6,-8(fp)
   859e4:	103ee83a 	callr	r2
   859e8:	e0bffa15 	stw	r2,-24(fp)
   859ec:	00000506 	br	85a04 <lseek+0xb0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   859f0:	00bfde84 	movi	r2,-134
   859f4:	e0bffa15 	stw	r2,-24(fp)
   859f8:	00000206 	br	85a04 <lseek+0xb0>
    }
  }
  else  
  {
    rc = -EBADFD;
   859fc:	00bfebc4 	movi	r2,-81
   85a00:	e0bffa15 	stw	r2,-24(fp)
  }

  if (rc < 0)
   85a04:	e0bffa17 	ldw	r2,-24(fp)
   85a08:	1004403a 	cmpge	r2,r2,zero
   85a0c:	1000071e 	bne	r2,zero,85a2c <lseek+0xd8>
  {
    ALT_ERRNO = -rc;
   85a10:	0085a440 	call	85a44 <alt_get_errno>
   85a14:	1007883a 	mov	r3,r2
   85a18:	e0bffa17 	ldw	r2,-24(fp)
   85a1c:	0085c83a 	sub	r2,zero,r2
   85a20:	18800015 	stw	r2,0(r3)
    rc = -1;
   85a24:	00bfffc4 	movi	r2,-1
   85a28:	e0bffa15 	stw	r2,-24(fp)
  }

  return rc;
   85a2c:	e0bffa17 	ldw	r2,-24(fp)
}
   85a30:	e037883a 	mov	sp,fp
   85a34:	dfc00117 	ldw	ra,4(sp)
   85a38:	df000017 	ldw	fp,0(sp)
   85a3c:	dec00204 	addi	sp,sp,8
   85a40:	f800283a 	ret

00085a44 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   85a44:	defffd04 	addi	sp,sp,-12
   85a48:	dfc00215 	stw	ra,8(sp)
   85a4c:	df000115 	stw	fp,4(sp)
   85a50:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   85a54:	00800234 	movhi	r2,8
   85a58:	109fa604 	addi	r2,r2,32408
   85a5c:	10800017 	ldw	r2,0(r2)
   85a60:	1005003a 	cmpeq	r2,r2,zero
   85a64:	1000061e 	bne	r2,zero,85a80 <alt_get_errno+0x3c>
   85a68:	00800234 	movhi	r2,8
   85a6c:	109fa604 	addi	r2,r2,32408
   85a70:	10800017 	ldw	r2,0(r2)
   85a74:	103ee83a 	callr	r2
   85a78:	e0bfff15 	stw	r2,-4(fp)
   85a7c:	00000306 	br	85a8c <alt_get_errno+0x48>
   85a80:	00800274 	movhi	r2,9
   85a84:	10a76404 	addi	r2,r2,-25200
   85a88:	e0bfff15 	stw	r2,-4(fp)
   85a8c:	e0bfff17 	ldw	r2,-4(fp)
}
   85a90:	e037883a 	mov	sp,fp
   85a94:	dfc00117 	ldw	ra,4(sp)
   85a98:	df000017 	ldw	fp,0(sp)
   85a9c:	dec00204 	addi	sp,sp,8
   85aa0:	f800283a 	ret

00085aa4 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   85aa4:	defffe04 	addi	sp,sp,-8
   85aa8:	df000115 	stw	fp,4(sp)
   85aac:	df000104 	addi	fp,sp,4
   85ab0:	e13fff15 	stw	r4,-4(fp)
}
   85ab4:	e037883a 	mov	sp,fp
   85ab8:	df000017 	ldw	fp,0(sp)
   85abc:	dec00104 	addi	sp,sp,4
   85ac0:	f800283a 	ret

00085ac4 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   85ac4:	defffe04 	addi	sp,sp,-8
   85ac8:	df000115 	stw	fp,4(sp)
   85acc:	df000104 	addi	fp,sp,4
   85ad0:	e13fff15 	stw	r4,-4(fp)
}
   85ad4:	e037883a 	mov	sp,fp
   85ad8:	df000017 	ldw	fp,0(sp)
   85adc:	dec00104 	addi	sp,sp,4
   85ae0:	f800283a 	ret

00085ae4 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   85ae4:	defff704 	addi	sp,sp,-36
   85ae8:	dfc00815 	stw	ra,32(sp)
   85aec:	df000715 	stw	fp,28(sp)
   85af0:	df000704 	addi	fp,sp,28
   85af4:	e13ffb15 	stw	r4,-20(fp)
   85af8:	e17ffc15 	stw	r5,-16(fp)
   85afc:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   85b00:	e0bffb17 	ldw	r2,-20(fp)
   85b04:	1004803a 	cmplt	r2,r2,zero
   85b08:	1000081e 	bne	r2,zero,85b2c <read+0x48>
   85b0c:	e0bffb17 	ldw	r2,-20(fp)
   85b10:	10800324 	muli	r2,r2,12
   85b14:	1007883a 	mov	r3,r2
   85b18:	00800234 	movhi	r2,8
   85b1c:	109d3d04 	addi	r2,r2,29940
   85b20:	1887883a 	add	r3,r3,r2
   85b24:	e0ffff15 	stw	r3,-4(fp)
   85b28:	00000106 	br	85b30 <read+0x4c>
   85b2c:	e03fff15 	stw	zero,-4(fp)
   85b30:	e0bfff17 	ldw	r2,-4(fp)
   85b34:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
   85b38:	e0bffa17 	ldw	r2,-24(fp)
   85b3c:	1005003a 	cmpeq	r2,r2,zero
   85b40:	1000241e 	bne	r2,zero,85bd4 <read+0xf0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   85b44:	e0bffa17 	ldw	r2,-24(fp)
   85b48:	10800217 	ldw	r2,8(r2)
   85b4c:	108000cc 	andi	r2,r2,3
   85b50:	10800060 	cmpeqi	r2,r2,1
   85b54:	10001a1e 	bne	r2,zero,85bc0 <read+0xdc>
   85b58:	e0bffa17 	ldw	r2,-24(fp)
   85b5c:	10800017 	ldw	r2,0(r2)
   85b60:	10800517 	ldw	r2,20(r2)
   85b64:	1005003a 	cmpeq	r2,r2,zero
   85b68:	1000151e 	bne	r2,zero,85bc0 <read+0xdc>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   85b6c:	e0bffa17 	ldw	r2,-24(fp)
   85b70:	10800017 	ldw	r2,0(r2)
   85b74:	10800517 	ldw	r2,20(r2)
   85b78:	e17ffc17 	ldw	r5,-16(fp)
   85b7c:	e1bffd17 	ldw	r6,-12(fp)
   85b80:	e13ffa17 	ldw	r4,-24(fp)
   85b84:	103ee83a 	callr	r2
   85b88:	e0bff915 	stw	r2,-28(fp)
   85b8c:	e0bff917 	ldw	r2,-28(fp)
   85b90:	1004403a 	cmpge	r2,r2,zero
   85b94:	1000071e 	bne	r2,zero,85bb4 <read+0xd0>
        {
          ALT_ERRNO = -rval;
   85b98:	0085c040 	call	85c04 <alt_get_errno>
   85b9c:	e0fff917 	ldw	r3,-28(fp)
   85ba0:	00c7c83a 	sub	r3,zero,r3
   85ba4:	10c00015 	stw	r3,0(r2)
          return -1;
   85ba8:	00bfffc4 	movi	r2,-1
   85bac:	e0bffe15 	stw	r2,-8(fp)
   85bb0:	00000e06 	br	85bec <read+0x108>
        }
        return rval;
   85bb4:	e0bff917 	ldw	r2,-28(fp)
   85bb8:	e0bffe15 	stw	r2,-8(fp)
   85bbc:	00000b06 	br	85bec <read+0x108>
      }
      else
      {
        ALT_ERRNO = EACCES;
   85bc0:	0085c040 	call	85c04 <alt_get_errno>
   85bc4:	1007883a 	mov	r3,r2
   85bc8:	00800344 	movi	r2,13
   85bcc:	18800015 	stw	r2,0(r3)
   85bd0:	00000406 	br	85be4 <read+0x100>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   85bd4:	0085c040 	call	85c04 <alt_get_errno>
   85bd8:	1007883a 	mov	r3,r2
   85bdc:	00801444 	movi	r2,81
   85be0:	18800015 	stw	r2,0(r3)
  }
  return -1;
   85be4:	00bfffc4 	movi	r2,-1
   85be8:	e0bffe15 	stw	r2,-8(fp)
   85bec:	e0bffe17 	ldw	r2,-8(fp)
}
   85bf0:	e037883a 	mov	sp,fp
   85bf4:	dfc00117 	ldw	ra,4(sp)
   85bf8:	df000017 	ldw	fp,0(sp)
   85bfc:	dec00204 	addi	sp,sp,8
   85c00:	f800283a 	ret

00085c04 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   85c04:	defffd04 	addi	sp,sp,-12
   85c08:	dfc00215 	stw	ra,8(sp)
   85c0c:	df000115 	stw	fp,4(sp)
   85c10:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   85c14:	00800234 	movhi	r2,8
   85c18:	109fa604 	addi	r2,r2,32408
   85c1c:	10800017 	ldw	r2,0(r2)
   85c20:	1005003a 	cmpeq	r2,r2,zero
   85c24:	1000061e 	bne	r2,zero,85c40 <alt_get_errno+0x3c>
   85c28:	00800234 	movhi	r2,8
   85c2c:	109fa604 	addi	r2,r2,32408
   85c30:	10800017 	ldw	r2,0(r2)
   85c34:	103ee83a 	callr	r2
   85c38:	e0bfff15 	stw	r2,-4(fp)
   85c3c:	00000306 	br	85c4c <alt_get_errno+0x48>
   85c40:	00800274 	movhi	r2,9
   85c44:	10a76404 	addi	r2,r2,-25200
   85c48:	e0bfff15 	stw	r2,-4(fp)
   85c4c:	e0bfff17 	ldw	r2,-4(fp)
}
   85c50:	e037883a 	mov	sp,fp
   85c54:	dfc00117 	ldw	ra,4(sp)
   85c58:	df000017 	ldw	fp,0(sp)
   85c5c:	dec00204 	addi	sp,sp,8
   85c60:	f800283a 	ret

00085c64 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   85c64:	defff804 	addi	sp,sp,-32
   85c68:	df000715 	stw	fp,28(sp)
   85c6c:	df000704 	addi	fp,sp,28
   85c70:	e13ffe15 	stw	r4,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   85c74:	0005303a 	rdctl	r2,status
   85c78:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   85c7c:	e0fffb17 	ldw	r3,-20(fp)
   85c80:	00bfff84 	movi	r2,-2
   85c84:	1884703a 	and	r2,r3,r2
   85c88:	1001703a 	wrctl	status,r2
  
  return context;
   85c8c:	e0bffb17 	ldw	r2,-20(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   85c90:	e0bffd15 	stw	r2,-12(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   85c94:	d0a00f17 	ldw	r2,-32708(gp)
   85c98:	10c000c4 	addi	r3,r2,3
   85c9c:	00bfff04 	movi	r2,-4
   85ca0:	1884703a 	and	r2,r3,r2
   85ca4:	d0a00f15 	stw	r2,-32708(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   85ca8:	d0e00f17 	ldw	r3,-32708(gp)
   85cac:	e0bffe17 	ldw	r2,-8(fp)
   85cb0:	1887883a 	add	r3,r3,r2
   85cb4:	00800374 	movhi	r2,13
   85cb8:	10a4f804 	addi	r2,r2,-27680
   85cbc:	10c0072e 	bgeu	r2,r3,85cdc <sbrk+0x78>
   85cc0:	e0bffd17 	ldw	r2,-12(fp)
   85cc4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   85cc8:	e0bffa17 	ldw	r2,-24(fp)
   85ccc:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   85cd0:	00bfffc4 	movi	r2,-1
   85cd4:	e0bfff15 	stw	r2,-4(fp)
   85cd8:	00000c06 	br	85d0c <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
   85cdc:	d0a00f17 	ldw	r2,-32708(gp)
   85ce0:	e0bffc15 	stw	r2,-16(fp)
  heap_end += incr; 
   85ce4:	d0e00f17 	ldw	r3,-32708(gp)
   85ce8:	e0bffe17 	ldw	r2,-8(fp)
   85cec:	1885883a 	add	r2,r3,r2
   85cf0:	d0a00f15 	stw	r2,-32708(gp)
   85cf4:	e0bffd17 	ldw	r2,-12(fp)
   85cf8:	e0bff915 	stw	r2,-28(fp)
   85cfc:	e0bff917 	ldw	r2,-28(fp)
   85d00:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   85d04:	e0bffc17 	ldw	r2,-16(fp)
   85d08:	e0bfff15 	stw	r2,-4(fp)
   85d0c:	e0bfff17 	ldw	r2,-4(fp)
} 
   85d10:	e037883a 	mov	sp,fp
   85d14:	df000017 	ldw	fp,0(sp)
   85d18:	dec00104 	addi	sp,sp,4
   85d1c:	f800283a 	ret

00085d20 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   85d20:	defff704 	addi	sp,sp,-36
   85d24:	dfc00815 	stw	ra,32(sp)
   85d28:	df000715 	stw	fp,28(sp)
   85d2c:	df000704 	addi	fp,sp,28
   85d30:	e13ffb15 	stw	r4,-20(fp)
   85d34:	e17ffc15 	stw	r5,-16(fp)
   85d38:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   85d3c:	e0bffb17 	ldw	r2,-20(fp)
   85d40:	1004803a 	cmplt	r2,r2,zero
   85d44:	1000081e 	bne	r2,zero,85d68 <write+0x48>
   85d48:	e0bffb17 	ldw	r2,-20(fp)
   85d4c:	10800324 	muli	r2,r2,12
   85d50:	1007883a 	mov	r3,r2
   85d54:	00800234 	movhi	r2,8
   85d58:	109d3d04 	addi	r2,r2,29940
   85d5c:	1887883a 	add	r3,r3,r2
   85d60:	e0ffff15 	stw	r3,-4(fp)
   85d64:	00000106 	br	85d6c <write+0x4c>
   85d68:	e03fff15 	stw	zero,-4(fp)
   85d6c:	e0bfff17 	ldw	r2,-4(fp)
   85d70:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
   85d74:	e0bffa17 	ldw	r2,-24(fp)
   85d78:	1005003a 	cmpeq	r2,r2,zero
   85d7c:	1000241e 	bne	r2,zero,85e10 <write+0xf0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   85d80:	e0bffa17 	ldw	r2,-24(fp)
   85d84:	10800217 	ldw	r2,8(r2)
   85d88:	108000cc 	andi	r2,r2,3
   85d8c:	1005003a 	cmpeq	r2,r2,zero
   85d90:	10001a1e 	bne	r2,zero,85dfc <write+0xdc>
   85d94:	e0bffa17 	ldw	r2,-24(fp)
   85d98:	10800017 	ldw	r2,0(r2)
   85d9c:	10800617 	ldw	r2,24(r2)
   85da0:	1005003a 	cmpeq	r2,r2,zero
   85da4:	1000151e 	bne	r2,zero,85dfc <write+0xdc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   85da8:	e0bffa17 	ldw	r2,-24(fp)
   85dac:	10800017 	ldw	r2,0(r2)
   85db0:	10800617 	ldw	r2,24(r2)
   85db4:	e17ffc17 	ldw	r5,-16(fp)
   85db8:	e1bffd17 	ldw	r6,-12(fp)
   85dbc:	e13ffa17 	ldw	r4,-24(fp)
   85dc0:	103ee83a 	callr	r2
   85dc4:	e0bff915 	stw	r2,-28(fp)
   85dc8:	e0bff917 	ldw	r2,-28(fp)
   85dcc:	1004403a 	cmpge	r2,r2,zero
   85dd0:	1000071e 	bne	r2,zero,85df0 <write+0xd0>
      {
        ALT_ERRNO = -rval;
   85dd4:	0085e400 	call	85e40 <alt_get_errno>
   85dd8:	e0fff917 	ldw	r3,-28(fp)
   85ddc:	00c7c83a 	sub	r3,zero,r3
   85de0:	10c00015 	stw	r3,0(r2)
        return -1;
   85de4:	00bfffc4 	movi	r2,-1
   85de8:	e0bffe15 	stw	r2,-8(fp)
   85dec:	00000e06 	br	85e28 <write+0x108>
      }
      return rval;
   85df0:	e0bff917 	ldw	r2,-28(fp)
   85df4:	e0bffe15 	stw	r2,-8(fp)
   85df8:	00000b06 	br	85e28 <write+0x108>
    }
    else
    {
      ALT_ERRNO = EACCES;
   85dfc:	0085e400 	call	85e40 <alt_get_errno>
   85e00:	1007883a 	mov	r3,r2
   85e04:	00800344 	movi	r2,13
   85e08:	18800015 	stw	r2,0(r3)
   85e0c:	00000406 	br	85e20 <write+0x100>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   85e10:	0085e400 	call	85e40 <alt_get_errno>
   85e14:	1007883a 	mov	r3,r2
   85e18:	00801444 	movi	r2,81
   85e1c:	18800015 	stw	r2,0(r3)
  }
  return -1;
   85e20:	00bfffc4 	movi	r2,-1
   85e24:	e0bffe15 	stw	r2,-8(fp)
   85e28:	e0bffe17 	ldw	r2,-8(fp)
}
   85e2c:	e037883a 	mov	sp,fp
   85e30:	dfc00117 	ldw	ra,4(sp)
   85e34:	df000017 	ldw	fp,0(sp)
   85e38:	dec00204 	addi	sp,sp,8
   85e3c:	f800283a 	ret

00085e40 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   85e40:	defffd04 	addi	sp,sp,-12
   85e44:	dfc00215 	stw	ra,8(sp)
   85e48:	df000115 	stw	fp,4(sp)
   85e4c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   85e50:	00800234 	movhi	r2,8
   85e54:	109fa604 	addi	r2,r2,32408
   85e58:	10800017 	ldw	r2,0(r2)
   85e5c:	1005003a 	cmpeq	r2,r2,zero
   85e60:	1000061e 	bne	r2,zero,85e7c <alt_get_errno+0x3c>
   85e64:	00800234 	movhi	r2,8
   85e68:	109fa604 	addi	r2,r2,32408
   85e6c:	10800017 	ldw	r2,0(r2)
   85e70:	103ee83a 	callr	r2
   85e74:	e0bfff15 	stw	r2,-4(fp)
   85e78:	00000306 	br	85e88 <alt_get_errno+0x48>
   85e7c:	00800274 	movhi	r2,9
   85e80:	10a76404 	addi	r2,r2,-25200
   85e84:	e0bfff15 	stw	r2,-4(fp)
   85e88:	e0bfff17 	ldw	r2,-4(fp)
}
   85e8c:	e037883a 	mov	sp,fp
   85e90:	dfc00117 	ldw	ra,4(sp)
   85e94:	df000017 	ldw	fp,0(sp)
   85e98:	dec00204 	addi	sp,sp,8
   85e9c:	f800283a 	ret
   85ea0:	00083b34 	movhi	zero,8428
